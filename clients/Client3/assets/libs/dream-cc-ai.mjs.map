{
  "version": 3,
  "sources": ["../src/behaviorTree/BTNodeStatus.ts", "../src/behaviorTree/BTNodeType.ts", "../src/behaviorTree/BTNode.ts", "../src/behaviorTree/actions/BTActionNode.ts", "../src/behaviorTree/actions/BTAsyncActionNode.ts", "../src/behaviorTree/actions/BTCoroActionNode.ts", "../src/behaviorTree/actions/BTSimpleActionNode.ts", "../src/behaviorTree/actions/BTStatefulActionNode.ts", "../src/behaviorTree/actions/BTSyncActionNode.ts", "../src/behaviorTree/conditions/BTConditionNode.ts", "../src/behaviorTree/conditions/BTSimpleConditionNode.ts", "../src/behaviorTree/controls/BTControlNode.ts", "../src/behaviorTree/controls/BTFallbackNode.ts", "../src/behaviorTree/controls/BTIfThenElseNode.ts", "../src/behaviorTree/controls/BTParallelNode.ts", "../src/behaviorTree/controls/BTReactiveFallback.ts", "../src/behaviorTree/controls/BTSequenceNode.ts", "../src/behaviorTree/controls/BTSequenceStarNode.ts", "../src/behaviorTree/controls/BTWhileDoElseNode.ts", "../src/behaviorTree/decorators/BTDecoratorNode.ts", "../src/behaviorTree/decorators/BTDelayNode.ts", "../src/behaviorTree/decorators/BTForceFailureNode.ts", "../src/behaviorTree/decorators/BTForceSuccessNode.ts", "../src/behaviorTree/decorators/BTInverterNode.ts", "../src/behaviorTree/decorators/BTKeepRunningUntilFailureNode.ts", "../src/behaviorTree/decorators/BTRepeatNode.ts", "../src/behaviorTree/decorators/BTRetryNode.ts", "../src/behaviorTree/decorators/BTTimeOutNode.ts", "../src/behaviorTree/BTUtils.ts", "../src/behaviorTree/BTNodeKeys.ts", "../src/behaviorTree/controls/BTReactiveSequence.ts", "../src/behaviorTree/BTContext.ts", "../src/behaviorTree/BTBlackboard.ts", "../src/behaviorTree/ecs/BehaviorTreeComponent.ts", "../src/behaviorTree/ecs/BehaviorTreeSystem.ts", "../src/fsm/ecs/FSMComponent.ts", "../src/fsm/FSM.ts", "../src/fsm/ecs/FSMSystem.ts"],
  "sourcesContent": ["\r\n\r\n/**\r\n * \u8282\u70B9\u72B6\u6001\r\n */\r\nexport enum BTNodeStatus {\r\n    /**\u521D\u59CB\u72B6\u6001 */\r\n    IDLE = 0,\r\n    /**\u5931\u8D25 */\r\n    FAILURE,\r\n    /**\u6210\u529F */\r\n    SUCCESS,\r\n    /**\u8FD0\u884C\u4E2D */\r\n    RUNNING\r\n}", "\r\n\r\n\r\n/**\r\n * \u8282\u70B9\u7C7B\u578B\r\n */\r\nexport enum BTNodeType{\r\n    ERROR,\r\n    CONTROL,\r\n    DECORATOR,\r\n    ACTION,\r\n    CONDITION\r\n}", "import { BTBlackboard } from \"./BTBlackboard\";\r\nimport { BTNodeStatus } from \"./BTNodeStatus\";\r\nimport { BTNodeType } from \"./BTNodeType\";\r\nimport { IBTNode } from \"./interfaces/IBTNode\";\r\nimport { IBTNodeConfig } from \"./interfaces/IBTNodeConfig\";\r\n\r\n\r\nexport abstract class BTNode implements IBTNode {\r\n\r\n    /**\u540D\u79F0 */\r\n    name: string;\r\n\r\n    /**\u7236\u8282\u70B9*/\r\n    parent: IBTNode | null = null;\r\n\r\n    /**\u9ED1\u677F */\r\n    blackboard: BTBlackboard;\r\n\r\n    /**\u72B6\u6001 */\r\n    protected $status: BTNodeStatus = BTNodeStatus.IDLE;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        this.name = name;\r\n        this.blackboard = blackboard;\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n\r\n    }\r\n\r\n    evaluate(): BTNodeStatus {\r\n        this.status = this.tick() as BTNodeStatus;\r\n        return this.status;\r\n    }\r\n\r\n    abstract tick(): BTNodeStatus | Promise<BTNodeStatus>;\r\n\r\n    abstract halt(): void;\r\n\r\n    destroy(): void {\r\n        this.parent = null;\r\n        this.blackboard = null;\r\n    }\r\n\r\n    /**\u83B7\u53D6\u72B6\u6001*/\r\n    get status(): BTNodeStatus {\r\n        return this.$status;\r\n    }\r\n\r\n    set status(value: BTNodeStatus) {\r\n        this.$status = value;\r\n    }\r\n\r\n    get type(): BTNodeType {\r\n        return BTNodeType.ERROR;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNode } from \"../BTNode\";\r\nimport { BTNodeType } from \"../BTNodeType\";\r\n\r\n/**\r\n * \u52A8\u4F5C\u8282\u70B9\u57FA\u7840\u7C7B\r\n */\r\nexport abstract class BTActionNode extends BTNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    get type():BTNodeType{\r\n        return BTNodeType.ACTION;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTActionNode } from \"./BTActionNode\";\r\n\r\n\r\n/**\r\n* \u5F02\u6B65\u52A8\u4F5C\u8282\u70B9\u57FA\u7840\u7C7B\r\n*/\r\nexport abstract class BTAsyncActionNode extends BTActionNode {\r\n\r\n   private halt_requested: boolean;\r\n\r\n   constructor(name: string, blackboard: BTBlackboard) {\r\n       super(name,blackboard);\r\n       this.halt_requested = false;\r\n   }\r\n       \r\n   evaluate(): BTNodeStatus {\r\n       if (this.status === BTNodeStatus.IDLE) {\r\n           this.status = BTNodeStatus.RUNNING;\r\n           this.halt_requested = false;\r\n           (async () => {\r\n               try {\r\n                   // this.waiting = true;\r\n                   this.status = await this.tick();\r\n                   // this.waiting = false;\r\n               } catch (error) {\r\n                   // this.waiting = false;\r\n                   throw new Error(error as any);\r\n               }\r\n           })();\r\n       }\r\n       return this.status;\r\n   }\r\n\r\n   public isHaltRequested(): boolean {\r\n       return this.halt_requested;\r\n   }\r\n\r\n   halt() {\r\n       this.halt_requested = true;\r\n       // while (this.waiting) {}\r\n       // this.setStatus(NodeStatus.IDLE);\r\n   }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTActionNode } from \"./BTActionNode\";\r\n\r\n\r\n\r\nexport abstract class BTCoroActionNode extends BTActionNode {\r\n\r\n    private yield: boolean = false;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    setStatusRunningAndYield() {\r\n        this.status = BTNodeStatus.RUNNING;\r\n        this.yield = true;\r\n    }\r\n\r\n    evaluate(): BTNodeStatus {\r\n        if (!this.yield) {\r\n            this.status = this.tick() as BTNodeStatus;\r\n        }\r\n        return this.status;\r\n    }\r\n\r\n    halt() {\r\n        this.yield = false;\r\n    }\r\n}\r\n", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNode } from \"../interfaces/IBTNode\";\r\nimport { BTAsyncActionNode } from \"./BTAsyncActionNode\";\r\n\r\n\r\nexport class BTSimpleActionNode extends BTAsyncActionNode {\r\n\r\n   protected tickFunctor: (node: IBTNode) => BTNodeStatus;\r\n\r\n   constructor(name: string, blackboard: BTBlackboard, tickFunctor: (node: IBTNode) => BTNodeStatus) {\r\n       super(name, blackboard);\r\n       this.tickFunctor = tickFunctor;\r\n   }\r\n   \r\n   tick(): BTNodeStatus {\r\n       let prevStatuc = this.status;\r\n       if (prevStatuc === BTNodeStatus.IDLE) {\r\n           this.status = BTNodeStatus.RUNNING;\r\n           prevStatuc = BTNodeStatus.RUNNING;\r\n       }\r\n       let status = this.tickFunctor(this);\r\n       if (status !== prevStatuc) {\r\n           this.status = status;\r\n       }\r\n       return status;\r\n   }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTActionNode } from \"./BTActionNode\";\r\n\r\n/**\r\n * \u72B6\u6001\u7C7B\u52A8\u4F5C\u8282\u70B9\r\n */\r\nexport abstract class BTStatefulActionNode extends BTActionNode {\r\n\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        const initial_status = this.status;\r\n        if (initial_status === BTNodeStatus.IDLE) {\r\n            const new_status = this.onEnter();\r\n            if (new_status === BTNodeStatus.IDLE) {\r\n                throw new Error('AsyncActionNode2::onStart() must not return IDLE');\r\n            }\r\n            if (new_status != BTNodeStatus.RUNNING) {\r\n                this.onExit();\r\n            }\r\n            return new_status;\r\n        }\r\n\r\n        if (initial_status === BTNodeStatus.RUNNING) {\r\n            const new_status = this.onTick();\r\n            if (new_status === BTNodeStatus.IDLE) {\r\n                throw new Error('AsyncActionNode2::onRunning() must not return IDLE');\r\n            }\r\n            if (new_status != BTNodeStatus.RUNNING) {\r\n                this.onExit();\r\n            }\r\n            return new_status;\r\n        }\r\n        return initial_status;\r\n    }\r\n\r\n\r\n\r\n    halt(): void {\r\n        if (this.status === BTNodeStatus.RUNNING) {\r\n            this.onHalted();\r\n        }\r\n        this.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    /**\u8FDB\u5165*/\r\n    abstract onEnter(): BTNodeStatus;\r\n\r\n    /**tick */\r\n    abstract onTick(): BTNodeStatus;\r\n\r\n    /**\u9000\u51FA */\r\n    abstract onExit(): void;\r\n\r\n    /**\u88AB\u6253\u65AD */\r\n    onHalted(): void {\r\n        this.onExit();\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTActionNode } from \"./BTActionNode\";\r\n\r\n\r\n/**\r\n* \u540C\u6B65\u52A8\u4F5C\u8282\u70B9\r\n*/\r\nexport abstract class BTSyncActionNode extends BTActionNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    // throws if the derived class return RUNNING.\r\n    public evaluate(): BTNodeStatus {\r\n        const stat = super.evaluate();\r\n        if (stat === BTNodeStatus.RUNNING) {\r\n            throw new Error('SyncActionNode MUST never return RUNNING');\r\n        }\r\n        return stat;\r\n    }\r\n\r\n    public halt() {\r\n        this.status = BTNodeStatus.IDLE;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNode } from \"../BTNode\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTNodeType } from \"../BTNodeType\";\r\n\r\n/**\r\n* \u6761\u4EF6\u8282\u70B9\r\n*/\r\nexport abstract class BTConditionNode extends BTNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    halt(): void {\r\n        this.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    get type(): BTNodeType {\r\n        return BTNodeType.CONDITION;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNode } from \"../interfaces/IBTNode\";\r\nimport { BTConditionNode } from \"./BTConditionNode\";\r\n\r\n\r\n\r\n\r\n/**\r\n* \u7B80\u5355\u6761\u4EF6\u8282\u70B9\r\n*/\r\nexport class BTSimpleConditionNode extends BTConditionNode {\r\n\r\n    protected tick_functor: (node: IBTNode) => BTNodeStatus;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard, tick_functor: (node: IBTNode) => BTNodeStatus) {\r\n        super(name, blackboard);\r\n        this.tick_functor = tick_functor;\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        return this.tick_functor(this);\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNode } from \"../BTNode\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTNodeType } from \"../BTNodeType\";\r\nimport { IBTControlNode } from \"../interfaces/IBTControlNode\";\r\nimport { IBTNode } from \"../interfaces/IBTNode\";\r\n\r\n\r\n/**\r\n * \u63A7\u5236\u8282\u70B9\r\n */\r\nexport abstract class BTControlNode extends BTNode implements IBTControlNode {\r\n\r\n    protected $children: IBTNode[] = [];\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.$children = [];\r\n    }\r\n\r\n    addChild(child: IBTNode) {\r\n        if (this.$children.indexOf(child) > -1) {\r\n            throw new Error(\"child already exists\");\r\n        }\r\n        this.$children.push(child);\r\n        child.parent = this;\r\n    }\r\n\r\n    getChild(idx: number): IBTNode {\r\n        if (idx < 0 || idx >= this.$children.length) {\r\n            throw new Error(\"index out of range\");\r\n        }\r\n        return this.$children[idx];\r\n    }\r\n\r\n    halt(): void {\r\n        this.haltChildren();\r\n        this.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    haltChild(idx: number): void {\r\n        if (idx < 0 || idx >= this.$children.length) {\r\n            throw new Error(\"index out of range\");\r\n        }\r\n        const child = this.$children[idx];\r\n        if (child.status === BTNodeStatus.RUNNING) {\r\n            child.halt();\r\n        }\r\n        child.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    haltChildren(start: number = 0): void {\r\n        for (let i = start; i < this.$children.length; ++i) {\r\n            this.haltChild(i);\r\n        }\r\n    }\r\n\r\n    destroy(): void {\r\n        this.haltChildren();\r\n        for (let i = 0; i < this.$children.length; ++i) {\r\n            const child = this.$children[i];\r\n            child.destroy();\r\n        }\r\n        super.destroy();\r\n    }\r\n\r\n    get numChildren(): number {\r\n        return this.$children.length;\r\n    }\r\n\r\n    get type(): BTNodeType {\r\n        return BTNodeType.CONTROL;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u5728\u52FE\u9009\u7B2C\u4E00\u4E2A\u5B50\u8282\u70B9\u4E4B\u524D\uFF0C\u8282\u70B9\u72B6\u6001\u53D8\u4E3ARUNNING\u3002\r\n * \u5982\u679C\u4E00\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u5219\u56DE\u9000\u6807\u8BB0\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\u3002\r\n * \u5982\u679C\u6700\u540E\u4E00\u4E2A\u5B50\u8FDB\u7A0B\u4E5F\u8FD4\u56DEFAILURE\uFF0C\u90A3\u4E48\u6240\u6709\u7684\u5B50\u8FDB\u7A0B\u90FD\u505C\u6B62\uFF0C\u56DE\u9000\u8FDB\u7A0B\u8FD4\u56DEFAILURE\u3002\r\n * \u5982\u679C\u5B50\u8FDB\u7A0B\u8FD4\u56DESUCCESS\uFF0C\u5219\u505C\u6B62\u5E76\u8FD4\u56DESUCCESS\u3002\u6240\u6709\u7684\u5B69\u5B50\u90FD\u505C\u4E0B\u6765\u4E86\u3002\r\n */\r\nexport class BTFallbackNode extends BTControlNode {\r\n\r\n    private __current_child_idx: number;\r\n    constructor(name: string,blackboard: BTBlackboard) {\r\n        super(name,blackboard);\r\n        this.__current_child_idx = 0;\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        const child_count = this.numChildren;\r\n        this.status = BTNodeStatus.RUNNING;\r\n        while (this.__current_child_idx < child_count) {\r\n            const child_node = this.$children[this.__current_child_idx];\r\n            const child_status = child_node.evaluate();\r\n\r\n            switch (child_status) {\r\n                case BTNodeStatus.RUNNING:\r\n                    return child_status\r\n                case BTNodeStatus.SUCCESS:\r\n                    this.haltChildren();\r\n                    this.__current_child_idx = 0;\r\n                    return child_status;\r\n                case BTNodeStatus.FAILURE:\r\n                    this.__current_child_idx++;\r\n                    break;\r\n                case BTNodeStatus.IDLE:\r\n                    throw new Error(\"NodeStatus.IDLE is not allowed in FallbackNode\");\r\n                default:\r\n                    throw new Error(\"Unknown NodeStatus\");\r\n            }\r\n        }\r\n        if (this.__current_child_idx == child_count) {\r\n            this.haltChildren();\r\n            this.__current_child_idx = 0;\r\n        }\r\n        return BTNodeStatus.FAILURE;\r\n    }\r\n\r\n    halt(): void {\r\n        this.__current_child_idx = 0;\r\n        super.halt();\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u67092\u62163\u4E2A\u5B50\u8282\u70B9\uFF0Cnode1\u5C31\u662Fif\u5224\u65AD\u7684\u6761\u4EF6\u3002\r\n * \u5982\u679Cnode1\u8FD4\u56DESUCCESS\uFF0C\u90A3\u4E48node2\u6267\u884C\uFF1B\r\n * \u5426\u5219\uFF0Cnode3\u6267\u884C\u3002\r\n * \u5982\u679C\u6CA1\u6709node3\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n * \u8BE5\u7ED3\u70B9not reactive\uFF0C\r\n * \u4F53\u73B0\u5728\u4E00\u65E6node1\u4E0D\u8FD4\u56DERUNNING\u4E86\uFF0C\u5C31\u8FDB\u5165\u4E86node2\u6216node3\u7684\u6267\u884C\uFF0C\u4EE5\u540Etick()\u4E0D\u4F1A\u518D\u6267\u884Cnode1\u4E86\uFF0C\u4E5F\u5373\u4E0D\u4F1A\u518D\u68C0\u67E5if\u6761\u4EF6\u7684\u53D8\u5316\u3002\r\n */\r\nexport class BTIfThenElseNode extends BTControlNode{\r\n\r\n    private __child_idx:number=0;\r\n\r\n    constructor(name:string,blackboard:BTBlackboard){\r\n        super(name,blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        if(this.numChildren!=2&&this.numChildren!=3){\r\n            throw new Error(this.name+\"IfThenElseNode:the number of children must be 2 or 3\")\r\n        }\r\n        this.status=BTNodeStatus.RUNNING;\r\n        if(this.__child_idx==0){\r\n            const condition_status=this.$children[0].evaluate();\r\n            if(condition_status==BTNodeStatus.RUNNING){\r\n                return condition_status;\r\n            }else if(condition_status==BTNodeStatus.SUCCESS){\r\n                this.__child_idx=1;\r\n            }else if(condition_status==BTNodeStatus.FAILURE){\r\n                if(this.numChildren==3){\r\n                    this.__child_idx=2;\r\n                }else{\r\n                    return condition_status;\r\n                }\r\n            }\r\n        }\r\n        if(this.__child_idx>0){\r\n            const child_status=this.$children[this.__child_idx].evaluate();\r\n            if(child_status==BTNodeStatus.RUNNING){\r\n                return BTNodeStatus.RUNNING;\r\n            }else{\r\n                this.haltChildren();\r\n                this.__child_idx=0;\r\n                return child_status;\r\n            }\r\n        }\r\n        throw new Error(this.name+\"Something unexpected happened in IfThenElseNode\")\r\n    }\r\n\r\n    halt():void{\r\n        this.__child_idx = 0;\r\n        super.halt();\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u5F53\u8FD4\u56DESUCCESS\u7684\u5B50\u8282\u70B9\u4E2A\u6570>=THRESHOLD_SUCCESS\u65F6\uFF0C\u8FD4\u56DESUCCESS\u3002\r\n * \u5F53\u8FD4\u56DEFAILURE\u7684\u5B50\u8282\u70B9\u4E2A\u6570>=THRESHOLD_FAILURE\u65F6\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n * \u5F53\u7A0B\u5E8F\u5224\u65AD\u7EDD\u4E0D\u53EF\u80FDSUCCESS\u65F6\uFF0C\u8FD4\u56DEFAILURE\u3002\u5982 failure_children_num > children_count - success_threshold_\u3002\r\n */\r\nexport class BTParallelNode extends BTControlNode {\r\n\r\n    private success_threshold: number = 0;\r\n    private failure_threshold: number = 1;\r\n    private __skip_list: Map<number,number>;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.__skip_list = new Map<number,number>();\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n        if (data.hasOwnProperty('success')) {\r\n            //@ts-ignore\r\n            this.success_threshold = data[\"success\"];\r\n        }\r\n        if (data.hasOwnProperty('failure')) {\r\n            //@ts-ignore\r\n            this.failure_threshold = data[\"failure\"];\r\n        }\r\n        this.success_threshold = Math.max(this.success_threshold, 0);\r\n        this.failure_threshold = Math.max(this.failure_threshold, 1);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        let success_childred_num = 0;\r\n        let failure_childred_num = 0;\r\n\r\n        const children_count = this.$children.length;\r\n\r\n        if (children_count < this.success_threshold) {\r\n            throw new Error('Number of children is less than threshold. Can never succeed.');\r\n        }\r\n\r\n        if (children_count < this.failure_threshold) {\r\n            throw new Error('Number of children is less than threshold. Can never fail.');\r\n        }\r\n\r\n        // Routing the tree according to the sequence node's logic:\r\n        for (let i = 0; i < children_count; i++) {\r\n            const child_node = this.$children[i];\r\n\r\n            const in_skip_list = this.__skip_list.has(i);\r\n\r\n            let child_status: BTNodeStatus;\r\n            if (in_skip_list) {\r\n                child_status = child_node.status;\r\n            } else {\r\n                child_status = child_node.evaluate();\r\n            }\r\n\r\n            switch (child_status) {\r\n                case BTNodeStatus.SUCCESS:\r\n                    {\r\n                        if (!in_skip_list) {\r\n                            this.__skip_list.set(i, i);\r\n                        }\r\n                        success_childred_num++;\r\n\r\n                        if (success_childred_num == this.success_threshold) {\r\n                            this.__skip_list.clear();\r\n                            this.haltChildren();\r\n                            return BTNodeStatus.SUCCESS;\r\n                        }\r\n                    }\r\n                    break;\r\n                case BTNodeStatus.FAILURE:\r\n                    {\r\n                        if (!in_skip_list) {\r\n                            this.__skip_list.set(i, i);\r\n                        }\r\n                        failure_childred_num++;\r\n\r\n                        // It fails if it is not possible to succeed anymore or if\r\n                        // number of failures are equal to failure_threshold_\r\n                        if (\r\n                            failure_childred_num > children_count - this.success_threshold ||\r\n                            failure_childred_num == this.failure_threshold\r\n                        ) {\r\n                            this.__skip_list.clear();\r\n                            this.haltChildren();\r\n                            return BTNodeStatus.FAILURE;\r\n                        }\r\n                    }\r\n                    break;\r\n                case BTNodeStatus.RUNNING:\r\n                    {\r\n                        // do nothing\r\n                    }\r\n                    break;\r\n                default: {\r\n                    throw new Error('A child node must never return IDLE');\r\n                }\r\n            }\r\n        }\r\n        return BTNodeStatus.RUNNING;\r\n    }\r\n\r\n    halt(): void {\r\n        this.__skip_list.clear();\r\n        super.halt();\r\n    }\r\n\r\n    destroy(): void {\r\n        this.__skip_list.clear();\r\n        super.destroy();\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n\r\n/**\r\n * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8FD4\u56DERUNNING\uFF0C\u4E14\u4E0B\u6B21tick()\u65F6\u4E4B\u524D\u7684\u5B50\u8282\u70B9\u4F1A\u518D\u6B21\u6267\u884C\uFF0Creactive\u6240\u5728\u3002\r\n * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\uFF0C\u4E14\u8FD4\u56DESUCCESS\u3002\r\n * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u7ACB\u5373\u6267\u884C\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\uFF08\u4E0D\u4F1A\u7B49\u4E0B\u4E00\u6B21tick()\uFF09\u3002\u5982\u679C\u6240\u6709\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n */\r\nexport class BTReactiveFallback extends BTControlNode {\r\n\r\n    constructor(name: string,blackboard: BTBlackboard) {\r\n        super(name,blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        let failure_count: number = 0;\r\n        for (let index = 0; index < this.numChildren; index++) {\r\n            const child = this.$children[index];\r\n            const child_status = child.evaluate();\r\n            switch (child_status) {\r\n                case BTNodeStatus.RUNNING:\r\n                    this.haltChildren(index + 1);\r\n                    return BTNodeStatus.RUNNING;\r\n                case BTNodeStatus.FAILURE:\r\n                    failure_count++;\r\n                    break;\r\n                case BTNodeStatus.SUCCESS:\r\n                    this.haltChildren();\r\n                    return BTNodeStatus.SUCCESS;\r\n                case BTNodeStatus.IDLE:\r\n                    throw new Error(\"ReactiveFallback: child node is idle\");\r\n                default:\r\n                    throw new Error(\"ReactiveFallback: unknown child node status\");\r\n            }\r\n        }\r\n        if (failure_count == this.numChildren) {\r\n            this.haltChildren();\r\n            return BTNodeStatus.FAILURE;\r\n        }\r\n        return BTNodeStatus.RUNNING;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u6309\u4ECE\u5DE6\u5230\u53F3\u7684\u987A\u5E8F\u4F9D\u6B21\u6267\u884C\u5B50\u8282\u70B9\u3002\r\n * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8FD4\u56DERUNNING\uFF0C\u4E14\u4E0B\u6B21tick()\u65F6\u4E4B\u524D\u7684\u5B50\u8282\u70B9\u4E0D\u4F1A\u518D\u6267\u884C\u3002\r\n * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u7ACB\u5373\u6267\u884C\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\uFF08\u4E0D\u4F1A\u7B49\u4E0B\u4E00\u6B21tick()\uFF09\u3002\r\n * \u5982\u679C\u6240\u6709\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u8FD4\u56DESUCCESS\u3002\r\n */\r\nexport class BTSequenceNode extends BTControlNode {\r\n\r\n    private __current_index: number = 0;\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    halt(): void {\r\n        this.__current_index = 0;\r\n        super.halt();\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n        while (this.__current_index < this.numChildren) {\r\n            const child = this.$children[this.__current_index];\r\n            const child_status = child.evaluate();\r\n            switch (child_status) {\r\n                case BTNodeStatus.RUNNING:\r\n                    return child_status;\r\n                case BTNodeStatus.FAILURE:\r\n                    this.haltChildren();\r\n                    this.__current_index = 0;\r\n                    return child_status;\r\n                case BTNodeStatus.SUCCESS:\r\n                    this.__current_index++;\r\n                    break;\r\n                case BTNodeStatus.IDLE:\r\n                    throw new Error(\"NodeStatus.IDLE is not a valid status\");\r\n                default:\r\n                    throw new Error(\"Unknown NodeStatus\");\r\n            }\r\n        }\r\n        if (this.__current_index === this.numChildren) {\r\n            this.haltChildren();\r\n            this.__current_index = 0;\r\n        }\r\n        return BTNodeStatus.SUCCESS;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u540CSequenceNode\uFF0C\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E\u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u8FD4\u56DEFAILURE\uFF0C\u7EC8\u6B62\u6240\u6709\u8282\u70B9\u7684\u6267\u884C\u3002\r\n * \u4F46\u4E0D\u590D\u4F4Dcurrent_child_idx_\u3002\u6240\u4EE5\u5F53\u518D\u6B21tick()\u65F6\uFF0C\u4ECEFAILURE\u7684\u5B50\u8282\u70B9\u5F00\u59CB\u3002\r\n */\r\nexport class BTSequenceStarNode extends BTControlNode{\r\n\r\n    private __current_index = 0;\r\n\r\n    constructor(name: string,blackboard: BTBlackboard) {\r\n        super(name,blackboard);\r\n    }\r\n    \r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n        while (this.__current_index < this.numChildren) {\r\n            const child = this.$children[this.__current_index];\r\n            const child_status = child.evaluate();\r\n            switch (child_status) {\r\n                case BTNodeStatus.RUNNING:\r\n                    return child_status;\r\n                case BTNodeStatus.FAILURE:\r\n                    this.haltChildren(this.__current_index);\r\n                    return child_status;\r\n                case BTNodeStatus.SUCCESS:\r\n                    this.__current_index++;\r\n                    break;\r\n                case BTNodeStatus.IDLE:\r\n                    throw new Error(\"NodeStatus.IDLE is not a valid status\");\r\n                default:\r\n                    throw new Error(\"Unknown NodeStatus\");\r\n            }\r\n        }\r\n        if (this.__current_index === this.numChildren) {\r\n            this.haltChildren();\r\n            this.__current_index = 0;\r\n        }\r\n        return BTNodeStatus.SUCCESS;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u662FIfThenElseNode\u7684reactive\u7248\u672C\u3002\r\n * reactive\u4F53\u73B0\u5728\u6BCF\u6B21tick()\u90FD\u4F1A\u6267\u884Cnode1\uFF0C\u5373\u68C0\u67E5if\u6761\u4EF6\u7684\u53D8\u5316\u3002\r\n * \u82E5node1\u8FD4\u56DE\u503C\u6709SUCCESS\u3001FAILURE\u7684\u5207\u6362\u53D8\u5316\uFF0C\u5C31\u4F1A\u6253\u65ADnode2\u6216node3\u7684\u6267\u884C\uFF0C\u91CD\u65B0\u9009\u62E9\u5BF9\u5E94\u7684node\u3002\r\n */\r\nexport class BTWhileDoElseNode extends BTControlNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n    \r\n    tick(): BTNodeStatus {\r\n        if (this.numChildren != 2 && this.numChildren != 3) {\r\n            throw new Error(this.name + \"IfThenElseNode:the number of children must be 2 or 3\")\r\n        }\r\n        this.status = BTNodeStatus.RUNNING;\r\n        // \u6BCF\u6B21tick()\u90FD\u4F1A\u5148\u6267\u884C\u7B2C1\u4E2A\u8282\u70B9\uFF0C\u5373\u5224\u65AD\u6761\u4EF6\uFF0Creactive\u4F53\u73B0\u5728\u6B64\uFF0C\u53CA\u65F6\u54CD\u5E94\u5916\u754C\u53D8\u5316\r\n        const condition_status = this.$children[0].evaluate();\r\n        if (condition_status == BTNodeStatus.RUNNING) {\r\n            return condition_status;\r\n        }\r\n        let status = BTNodeStatus.IDLE;\r\n        // \u6839\u636E\u7B2C1\u4E2A\u8282\u70B9\u7684\u8FD4\u56DE\u503C\uFF0C\u6267\u884C\u5BF9\u5E94\u8282\u70B9\uFF0C\u5E76\u7EC8\u6B62\u53E6\u5916\u7684\u8282\u70B9\r\n        if (condition_status == BTNodeStatus.SUCCESS) {\r\n            this.haltChild(2);\r\n            status = this.$children[1].evaluate();\r\n        } else if (condition_status == BTNodeStatus.FAILURE) {\r\n            this.haltChild(1);;\r\n            status = this.$children[2].evaluate();\r\n        }\r\n\r\n        if (status == BTNodeStatus.RUNNING) {\r\n            return BTNodeStatus.RUNNING;\r\n        } else {\r\n            this.haltChildren();\r\n            return status;\r\n        }\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNode } from \"../BTNode\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTNodeType } from \"../BTNodeType\";\r\nimport { IBTNode } from \"../interfaces/IBTNode\";\r\n\r\n\r\n/**\r\n * \u88C5\u9970\u8282\u70B9\r\n */\r\nexport abstract class BTDecoratorNode extends BTNode {\r\n\r\n    protected $child: IBTNode | null = null;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    /**\r\n     * \u8BBE\u7F6E\u5B50\u8282\u70B9\r\n     * @param child \r\n     */\r\n    setChild(child: IBTNode) {\r\n        if (this.$child != null) {\r\n            throw new Error(\"Child already set\");\r\n        }\r\n        this.$child = child;\r\n    }\r\n\r\n    getChild(): IBTNode | null {\r\n        return this.$child;\r\n    }\r\n\r\n    halt(): void {\r\n        this.haltChild();\r\n        this.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    haltChild(): void {\r\n        if (!this.$child) {\r\n            return;\r\n        }\r\n        if (this.$child.status == BTNodeStatus.RUNNING) {\r\n            this.$child.halt();\r\n        }\r\n        this.$child.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n        if (this.$child) {\r\n            if (this.$child.status == BTNodeStatus.RUNNING) {\r\n                this.$child.halt();\r\n            }\r\n            this.$child.destroy();\r\n            this.$child = null;\r\n        }\r\n    }\r\n\r\n    get type(): BTNodeType {\r\n        return BTNodeType.DECORATOR;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5EF6\u8FDF\u6307\u5B9A\u65F6\u95F4\u540E\u6267\u884C\u5B50\u8282\u70B9\r\n */\r\nexport class BTDelayNode extends BTDecoratorNode {\r\n\r\n    private delay_started: boolean;\r\n    private delay_complete: boolean;\r\n    private delay_aborted: boolean;\r\n    /**\u5B9A\u65F6\u5668\u53E5\u67C4*/\r\n    public time_handler: number | undefined = undefined;\r\n    /**\u5EF6\u8FDF\u65F6\u95F4 */\r\n    private delayTime: number = 0;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.delay_started = false;\r\n        this.delay_aborted = false;\r\n        this.delay_complete = false;\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n        if (data.hasOwnProperty('delayTime')) {\r\n            // @ts-ignore\r\n            this.delayTime = data['delayTime'] || 0;\r\n        }\r\n        this.delayTime = Math.max(this.delayTime, 0);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        if (!this.delay_started) {\r\n            this.delay_complete = false;\r\n            this.delay_aborted = false;\r\n            this.delay_started = true;\r\n            this.status = BTNodeStatus.RUNNING;\r\n            this.time_handler = setTimeout(this.__timeOut.bind(this), this.delayTime);\r\n        }\r\n\r\n        if (this.delay_aborted) {\r\n            this.delay_aborted = false;\r\n            this.delay_started = false;\r\n            return BTNodeStatus.FAILURE;\r\n        } else if (this.delay_complete) {\r\n            this.delay_started = false;\r\n            this.delay_aborted = false;\r\n            const child_status = this.getChild()!.evaluate();\r\n            return child_status;\r\n        } else {\r\n            return BTNodeStatus.RUNNING;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5EF6\u8FDF\u7ED3\u675F\r\n     */\r\n    private __timeOut(): void {\r\n        this.delay_complete = true;\r\n        this.time_handler = undefined;\r\n    }\r\n\r\n    halt(): void {\r\n        this.delay_started = false;\r\n        if (this.time_handler != undefined) {\r\n            clearTimeout(this.time_handler!);\r\n            this.time_handler = undefined;\r\n            this.delay_aborted = true;\r\n        }\r\n        super.halt();\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\u5426\u5219\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u5373\u5F3A\u5236\u8FD4\u56DE\u5931\u8D25\u72B6\u6001\u3002\r\n */\r\nexport class BTForceFailureNode extends BTDecoratorNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n\r\n        const child_state = this.getChild()!.evaluate();\r\n\r\n        switch (child_state) {\r\n            case BTNodeStatus.FAILURE:\r\n            case BTNodeStatus.SUCCESS: {\r\n                return BTNodeStatus.FAILURE;\r\n            }\r\n            case BTNodeStatus.RUNNING: {\r\n                return BTNodeStatus.RUNNING;\r\n            }\r\n        }\r\n        return this.status;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\u5426\u5219\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u5373\u5F3A\u5236\u8FD4\u56DE\u6210\u529F\u72B6\u6001\u3002\r\n */\r\nexport class BTForceSuccessNode extends BTDecoratorNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n\r\n        const child_state = this.getChild()!.evaluate();\r\n\r\n        switch (child_state) {\r\n            case BTNodeStatus.FAILURE:\r\n            case BTNodeStatus.SUCCESS: {\r\n                return BTNodeStatus.SUCCESS;\r\n            }\r\n            case BTNodeStatus.RUNNING: {\r\n                return BTNodeStatus.RUNNING;\r\n            }\r\n        }\r\n        return this.status;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n\r\n/**\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DESUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DEFAILURE\uFF1B\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF1B\r\n * \u5373\u5BF9\u5B50\u8282\u70B9\u7684\u6267\u884C\u7ED3\u679C\u53D6\u53CD\u3002\r\n */\r\nexport class BTInverterNode extends BTDecoratorNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n\r\n        const child_state = this.getChild()!.evaluate();\r\n\r\n        switch (child_state) {\r\n            case BTNodeStatus.SUCCESS: {\r\n                return BTNodeStatus.FAILURE;\r\n            }\r\n            case BTNodeStatus.FAILURE: {\r\n                return BTNodeStatus.SUCCESS;\r\n            }\r\n            case BTNodeStatus.RUNNING: {\r\n                return BTNodeStatus.RUNNING;\r\n            }\r\n            default: {\r\n                throw new Error('A child node must never return IDLE');\r\n            }\r\n        }\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\u6216SUCCESS\uFF0C\u4E0B\u6B21tick()\u7EE7\u7EED\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u76F4\u5230\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\u3002\r\n */\r\nexport class BTKeepRunningUntilFailureNode extends BTDecoratorNode {\r\n\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n\r\n        const child_state = this.getChild()!.evaluate();\r\n\r\n        switch (child_state) {\r\n            case BTNodeStatus.FAILURE: {\r\n                return BTNodeStatus.FAILURE;\r\n            }\r\n            case BTNodeStatus.SUCCESS:\r\n            case BTNodeStatus.RUNNING: {\r\n                return BTNodeStatus.RUNNING;\r\n            }\r\n        }\r\n        return this.status;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n\r\n/**\r\n * \u91CD\u590D\u6267\u884C\u5B50\u8282\u70B9NUM_CYCLES \u6B21\uFF0C\u82E5\u6BCF\u6B21\u90FD\u8FD4\u56DE SUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF1B\r\n * \u82E5\u5B50\u8282\u70B9\u67D0\u6B21\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u4E0D\u518D\u91CD\u590D\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u7ACB\u5373\u8FD4\u56DEFAILURE\uFF1B\r\n * \u82E5\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u4E5F\u8FD4\u56DERUNNING\u3002\r\n */\r\nexport class BTRepeatNode extends BTDecoratorNode {\r\n    private num_cycles: number = -1;\r\n    private try_index: number;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.try_index = 0;\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n        if (data.hasOwnProperty('num')) {\r\n            // @ts-ignore\r\n            this.num_cycles = data['num'] || 1;\r\n        }\r\n        this.num_cycles = isNaN(this.num_cycles) ? -1 : this.num_cycles;\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n\r\n        while (this.try_index < this.num_cycles || this.num_cycles == -1) {\r\n            const child_state = this.getChild()!.evaluate();\r\n\r\n            switch (child_state) {\r\n                case BTNodeStatus.SUCCESS:\r\n                    this.try_index++;\r\n                    this.haltChild();\r\n                    break;\r\n                case BTNodeStatus.FAILURE:\r\n                    this.try_index = 0;\r\n                    this.haltChild();\r\n                    return BTNodeStatus.FAILURE;\r\n\r\n                case BTNodeStatus.RUNNING:\r\n                    return BTNodeStatus.RUNNING;\r\n\r\n                default:\r\n                    throw new Error('A child node must never return IDLE');\r\n            }\r\n        }\r\n        this.try_index = 0;\r\n        return BTNodeStatus.SUCCESS;\r\n    }\r\n\r\n    halt() {\r\n        this.try_index = 0;\r\n        super.halt();\r\n    }\r\n}\r\n", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DESUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\uFF1B\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u518D\u6B21\u5C1D\u8BD5\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u76F4\u5230\u5C1D\u8BD5\u4E86num_attempts\u6B21\uFF1B\r\n */\r\nexport class BTRetryNode extends BTDecoratorNode {\r\n\r\n    private max_attempts_: number = 1;\r\n\r\n    private try_index: number;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.try_index = 0;\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n        if (data.hasOwnProperty('num')) {\r\n            // @ts-ignore\r\n            this.max_attempts_ = data['num'];\r\n        }\r\n    }\r\n\r\n    halt() {\r\n        this.try_index = 0;\r\n        super.halt();\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n        while (this.try_index < this.max_attempts_ || this.max_attempts_ == -1) {\r\n            const child_state = this.getChild()!.evaluate();\r\n            switch (child_state) {\r\n                case BTNodeStatus.SUCCESS: {\r\n                    this.try_index = 0;\r\n                    this.haltChild();\r\n                    return BTNodeStatus.SUCCESS;\r\n                }\r\n                case BTNodeStatus.FAILURE:\r\n                    this.try_index++;\r\n                    this.haltChild();\r\n                    break;\r\n                case BTNodeStatus.RUNNING:\r\n                    return BTNodeStatus.RUNNING;\r\n                default:\r\n                    throw new Error('A child node must never return IDLE');\r\n            }\r\n        }\r\n\r\n        this.try_index = 0;\r\n        return BTNodeStatus.FAILURE;\r\n    }\r\n}\r\n", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5728\u8BBE\u7F6E\u7684msec \u6BEB\u79D2\u5185\uFF0C\u8FD4\u56DE\u5B50\u8282\u70B9\u6267\u884C\u7684\u72B6\u6001\u3002\r\n * \u82E5\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\u6216SUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\u3002\r\n * \u5982\u679C\u8D85\u65F6\uFF0C\u7EC8\u6B62\u5B50\u8282\u70B9\u6267\u884C\uFF0C\u5E76\u8FD4\u56DEFAILURE\u3002\r\n */\r\nexport class BTTimeOutNode extends BTDecoratorNode {\r\n\r\n    private timerHandler: number | undefined;\r\n    private child_halted: boolean;\r\n    private msec: number = 0;\r\n    private timeout_started: boolean;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.child_halted = false;\r\n        this.timeout_started = false;\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n        if (data.hasOwnProperty('msec')) {\r\n            // @ts-ignore\r\n            this.msec = data['msec'];\r\n        }\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        if (!this.timeout_started) {\r\n            this.timeout_started = true;\r\n            this.status = BTNodeStatus.RUNNING;\r\n            this.child_halted = false;\r\n\r\n            if (this.msec > 0) {\r\n                this.timerHandler = setTimeout(() => {\r\n                    if (this.getChild()!.status == BTNodeStatus.RUNNING) {\r\n                        this.child_halted = true;\r\n                        this.haltChild();\r\n                    }\r\n                }, this.msec);\r\n            }\r\n        }\r\n\r\n        if (this.child_halted) {\r\n            this.timeout_started = false;\r\n            return BTNodeStatus.FAILURE;\r\n        } else {\r\n            const child_status = this.getChild()!.evaluate();\r\n            if (child_status != BTNodeStatus.RUNNING) {\r\n                this.timeout_started = false;\r\n                if (this.timerHandler) {\r\n                    clearTimeout(this.timerHandler);\r\n                    this.timerHandler = undefined;\r\n                }\r\n            }\r\n            return child_status;\r\n        }\r\n    }\r\n}\r\n", "import { BTNodeStatus } from \"./BTNodeStatus\";\r\nimport { BTNodeType } from \"./BTNodeType\";\r\nimport { BTControlNode } from \"./controls/BTControlNode\";\r\nimport { BTDecoratorNode } from \"./decorators/BTDecoratorNode\";\r\nimport { IBTNode } from \"./interfaces/IBTNode\";\r\n\r\n\r\n\r\n\r\n/**\r\n * \u884C\u4E3A\u6811\r\n */\r\nexport class BTUtils {\r\n\r\n\r\n    /**\r\n     * \u9012\u5F52\u904D\u5386\u884C\u4E3A\u6811\u8282\u70B9\uFF0C\u5E76\u5BF9\u6BCF\u4E2A\u8282\u70B9\u6267\u884C\u6307\u5B9A\u51FD\u6570\u3002\r\n     *\r\n     * @param root \u884C\u4E3A\u6811\u6839\u8282\u70B9\u3002\r\n     * @param visitor \u8BBF\u95EE\u51FD\u6570\uFF0C\u7528\u4E8E\u5904\u7406\u6BCF\u4E2A\u8282\u70B9\u3002\r\n     * @throws \u5F53\u6839\u8282\u70B9\u4E3Anull\u65F6\uFF0C\u629B\u51FA\u5F02\u5E38\u3002\r\n     */\r\n    static applyRecursiveVisitor<T>(root: IBTNode, visitor: (node: IBTNode) => void) {\r\n        if (!root) throw new Error(\"root is null\");\r\n        visitor(root);\r\n        if (root.type == BTNodeType.CONTROL) {\r\n            const controlNode = root as BTControlNode;\r\n            for (let index = 0; index < controlNode.numChildren; index++) {\r\n                const child = controlNode.getChild(index);\r\n                this.applyRecursiveVisitor(child, visitor);\r\n            }\r\n        } else if (root.type == BTNodeType.DECORATOR) {\r\n            const decoratorNode = root as BTDecoratorNode;\r\n            this.applyRecursiveVisitor(decoratorNode.getChild()!, visitor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u9012\u5F52\u6253\u5370\u6811\u5F62\u7ED3\u6784\r\n     *\r\n     * @param root \u6811\u7684\u6839\u8282\u70B9\r\n     * @returns \u8FD4\u56DE\u6811\u7684\u5B57\u7B26\u4E32\u8868\u793A\r\n     */\r\n    static printTreeRecursively<T>(root: IBTNode): string {\r\n        if (!root) return \"\";\r\n        const endl = '\\n';\r\n        let stream = '';\r\n        let recursivePrint = (indent: number, node: IBTNode) => {\r\n            for (let i = 0; i < indent; i++) {\r\n                stream += '   ';\r\n            }\r\n            if (!node) {\r\n                stream += '!null!' + endl;\r\n                return;\r\n            }\r\n            let status = '';\r\n            switch (node.status) {\r\n                case BTNodeStatus.FAILURE:\r\n                    status = 'failure';\r\n                    break;\r\n                case BTNodeStatus.RUNNING:\r\n                    status = 'running';\r\n                    break;\r\n                case BTNodeStatus.SUCCESS:\r\n                    status = 'success';\r\n                    break;\r\n            }\r\n            stream += \"[\" + status + \"]\" + node.name + endl\r\n            indent++;\r\n\r\n            if (node.type == BTNodeType.CONTROL) {\r\n                const controlNode = node as BTControlNode;\r\n                for (let index = 0; index < controlNode.numChildren; index++) {\r\n                    const child = controlNode.getChild(index);\r\n                    recursivePrint(indent, child);\r\n                }\r\n            } else if (node.type == BTNodeType.DECORATOR) {\r\n                const decoratorNode = node as BTDecoratorNode;\r\n                recursivePrint(indent, decoratorNode.getChild()!);\r\n            }\r\n        };\r\n\r\n        stream += '----------------' + endl;\r\n        recursivePrint(0, root);\r\n        stream += '----------------' + endl;\r\n        return stream;\r\n    }\r\n}", "\r\n\r\n/**\r\n * \u8282\u70B9KEY\r\n */\r\nexport enum BTNodeKeys {\r\n   //----------------------\u63A7\u5236\u8282\u70B9-----------------------\r\n   /**\r\n    * \u6309\u4ECE\u5DE6\u5230\u53F3\u7684\u987A\u5E8F\u4F9D\u6B21\u6267\u884C\u5B50\u8282\u70B9\u3002\r\n    * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8FD4\u56DERUNNING\uFF0C\u4E14\u4E0B\u6B21tick()\u65F6\u4E4B\u524D\u7684\u5B50\u8282\u70B9\u4E0D\u4F1A\u518D\u6267\u884C\u3002\r\n    * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u7ACB\u5373\u6267\u884C\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\uFF08\u4E0D\u4F1A\u7B49\u4E0B\u4E00\u6B21tick()\uFF09\u3002\r\n    * \u5982\u679C\u6240\u6709\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u8FD4\u56DESUCCESS\u3002\r\n    */\r\n   SEQUENCE = \"sequence\",\r\n   /**\r\n    * \u5C1D\u8BD5\u4F9D\u6B21\u6267\u884C\u5176\u6240\u6709\u5B50\u8282\u70B9\uFF0C\u5E76\u4E14\u6BCF\u4E2A\u5B50\u8282\u70B9\u53EA\u6709\u5728\u6210\u529F\u6267\u884C\u540E\u624D\u4F1A\u7EE7\u7EED\u5230\u4E0B\u4E00\u4E2A\u3002\r\n    * \u5982\u679C\u4EFB\u4F55\u4E00\u4E2A\u5B50\u8282\u70B9\u5931\u8D25\uFF0C\u6574\u4E2A\u5E8F\u5217\u5931\u8D25\u3002\r\n    */\r\n   ReactiveSequence = \"reactiveSequence\",\r\n   /** \u540CSequenceNode\uFF0C\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E\u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u8FD4\u56DEFAILURE\uFF0C\u7EC8\u6B62\u6240\u6709\u8282\u70B9\u7684\u6267\u884C\u3002\r\n   * \u4F46\u4E0D\u590D\u4F4Dcurrent_child_idx_\u3002\u6240\u4EE5\u5F53\u518D\u6B21tick()\u65F6\uFF0C\u4ECEFAILURE\u7684\u5B50\u8282\u70B9\u5F00\u59CB\u3002 */\r\n   SequenceStar = \"sequenceStar\",\r\n   /**\r\n    * \u5F53\u8FD4\u56DESUCCESS\u7684\u5B50\u8282\u70B9\u4E2A\u6570>=THRESHOLD_SUCCESS\u65F6\uFF0C\u8FD4\u56DESUCCESS\u3002\r\n    * \u5F53\u8FD4\u56DEFAILURE\u7684\u5B50\u8282\u70B9\u4E2A\u6570>=THRESHOLD_FAILURE\u65F6\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n    * \u5F53\u7A0B\u5E8F\u5224\u65AD\u7EDD\u4E0D\u53EF\u80FDSUCCESS\u65F6\uFF0C\u8FD4\u56DEFAILURE\u3002\u5982 failure_children_num > children_count - success_threshold_\u3002\r\n    */\r\n   PARALLEL = \"parallel\",\r\n   /**\r\n   * \u5728\u52FE\u9009\u7B2C\u4E00\u4E2A\u5B50\u8282\u70B9\u4E4B\u524D\uFF0C\u8282\u70B9\u72B6\u6001\u53D8\u4E3ARUNNING\u3002\r\n   * \u5982\u679C\u4E00\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u5219\u56DE\u9000\u6807\u8BB0\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\u3002\r\n   * \u5982\u679C\u6700\u540E\u4E00\u4E2A\u5B50\u8FDB\u7A0B\u4E5F\u8FD4\u56DEFAILURE\uFF0C\u90A3\u4E48\u6240\u6709\u7684\u5B50\u8FDB\u7A0B\u90FD\u505C\u6B62\uFF0C\u56DE\u9000\u8FDB\u7A0B\u8FD4\u56DEFAILURE\u3002\r\n   * \u5982\u679C\u5B50\u8FDB\u7A0B\u8FD4\u56DESUCCESS\uFF0C\u5219\u505C\u6B62\u5E76\u8FD4\u56DESUCCESS\u3002\u6240\u6709\u7684\u5B69\u5B50\u90FD\u505C\u4E0B\u6765\u4E86\u3002\r\n   */\r\n   FALLBACK = \"fallback\",\r\n   /**\r\n   * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8FD4\u56DERUNNING\uFF0C\u4E14\u4E0B\u6B21tick()\u65F6\u4E4B\u524D\u7684\u5B50\u8282\u70B9\u4F1A\u518D\u6B21\u6267\u884C\uFF0Creactive\u6240\u5728\u3002\r\n   * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\uFF0C\u4E14\u8FD4\u56DESUCCESS\u3002\r\n   * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u7ACB\u5373\u6267\u884C\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\uFF08\u4E0D\u4F1A\u7B49\u4E0B\u4E00\u6B21tick()\uFF09\u3002\u5982\u679C\u6240\u6709\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n   */\r\n   ReactiveFallback = \"reactiveFallback\",\r\n   /**\r\n   * \u67092\u62163\u4E2A\u5B50\u8282\u70B9\uFF0Cnode1\u5C31\u662Fif\u5224\u65AD\u7684\u6761\u4EF6\u3002\r\n   * \u5982\u679Cnode1\u8FD4\u56DESUCCESS\uFF0C\u90A3\u4E48node2\u6267\u884C\uFF1B\r\n   * \u5426\u5219\uFF0Cnode3\u6267\u884C\u3002\r\n   * \u5982\u679C\u6CA1\u6709node3\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n   * \u8BE5\u7ED3\u70B9not reactive\uFF0C\r\n   * \u4F53\u73B0\u5728\u4E00\u65E6node1\u4E0D\u8FD4\u56DERUNNING\u4E86\uFF0C\u5C31\u8FDB\u5165\u4E86node2\u6216node3\u7684\u6267\u884C\uFF0C\u4EE5\u540Etick()\u4E0D\u4F1A\u518D\u6267\u884Cnode1\u4E86\uFF0C\u4E5F\u5373\u4E0D\u4F1A\u518D\u68C0\u67E5if\u6761\u4EF6\u7684\u53D8\u5316\u3002\r\n   */\r\n   IfThenElseNode = \"ifThenElse\",\r\n   /**\r\n   * \u662FIfThenElseNode\u7684reactive\u7248\u672C\u3002\r\n   * reactive\u4F53\u73B0\u5728\u6BCF\u6B21tick()\u90FD\u4F1A\u6267\u884Cnode1\uFF0C\u5373\u68C0\u67E5if\u6761\u4EF6\u7684\u53D8\u5316\u3002\r\n   * \u82E5node1\u8FD4\u56DE\u503C\u6709SUCCESS\u3001FAILURE\u7684\u5207\u6362\u53D8\u5316\uFF0C\u5C31\u4F1A\u6253\u65ADnode2\u6216node3\u7684\u6267\u884C\uFF0C\u91CD\u65B0\u9009\u62E9\u5BF9\u5E94\u7684node\u3002\r\n   */\r\n   WhileDoElseNode = \"whileDoElse\",\r\n   //----------------------\u88C5\u9970\u8282\u70B9-----------------------\r\n\r\n   /**\r\n    * \u5EF6\u8FDF\u6307\u5B9A\u65F6\u95F4\u540E\u6267\u884C\u5B50\u8282\u70B9\r\n    */\r\n   Delay = \"delay\",\r\n   /**\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\u5426\u5219\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u5373\u5F3A\u5236\u8FD4\u56DE\u5931\u8D25\u72B6\u6001\u3002\r\n   */\r\n   ForceFailure = \"forceFailure\",\r\n   /**\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\u5426\u5219\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u5373\u5F3A\u5236\u8FD4\u56DE\u6210\u529F\u72B6\u6001\u3002\r\n   */\r\n   ForceSuccess = \"forceSuccess\",\r\n   /**\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DESUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DEFAILURE\uFF1B\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF1B\r\n   * \u5373\u5BF9\u5B50\u8282\u70B9\u7684\u6267\u884C\u7ED3\u679C\u53D6\u53CD\u3002\r\n   */\r\n   Inverter = \"inverter\",\r\n   /**\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\u6216SUCCESS\uFF0C\u4E0B\u6B21tick()\u7EE7\u7EED\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u76F4\u5230\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\u3002\r\n   */\r\n   KeepRunningUntilFailure = \"keepRunningUntilFailure\",\r\n   /**\r\n   * \u91CD\u590D\u6267\u884C\u5B50\u8282\u70B9NUM_CYCLES \u6B21\uFF0C\u82E5\u6BCF\u6B21\u90FD\u8FD4\u56DE SUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF1B\r\n   * \u82E5\u5B50\u8282\u70B9\u67D0\u6B21\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u4E0D\u518D\u91CD\u590D\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u7ACB\u5373\u8FD4\u56DEFAILURE\uFF1B\r\n   * \u82E5\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u4E5F\u8FD4\u56DERUNNING\u3002\r\n   */\r\n   Repeat = \"repeat\",\r\n   /**\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DESUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\uFF1B\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u518D\u6B21\u5C1D\u8BD5\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u76F4\u5230\u5C1D\u8BD5\u4E86num_attempts\u6B21\uFF1B\r\n   */\r\n   Retry = \"retry\",\r\n   /**\r\n   * \u5728\u8BBE\u7F6E\u7684msec \u6BEB\u79D2\u5185\uFF0C\u8FD4\u56DE\u5B50\u8282\u70B9\u6267\u884C\u7684\u72B6\u6001\u3002\r\n   * \u82E5\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\u6216SUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\u3002\r\n   * \u5982\u679C\u8D85\u65F6\uFF0C\u7EC8\u6B62\u5B50\u8282\u70B9\u6267\u884C\uFF0C\u5E76\u8FD4\u56DEFAILURE\u3002\r\n   */\r\n   TimeOut = \"timeout\",\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u5C1D\u8BD5\u4F9D\u6B21\u6267\u884C\u5176\u6240\u6709\u5B50\u8282\u70B9\uFF0C\u5E76\u4E14\u6BCF\u4E2A\u5B50\u8282\u70B9\u53EA\u6709\u5728\u6210\u529F\u6267\u884C\u540E\u624D\u4F1A\u7EE7\u7EED\u5230\u4E0B\u4E00\u4E2A\u3002\r\n * \u5982\u679C\u4EFB\u4F55\u4E00\u4E2A\u5B50\u8282\u70B9\u5931\u8D25\uFF0C\u6574\u4E2A\u5E8F\u5217\u5931\u8D25\u3002\r\n */\r\nexport class BTReactiveSequence extends BTControlNode {\r\n\r\n    constructor(name: string,blackboard: BTBlackboard) {\r\n        super(name,blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        let success_count = 0;\r\n        let running_count = 0;\r\n\r\n        for (let index = 0; index < this.numChildren; index++) {\r\n            const child_node = this.$children[index];\r\n            const child_status = child_node.evaluate();\r\n            switch (child_status) {\r\n                case BTNodeStatus.RUNNING:\r\n                    running_count++;\r\n                    this.haltChildren(index + 1);\r\n                    return BTNodeStatus.RUNNING;\r\n                case BTNodeStatus.FAILURE:\r\n                    this.haltChildren();\r\n                    return BTNodeStatus.FAILURE;\r\n                case BTNodeStatus.SUCCESS:\r\n                    success_count++;\r\n                    break;\r\n                case BTNodeStatus.IDLE:\r\n                    throw new Error(\"ReactiveSequence: child node is idle\");\r\n                default:\r\n                    throw new Error(\"ReactiveSequence: child node status is invalid\");\r\n            }\r\n        }\r\n        if (success_count == this.numChildren) {\r\n            this.haltChildren();\r\n            return BTNodeStatus.SUCCESS;\r\n        }\r\n        return BTNodeStatus.RUNNING;\r\n    }\r\n}", "import { BTNodeKeys } from \"./BTNodeKeys\";\r\nimport { BTNodeType } from \"./BTNodeType\";\r\nimport { BTControlNode } from \"./controls/BTControlNode\";\r\nimport { BTFallbackNode } from \"./controls/BTFallbackNode\";\r\nimport { BTIfThenElseNode } from \"./controls/BTIfThenElseNode\";\r\nimport { BTParallelNode } from \"./controls/BTParallelNode\";\r\nimport { BTReactiveFallback } from \"./controls/BTReactiveFallback\";\r\nimport { BTReactiveSequence } from \"./controls/BTReactiveSequence\";\r\nimport { BTSequenceNode } from \"./controls/BTSequenceNode\";\r\nimport { BTSequenceStarNode } from \"./controls/BTSequenceStarNode\";\r\nimport { BTWhileDoElseNode } from \"./controls/BTWhileDoElseNode\";\r\nimport { BTDecoratorNode } from \"./decorators/BTDecoratorNode\";\r\nimport { BTDelayNode } from \"./decorators/BTDelayNode\";\r\nimport { BTForceFailureNode } from \"./decorators/BTForceFailureNode\";\r\nimport { BTForceSuccessNode } from \"./decorators/BTForceSuccessNode\";\r\nimport { BTInverterNode } from \"./decorators/BTInverterNode\";\r\nimport { BTKeepRunningUntilFailureNode } from \"./decorators/BTKeepRunningUntilFailureNode\";\r\nimport { BTRepeatNode } from \"./decorators/BTRepeatNode\";\r\nimport { BTRetryNode } from \"./decorators/BTRetryNode\";\r\nimport { BTTimeOutNode } from \"./decorators/BTTimeOutNode\";\r\nimport { IBTNode } from \"./interfaces/IBTNode\";\r\nimport { IBTNodeConfig } from \"./interfaces/IBTNodeConfig\";\r\n\r\n\r\n\r\nexport class BTContext {\r\n\r\n    private class_map = new Map<string, new (name: string, blackboard: any) => IBTNode>();\r\n\r\n    constructor() {\r\n        this.$init();\r\n    }\r\n\r\n\r\n    protected $init(): void {\r\n        //controls\r\n        this.register(BTNodeKeys.SEQUENCE, BTSequenceNode);\r\n        this.register(BTNodeKeys.ReactiveSequence, BTReactiveSequence);\r\n        this.register(BTNodeKeys.SequenceStar, BTSequenceStarNode);\r\n        this.register(BTNodeKeys.IfThenElseNode, BTIfThenElseNode);\r\n        this.register(BTNodeKeys.WhileDoElseNode, BTWhileDoElseNode);\r\n\r\n        this.register(BTNodeKeys.PARALLEL, BTParallelNode);\r\n        this.register(BTNodeKeys.FALLBACK, BTFallbackNode);\r\n        this.register(BTNodeKeys.ReactiveFallback, BTReactiveFallback);\r\n\r\n        this.register(BTNodeKeys.Delay, BTDelayNode);\r\n        this.register(BTNodeKeys.ForceFailure, BTForceFailureNode);\r\n        this.register(BTNodeKeys.ForceSuccess, BTForceSuccessNode);\r\n        this.register(BTNodeKeys.KeepRunningUntilFailure, BTKeepRunningUntilFailureNode);\r\n        this.register(BTNodeKeys.Inverter, BTInverterNode);\r\n        this.register(BTNodeKeys.Repeat, BTRepeatNode);\r\n        this.register(BTNodeKeys.Retry, BTRetryNode);\r\n        this.register(BTNodeKeys.TimeOut, BTTimeOutNode);\r\n    }\r\n\r\n    /**\r\n     * \u6CE8\u518C\u8282\u70B9\u7C7B\r\n     * @param name \r\n     * @param clazz \r\n     */\r\n    register(name: string, clazz: new (name: string, blackboard: any) => IBTNode): void {\r\n        this.class_map.set(name.toLocaleLowerCase(), clazz);\r\n    }\r\n\r\n    /**\r\n     * \u6CE8\u9500\u8282\u70B9\u7C7B\r\n     * @param name \r\n     */\r\n    unregister(name: string): void {\r\n        this.class_map.delete(name.toLocaleLowerCase());\r\n    }\r\n\r\n    /**\r\n     * \u521B\u5EFA\u8282\u70B9\r\n     * @param data \r\n     * @returns \r\n     */\r\n    createNode<T>(data: IBTNodeConfig, blackboard: any): IBTNode {\r\n        const clazz = this.class_map.get(data.type.toLocaleLowerCase());\r\n        if (!clazz) {\r\n            throw new Error(`${data.name, data.type}\u8282\u70B9\u4E0D\u5B58\u5728`);\r\n        }\r\n        let result = new clazz(data.name, blackboard);\r\n        result.init(data);\r\n        const isControl = result.type == BTNodeType.CONTROL;\r\n        const isDecorator = result.type == BTNodeType.DECORATOR;\r\n        if (data.children) {\r\n            for (let index = 0; index < data.children.length; index++) {\r\n                const child_data = data.children[index];\r\n                if (isControl) {\r\n                    const control = result as BTControlNode;\r\n                    control.addChild(this.createNode(child_data, blackboard));\r\n                }\r\n                if (isDecorator) {\r\n                    const decorator = result as BTDecoratorNode;\r\n                    if (index > 0) {\r\n                        throw new Error(\"\u88C5\u9970\u8282\u70B9\u53EA\u80FD\u6709\u4E00\u4E2A\u5B50\u8282\u70B9=>\" + data);\r\n                    }\r\n                    decorator.setChild(this.createNode(child_data, blackboard));\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * \u6E05\u7406\r\n     */\r\n    clear(): void {\r\n        this.class_map.clear();\r\n    }\r\n\r\n    destroy(): void {\r\n        this.clear();\r\n    }\r\n}", "import { EventDispatcher } from \"dream-cc-core\";\r\n\r\n\r\n\r\n/**\r\n * \u884C\u4E3A\u6811\u9ED1\u677F\r\n */\r\nexport class BTBlackboard extends EventDispatcher {\r\n\r\n    private __datas: Map<any, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.__datas = new Map<any, any>();\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u6570\u636E\r\n     * @param key \r\n     * @returns \r\n     */\r\n    get<T>(key: any): T {\r\n        return this.__datas.get(key) as T;\r\n    }\r\n\r\n    /**\r\n     * \u5224\u65AD\u662F\u5426\u5B58\u5728\u6570\u636E\r\n     * @param key \r\n     */\r\n    has(key: any): boolean {\r\n        return this.__datas.has(key);\r\n    }\r\n\r\n    /**\r\n     * \u8BBE\u7F6E\u6570\u636E\r\n     * @param key \r\n     * @param value \r\n     */\r\n    set(key: any, value: any): void {\r\n        this.__datas.set(key, value);\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u6570\u636E\r\n     */\r\n    delete(key: any): void {\r\n        this.__datas.delete(key);\r\n    }\r\n\r\n    /**\r\n     * \u6E05\u7406\u6570\u636E\r\n     */\r\n    clear(): void {\r\n        this.__datas.clear();\r\n    }\r\n\r\n    /**\r\n     * \u9500\u6BC1\r\n     * @returns \r\n     */\r\n    destroy(): boolean {\r\n        this.clear();\r\n        this.__datas = null;\r\n        return true;\r\n    }\r\n}", "import { ECSComponent } from \"dream-cc-ecs\";\r\nimport { BTContext } from \"../BTContext\";\r\nimport { IBTNode } from \"../interfaces/IBTNode\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\n\r\n\r\n/**\r\n * \u884C\u4E3A\u6811\u7EC4\u4EF6\r\n */\r\nexport class BehaviorTreeComponent extends ECSComponent {\r\n    /**\r\n     * \u5E27\u95F4\u9694\r\n     */\r\n    frameInterval: number = 50;\r\n\r\n    lastTime: number = 0;\r\n\r\n    debug: boolean = false;\r\n    /**\r\n     * \u884C\u4E3A\u6811\u7684\u4E0A\u4E0B\u6587\r\n     */\r\n    context: BTContext;\r\n    /**\u884C\u4E3A\u6811\u6839\u8282\u70B9 */\r\n    root: IBTNode;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316\r\n     * @param context \r\n     */\r\n    init(context: BTContext, data?: IBTNodeConfig, blackboard?: any) {\r\n        this.context = context;\r\n        if (data) {\r\n            this.setData(data, blackboard);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u8BBE\u7F6E\r\n     * @param data \r\n     * @param blackboard \r\n     */\r\n    setData(data: IBTNodeConfig, blackboard: any): void {\r\n        let old = this.root;\r\n        let bb = blackboard ? blackboard : old.blackboard;\r\n        this.root = this.context.createNode(data, bb);\r\n        //\u6E05\u7406\u8001\u7684\r\n        if (old) {\r\n            old.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u9ED1\u677F\r\n     */\r\n    get blackboard(): any {\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n        return this.root.blackboard;\r\n    }\r\n\r\n    reset(): void {\r\n        if (this.root) {\r\n            this.root.destroy();\r\n            this.root = null;\r\n        }\r\n    }\r\n\r\n    destroy(): boolean {\r\n        let result = super.destroy();\r\n        if (this.root) {\r\n            this.root.destroy();\r\n            this.root = null;\r\n        }\r\n        this.context = null;\r\n        return result;\r\n    }\r\n}", "import { ECSEntity, ECSSystem, MatcherAllOf } from \"dream-cc-ecs\";\r\nimport { BehaviorTreeComponent } from \"./BehaviorTreeComponent\";\r\nimport { Timer } from \"dream-cc-core\";\r\nimport { BTUtils } from \"../BTUtils\";\r\n\r\n\r\n/**\r\n * \u884C\u4E3A\u6811\u7CFB\u7EDF\r\n */\r\nexport class BehaviorTreeSystem extends ECSSystem {\r\n\r\n    constructor() {\r\n        super(new MatcherAllOf([\r\n            BehaviorTreeComponent\r\n        ]));\r\n    }\r\n\r\n    protected $tick(entitys: Set<ECSEntity>, dt: number): void {\r\n        let currentTime = Timer.currentTime;\r\n        for (let entity of entitys) {\r\n            let tree = this.world.getComponent(entity, BehaviorTreeComponent);\r\n            if (!tree) return;\r\n            if (currentTime - tree.lastTime < tree.frameInterval) {\r\n                return;\r\n            }\r\n            tree.lastTime = currentTime;\r\n            if (tree && tree.root) {\r\n                tree.root.evaluate();\r\n                if (tree.debug) {\r\n                    let log = BTUtils.printTreeRecursively(tree.root);\r\n                    console.log(log);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "import { ECSComponent } from \"dream-cc-ecs\";\r\nimport { FSM } from \"../FSM\";\r\n\r\n\r\n\r\n\r\n\r\nexport class FSMComponent extends ECSComponent {\r\n\r\n    /**\r\n     * \u72B6\u6001\u673A\r\n     */\r\n    fsm: FSM;\r\n\r\n    constructor() {\r\n        super();\r\n        this.fsm = new FSM(this, \"FSMComponent\");\r\n    }\r\n    \r\n    destroy(): boolean {\r\n        if (super.destroy()) {\r\n            this.fsm.destroy();\r\n            this.fsm = null;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}", "import { Event, EventDispatcher, Logger } from \"dream-cc-core\";\r\nimport { IState } from \"./IState\";\r\n\r\n\r\n/**\r\n * \u72B6\u6001\u673A\r\n */\r\nexport class FSM extends EventDispatcher {\r\n\r\n\r\n    /**\u6240\u5C5E*/\r\n    owner: any;\r\n    debug: boolean;\r\n\r\n    private __current: IState;\r\n    private __state: number;\r\n    private __states: Map<number, IState>;\r\n    private __name: string\r\n    constructor(owner: any, name: string) {\r\n        super();\r\n        this.owner = owner;\r\n        this.__name = name;\r\n        this.__states = new Map<number, IState>();\r\n    }\r\n\r\n    tick(dt: number): void {\r\n        if (this.__current) {\r\n            this.__current.tick(dt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u6DFB\u52A0\r\n     * @param key \r\n     * @param v \r\n     */\r\n    addState(key: number, v: IState): void {\r\n        this.__states.set(key, v);\r\n        v.init(this);\r\n    }\r\n\r\n    /**\r\n     * \u5207\u6362\u72B6\u6001\r\n     * @param value \r\n     * @param data \r\n     * @returns \r\n     */\r\n    switchState(value: number, data?: any): void {\r\n        if (this.__state == value) {\r\n            return;\r\n        }\r\n        let oldKey = this.__state;\r\n        let old: IState = this.__current;\r\n        if (old) {\r\n            if (this.debug) {\r\n                Logger.log(this.__name + \" \u6240\u5C5E:\" + this.owner.name + \" \u9000\u51FA\u72B6\u6001==>\" + this.__current.name, \"FSM\");\r\n            }\r\n            old.exit();\r\n        }\r\n        this.__current = null;\r\n        if (!this.__states.has(value)) {\r\n            throw new Error(\"\u72B6\u6001\u673A:\" + this.__name + \" \u6240\u5C5E:\" + this.owner.name + \"\u672A\u627E\u5230\u72B6\u6001==>\" + value);\r\n        }\r\n        this.__state = value;\r\n        this.__current = this.__states.get(value);\r\n        if (this.debug) {\r\n            Logger.log(this.__name + \" \u6240\u5C5E:\" + this.owner.name + \" \u8FDB\u5165\u72B6\u6001==>\" + this.__current.name, \"FSM\");\r\n        }\r\n        this.__current.enter(data);\r\n        this.emit(Event.STATE_CHANGED, oldKey);\r\n    }\r\n\r\n    get state(): number {\r\n        return this.__state;\r\n    }\r\n\r\n    get current(): IState {\r\n        return this.__current;\r\n    }\r\n\r\n    destroy(): boolean {\r\n        if (super.destroy()) {\r\n            if (this.__current) {\r\n                this.__current.exit();\r\n            }\r\n            this.__states.forEach(element => {\r\n                element.destroy();\r\n            });\r\n            this.__states.clear();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n", "import { ECSEntity, ECSSystem, MatcherAllOf } from \"dream-cc-ecs\";\r\nimport { FSMComponent } from \"./FSMComponent\";\r\n\r\n\r\nexport class FSMSystem extends ECSSystem {\r\n\r\n\r\n    constructor() {\r\n        super(\r\n            new MatcherAllOf(\r\n                [\r\n                    FSMComponent\r\n                ]\r\n            )\r\n        );\r\n    }\r\n\r\n    protected $tick(entitys: Set<ECSEntity>, dt: number): void {\r\n        for (let entity of entitys) {\r\n            let fsm = this.world.getComponent(entity, FSMComponent)!;\r\n            fsm.fsm.tick(dt);\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["BTNodeStatus", "BTNodeType", "BTNodeKeys", "ECSComponent", "EventDispatcher", "ECSComponent", "ECSSystem", "MatcherAllOf", "ECSSystem", "MatcherAllOf"]
}
