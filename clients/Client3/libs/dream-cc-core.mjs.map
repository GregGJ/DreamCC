{
  "version": 3,
  "sources": ["../src/pools/PoolImpl.ts", "../src/pools/Pool.ts", "../src/events/Event.ts", "../src/utils/Injector.ts", "../src/ticker/TickerManagerImpl.ts", "../src/ticker/TickerManager.ts", "../src/events/EventListener.ts", "../src/events/EventDispatcher.ts"],
  "sourcesContent": ["import { IDestroyable } from \"../interfaces/IDestroyable\";\r\nimport { IPoolable } from \"./IPoolable\";\r\n\r\n\r\n/**\r\n * \u5BF9\u8C61\u6C60\u5B9E\u73B0\r\n */\r\nexport class PoolImpl<T extends IPoolable> implements IDestroyable {\r\n\r\n    /**\u5BF9\u8C61\u7C7B\u578B */\r\n    private __class: new () => T;\r\n    /**\u6B63\u5728\u4F7F\u7528\u7684\u5BF9\u8C61\u5217\u8868 */\r\n    private __using: Set<T>;\r\n    /**\u7A7A\u95F2\u5BF9\u8C61\u5217\u8868 */\r\n    private __free: Set<T>;\r\n    /**\u6700\u5927\u5BF9\u8C61\u6570 */\r\n    private __max: number = 0;\r\n\r\n    constructor(classType: new () => T, max: number = 1000, min: number = 0) {\r\n        this.__class = classType;\r\n        this.__max = max;\r\n        this.__using = new Set<T>();\r\n        this.__free = new Set<T>();\r\n        // \u521D\u59CB\u5316\u5BF9\u8C61\u6C60\u5230\u6700\u5C0F\u5BB9\u91CF\r\n        for (let i = 0; i < min; i++) {\r\n            this.__free.add(new this.__class());\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * \u9500\u6BC1\u5BF9\u8C61\u6C60\u4E2D\u7684\u6240\u6709\u5BF9\u8C61\u5E76\u91CA\u653E\u8D44\u6E90\r\n     *\r\n     * @returns \u8FD4\u56DE\u4E00\u4E2A\u5E03\u5C14\u503C\uFF0C\u8868\u793A\u9500\u6BC1\u64CD\u4F5C\u662F\u5426\u6210\u529F\r\n     */\r\n    destroy(): boolean {\r\n        // \u91CA\u653E\u6240\u6709\u5BF9\u8C61\u5230\u5BF9\u8C61\u6C60\u4E2D\r\n        this.releaseAll();\r\n        for (const element of this.__free) {\r\n            element.destroy();\r\n        }\r\n        this.__free.clear();\r\n        this.__using.clear();\r\n        return true;\r\n    }\r\n\r\n    \r\n    /**\r\n     * \u4ECE\u5BF9\u8C61\u6C60\u4E2D\u83B7\u53D6\u4E00\u4E2A\u5BF9\u8C61\u3002\r\n     *\r\n     * @returns \u8FD4\u56DE\u83B7\u53D6\u5230\u7684\u5BF9\u8C61\u3002\r\n     * @throws \u5F53\u5BF9\u8C61\u6C60\u5DF2\u6EE1\u65F6\uFF0C\u629B\u51FA\u9519\u8BEF\u3002\r\n     */\r\n    acquire(): T {\r\n        let item: T;\r\n        if (this.__free.size > 0) {\r\n            // \u4ECE __free \u4E2D\u53D6\u51FA\u4E00\u4E2A\u5BF9\u8C61\r\n            const iterator = this.__free.values();\r\n            item = iterator.next().value!;\r\n            this.__free.delete(item);\r\n        } else {\r\n            if (this.size >= this.__max) {\r\n                throw new Error(\"\u5BF9\u8C61\u6C60\u5DF2\u6EE1\");\r\n            }\r\n            item = new this.__class();\r\n        }\r\n        this.__using.add(item);\r\n        return item;\r\n    }\r\n\r\n    \r\n    /**\r\n     * \u91CA\u653E\u5BF9\u8C61\r\n     *\r\n     * @param item \u8981\u91CA\u653E\u7684\u5BF9\u8C61\r\n     */\r\n    release(item: T): void {\r\n        item.reset(); // \u91CD\u7F6E\u5BF9\u8C61\u72B6\u6001\r\n        this.__using.delete(item);\r\n        this.__free.add(item);\r\n    }\r\n\r\n    \r\n    /**\r\n     * \u91CA\u653E\u6240\u6709\u6B63\u5728\u4F7F\u7528\u7684\u8D44\u6E90\r\n     */\r\n    releaseAll(): void {\r\n        if (this.__using.size === 0) {\r\n            return;\r\n        }\r\n        this.__using.forEach(item => {\r\n            this.release(item);\r\n        });\r\n        this.__using.clear();\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u5F53\u524D\u6B63\u5728\u4F7F\u7528\u7684\u6570\u91CF\r\n     */\r\n    get usingCount(): number {\r\n        return this.__using.size;\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u7A7A\u95F2\u8BA1\u6570\u5668\u7684\u503C\r\n     */\r\n    get freeCount(): number {\r\n        return this.__free.size;\r\n    }\r\n\r\n    /**\r\n     * \u5BF9\u8C61\u6C60\u5F53\u524D\u7684\u5927\u5C0F\uFF08\u5DF2\u521B\u5EFA\u5BF9\u8C61\u7684\u6570\u91CF\uFF09\r\n     */\r\n    get size(): number {\r\n        return this.freeCount + this.usingCount;\r\n    }\r\n}", "import { IPoolable } from \"./IPoolable\";\r\nimport { PoolImpl } from \"./PoolImpl\";\r\n\r\n\r\n\r\n\r\nexport class Pool {\r\n\r\n    /**\r\n     * \u5BF9\u8C61\u6C60\u7684\u96C6\u5408\r\n     */\r\n    private static pools = new Map<new () => IPoolable, PoolImpl<IPoolable>>()\r\n\r\n    /**\r\n     * \u4ECE\u5BF9\u8C61\u6C60\u4E2D\u83B7\u53D6\u4E00\u4E2A\u5B9E\u4F8B\r\n     *\r\n     * @param clazz \u7C7B\u7684\u6784\u9020\u51FD\u6570\uFF0C\u8BE5\u7C7B\u9700\u8981\u5B9E\u73B0 IPoolable \u63A5\u53E3\r\n     * @returns \u8FD4\u56DE\u4ECE\u5BF9\u8C61\u6C60\u4E2D\u83B7\u53D6\u7684\u5B9E\u4F8B\r\n     */\r\n    static acquire<T extends IPoolable>(clazz: new () => T): T {\r\n        let pool = this.pools.get(clazz);\r\n        if (!pool) {\r\n\r\n            this.pools.set(clazz, new PoolImpl(clazz, 1000, 0))\r\n            return this.acquire(clazz);\r\n        }\r\n        return pool.acquire() as T;\r\n    }\r\n\r\n\r\n    /**\r\n     * \u91CA\u653E\u5BF9\u8C61\u5230\u6307\u5B9A\u7C7B\u578B\u7684\u5BF9\u8C61\u6C60\u4E2D\r\n     *\r\n     * @param clazz \u5BF9\u8C61\u7C7B\u578B\uFF0C\u5FC5\u987B\u5B9E\u73B0 IPoolable \u63A5\u53E3\r\n     * @param item \u8981\u91CA\u653E\u7684\u5BF9\u8C61\r\n     * @throws \u5982\u679C\u5BF9\u8C61\u6C60\u4E0D\u5B58\u5728\uFF0C\u5219\u629B\u51FA\u9519\u8BEF\r\n     */\r\n    static release<T extends IPoolable>(clazz: new () => T, item: T): void {\r\n        let pool = this.pools.get(clazz);\r\n        if (pool) {\r\n            pool.release(item);\r\n        } else {\r\n            throw new Error(\"\u5BF9\u8C61\u6C60\u4E0D\u5B58\u5728\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u91CA\u653E\u6307\u5B9A\u7C7B\u7684\u6240\u6709\u5BF9\u8C61\r\n     *\r\n     * @param clazz \u7C7B\u6784\u9020\u51FD\u6570\uFF0C\u9700\u8981\u5B9E\u73B0 IPoolable \u63A5\u53E3\r\n     * @throws Error \u5982\u679C\u5BF9\u8C61\u6C60\u4E0D\u5B58\u5728\uFF0C\u5219\u629B\u51FA\u9519\u8BEF\r\n     */\r\n    static releaseAll<T extends IPoolable>(clazz: new () => T): void {\r\n        let pool = this.pools.get(clazz);\r\n        if (pool) {\r\n            pool.releaseAll();\r\n        } else {\r\n            throw new Error(\"\u5BF9\u8C61\u6C60\u4E0D\u5B58\u5728\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \u9500\u6BC1\u6307\u5B9A\u7C7B\u7684\u5BF9\u8C61\u6C60\r\n     *\r\n     * @param clazz \u9700\u8981\u9500\u6BC1\u5BF9\u8C61\u6C60\u7684\u7C7B\r\n     * @throws Error \u5982\u679C\u5BF9\u8C61\u6C60\u4E0D\u5B58\u5728\uFF0C\u5219\u629B\u51FA\u9519\u8BEF\r\n     */\r\n    static destroy<T extends IPoolable>(clazz: new () => T): void {\r\n        let pool = this.pools.get(clazz);\r\n        if (pool) {\r\n            pool.destroy();\r\n            this.pools.delete(clazz);\r\n        } else {\r\n            throw new Error(\"\u5BF9\u8C61\u6C60\u4E0D\u5B58\u5728\");\r\n        }\r\n    }\r\n\r\n    static logStatus(): void {\r\n        console.log(\"\u5404\u5BF9\u8C61\u6C60\u7684\u72B6\u6001\uFF1A\");\r\n        this.pools.forEach((pool, clazz) => {\r\n            console.log(`\u7C7B\u540D: ${clazz.name}`);\r\n            console.log(`  \u5DF2\u4F7F\u7528\u5BF9\u8C61\u6570\u91CF: ${pool.usingCount}`);\r\n            console.log(`  \u7A7A\u95F2\u5BF9\u8C61\u6570\u91CF: ${pool.freeCount}`);\r\n        });\r\n    }\r\n}", "import { IPoolable } from \"../pools/IPoolable\";\r\nimport { Pool } from \"../pools/Pool\";\r\nimport { ResURL } from \"../res/ResURL\";\r\nimport { EventType } from \"./EventType\";\r\n\r\n\r\n/**\r\n * \u4E8B\u4EF6\u5BF9\u8C61\r\n */\r\nexport class Event implements IPoolable {\r\n\r\n    static readonly START: string = \"START\";\r\n    static readonly PROGRESS: string = \"PROGRESS\";\r\n    static readonly COMPLETE: string = \"COMPLETE\";\r\n    static readonly ERROR: string = \"ERROR\";\r\n\r\n    static readonly SHOW: string = \"SHOW\";\r\n    static readonly HIDE: string = \"HIDE\";\r\n    static readonly ADD: string = \"ADD\";\r\n    static readonly REMOVE: string = \"REMOVE\";\r\n    static readonly UPDATE: string = \"UPDATE\";\r\n    static readonly CLEAR: string = \"CLEAR\";\r\n    static readonly STATE_CHANGED: string = \"STATE_CHANGED\";\r\n    static readonly VALUE_CHANGED: string = \"VALUE_CHANGED\";\r\n    static readonly ADD_CHILD: string = \"ADD_CHILD\";\r\n    static readonly REMOVE_CHILD: string = \"REMOVE_CHILD\";\r\n    static readonly CHILD_VALUE_CHANGED: string = \"CHILD_VALUE_CHANGED\";\r\n    \r\n    /**\r\n     * \u4E8B\u4EF6\u7C7B\u578B\r\n     */\r\n    type?: EventType;\r\n    /**\r\n     * \u4E8B\u4EF6\u6570\u636E\r\n     */\r\n    data?: any;\r\n    /**\r\n     * \u8D44\u6E90\u5730\u5740\r\n     */\r\n    url?: ResURL;\r\n    /**\r\n     * \u9519\u8BEF\u4FE1\u606F\r\n     */\r\n    err?: Error;\r\n    /**\r\n     * \u8FDB\u5165\u767E\u5206\u6BD4(0-1)\r\n     */\r\n    progress?: number;\r\n    /**\r\n     * \u4E8B\u4EF6\u662F\u5426\u505C\u6B62\r\n     */\r\n    propagationStopped: boolean = false;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316\r\n     * @param type \r\n     * @param data \r\n     * @param err \r\n     * @param progress \r\n     * @param url \r\n     */\r\n    init(type: EventType, data?: any, err?: Error, progress?: number, url?: ResURL): void {\r\n        this.type = type;\r\n        this.data = data;\r\n        this.err = err;\r\n        this.url = url;\r\n        this.progress = progress;\r\n    }\r\n\r\n    reset(): void {\r\n        this.type = undefined;\r\n        this.data = null;\r\n        this.err = undefined;\r\n        this.url = undefined;\r\n        this.progress = 0;\r\n    }\r\n\r\n    destroy(): boolean {\r\n        this.reset();\r\n        return true;\r\n    }\r\n\r\n    release(): void {\r\n        Pool.release(Event, this);\r\n    }\r\n    \r\n    /**\r\n     * \u521B\u5EFA\u4E8B\u4EF6\u5BF9\u8C61\r\n     * @param type\r\n     * @param data \r\n     * @param err \r\n     * @param url \r\n     * @param progress \r\n     * @returns \r\n     */\r\n    static create(type: EventType, data?: any, err?: Error, progress?: number, url?: ResURL): Event {\r\n        let result = Pool.acquire(Event);\r\n        result.init(type, data, err, progress, url);\r\n        return result;\r\n    }\r\n}", "/**\r\n * \u7B80\u6613\u6CE8\u5165\u5668\r\n */\r\nexport class Injector {\r\n\r\n    /**\u7C7B\u578B\u5B57\u5178*/\r\n    private static __injectedMap: Map<string, any> = new Map<string, any>();\r\n    /**\u5B9E\u4F8B\u5B57\u5178*/\r\n    private static __instanceMap: Map<string, any> = new Map<string, any>();\r\n\r\n    /**\r\n     * \u6CE8\u5165\r\n     * @param key \r\n     * @param clazz   \u7C7B\u578B\u6216\u5B9E\u4F8B\r\n     */\r\n    static inject(customKey: string, clazz: any): void {\r\n        if (clazz instanceof Function) {\r\n            this.__injectedMap.set(customKey, clazz);\r\n        } else {\r\n            this.__instanceMap.set(customKey, clazz);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u5DF2\u6CE8\u5165\u7684\u7C7B\u578B\u5B9E\u4F8B\r\n     */\r\n    static getInject(customKey: string): any | null {\r\n        let instance: any = this.__instanceMap.get(customKey);\r\n        if (instance) {\r\n            return instance;\r\n        }\r\n        let clazz: any | undefined = this.__injectedMap.get(customKey);\r\n        if (clazz === undefined) {\r\n            return null;\r\n        }\r\n        instance = new clazz();\r\n        this.__instanceMap.set(customKey, instance);\r\n        return instance;\r\n    }\r\n}", "\r\n\r\n\r\nimport { ITicker } from \"./ITicker\";\r\nimport { ITickerManager } from \"./ITickerManager\";\r\n\r\n\r\nexport class TickerManagerImpl implements ITickerManager {\r\n\r\n    private __tickerList: Array<ITicker> = []\r\n\r\n    private __nextFrameCallBacks: Array<NextFrameHandler> = [];\r\n\r\n    tick(dt: number): void {\r\n        let handler: NextFrameHandler;\r\n        while (this.__nextFrameCallBacks.length) {\r\n            handler = this.__nextFrameCallBacks.shift()!;\r\n            handler.callBack.apply(handler.caller);\r\n        }\r\n        for (let index = 0; index < this.__tickerList.length; index++) {\r\n            const element = this.__tickerList[index];\r\n            element.tick(dt);\r\n        }\r\n    }\r\n\r\n    addTicker(value: ITicker): void {\r\n        let index: number = this.__tickerList.indexOf(value);\r\n        if (index >= 0) {\r\n            throw new Error(\"Ticker \u91CD\u590D\u6DFB\u52A0\uFF01\");\r\n        }\r\n        this.__tickerList.push(value);\r\n    }\r\n\r\n    removeTicker(value: ITicker): void {\r\n        let index: number = this.__tickerList.indexOf(value);\r\n        if (index < 0) {\r\n            throw new Error(\"\u627E\u4E0D\u5230\u8981\u5220\u9664\u7684Tick!\");\r\n        }\r\n        this.__tickerList.splice(index, 1);\r\n    }\r\n\r\n    callNextFrame(value: Function, caller: any): void {\r\n        for (let index = 0; index < this.__nextFrameCallBacks.length; index++) {\r\n            const element = this.__nextFrameCallBacks[index];\r\n            //\u91CD\u590D\r\n            if (element.equal(value, caller)) {\r\n                return;\r\n            }\r\n        }\r\n        this.__nextFrameCallBacks.push(new NextFrameHandler(value, caller));\r\n    }\r\n\r\n    clearNextFrame(value: Function, caller: any): void {\r\n        for (let index = 0; index < this.__nextFrameCallBacks.length; index++) {\r\n            const element = this.__nextFrameCallBacks[index];\r\n            //\u5220\u9664\r\n            if (element.equal(value, caller)) {\r\n                this.__nextFrameCallBacks.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass NextFrameHandler {\r\n    callBack: Function;\r\n    caller: any;\r\n\r\n    constructor(callBack: Function, caller: any) {\r\n        this.callBack = callBack;\r\n        this.caller = caller;\r\n    }\r\n\r\n    equal(callBack: Function, caller: any): boolean {\r\n        if (this.caller !== caller) {\r\n            return false;\r\n        }\r\n        if (this.callBack !== callBack) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}", "import { Injector } from \"../utils/Injector\";\r\nimport { ITicker } from \"./ITicker\";\r\nimport { ITickerManager } from \"./ITickerManager\";\r\nimport { TickerManagerImpl } from \"./TickerManagerImpl\";\r\n\r\n\r\n\r\n/**\r\n * \u5FC3\u8DF3\u9A71\u52A8\u5668\u5B9E\u73B0\r\n */\r\nexport class TickerManager {\r\n\r\n    static KEY: string = \"TickerManager\";\r\n\r\n    /**\r\n     * \u5FC3\u8DF3\u9A71\u52A8\u63A5\u53E3\r\n     * @param dt \r\n     */\r\n    static tick(dt: number): void {\r\n        this.impl.tick(dt);\r\n    }\r\n\r\n    /**\r\n     * \u6DFB\u52A0\u4E00\u4E2A\u5FC3\u8DF3\u9A71\u52A8\r\n     * @param value \r\n     */\r\n    static addTicker(value: ITicker): void {\r\n        this.addTicker(value);\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u4E00\u4E2A\u5FC3\u8DF3\u9A71\u52A8\r\n     * @param value \r\n     */\r\n    static removeTicker(value: ITicker): void {\r\n        this.removeTicker(value);\r\n    }\r\n\r\n    /**\r\n     * \u4E0B\u4E00\u5E27\u56DE\u8C03\r\n     * @param value \r\n     * @param caller \r\n     */\r\n    static callNextFrame(value: Function, caller: any): void {\r\n        this.callNextFrame(value, caller);\r\n    }\r\n\r\n    /**\r\n     * \u6E05\u7406\u4E0B\u4E00\u5E27\u56DE\u8C03\u8BF7\u6C42(\u5982\u679C\u5B58\u5728\u7684\u8BDD)\r\n     * @param value\r\n     * @param value \r\n     * @param caller \r\n     */\r\n    static clearNextFrame(value: Function, caller: any): void {\r\n        this.clearNextFrame(value, caller);\r\n    }\r\n\r\n    private static __impl: ITickerManager;\r\n    static get impl(): ITickerManager {\r\n        if (this.__impl == null) {\r\n            this.__impl = Injector.getInject(this.KEY);\r\n        }\r\n        if (this.__impl == null) {\r\n            this.__impl = new TickerManagerImpl();\r\n        }\r\n        return this.__impl;\r\n    }\r\n}", "import { IPoolable } from \"../pools/IPoolable\";\r\nimport { Event } from \"./Event\";\r\nimport { EventType } from \"./EventType\";\r\n\r\n\r\n\r\n/**\r\n * \u76D1\u542C\u8005\r\n */\r\nexport class EventListener implements IPoolable {\r\n    /**\r\n     * \u4E8B\u4EF6\u7C7B\u578B\r\n     */\r\n    type?: EventType;\r\n    /**\r\n     * \u4E8B\u4EF6\u56DE\u8C03\u51FD\u6570this\u6307\u9488\r\n     */\r\n    caller: any | null;\r\n    /**\r\n     * \u4E8B\u4EF6\u7684\u56DE\u8C03\u51FD\u6570\r\n     */\r\n    handler?: (e: Event) => void;\r\n    /**\r\n     * \u4E8B\u4EF6\u4F18\u5148\u7EA7\uFF0C\u9ED8\u8BA4\u4E3A255\r\n     */\r\n    priority: number = 255;\r\n\r\n    constructor(type: EventType, caller: any, handler: (e: Event) => void, priority: number = 255) {\r\n        this.type = type;\r\n        this.caller = caller;\r\n        this.handler = handler;\r\n        this.priority = priority;\r\n    }\r\n\r\n    reset(): void {\r\n        this.type = undefined;\r\n        this.caller = undefined;\r\n        this.handler = undefined;\r\n        this.priority = 255;\r\n    }\r\n    \r\n    destroy(): boolean {\r\n        this.reset();\r\n        return true;\r\n    }\r\n\r\n    equal(target: EventListener): boolean {\r\n        if (this.type === target.type && this.caller === target.caller && this.handler === target.handler) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    equals(type: EventType, handler: (e: Event) => void, caller: any): boolean {\r\n        if (this.type === type && this.handler === handler && this.caller === caller) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}", "import { ResURL } from \"../res/ResURL\";\r\nimport { TickerManager } from \"../ticker/TickerManager\";\r\nimport { Event } from \"./Event\";\r\nimport { EventListener } from \"./EventListener\";\r\nimport { EventType } from \"./EventType\";\r\nimport { IEventDispatcher } from \"./IEventDispatcher\";\r\n\r\n\r\n\r\n/**\r\n * \u4E8B\u4EF6\u6D3E\u53D1\u5668\r\n */\r\nexport class EventDispatcher implements IEventDispatcher {\r\n\r\n    /**\r\n     * \u5168\u5C40\u4E8B\u4EF6\u6D3E\u53D1\u8D77\r\n     */\r\n    static Main: EventDispatcher = new EventDispatcher();\r\n\r\n    /**\r\n     * \u4E8B\u4EF6\u662F\u5426\u5F02\u6B65\u5904\u7406\r\n     */\r\n    eventAync: boolean = false;\r\n\r\n    /**\r\n     * \u9700\u8981\u6D3E\u53D1\u7684\u4E8B\u4EF6\r\n     */\r\n    private __needEmit: Array<Event> = [];\r\n\r\n    private __listeners: Map<EventType, Array<EventListener>>;\r\n    private __callers: Map<any, Array<EventListener>>;\r\n\r\n    constructor() {\r\n        this.__listeners = new Map<EventType, Array<EventListener>>();\r\n        this.__callers = new Map<any, Array<EventListener>>();\r\n    }\r\n\r\n    /**\r\n     * \u6DFB\u52A0\u4E8B\u4EF6\u76D1\u542C\r\n     * @param type      \u4E8B\u4EF6\u7C7B\u578B\r\n     * @param handler   \u4E8B\u4EF6\u56DE\u8C03\u51FD\u6570\r\n     * @param caller    \u56DE\u8C03\u51FD\u6570this\u6307\u9488\r\n     * @param priority  \u4F18\u5148\u7EA7\r\n     */\r\n    on(type: EventType, handler: (e: Event) => void, caller?: any, priority?: number): void {\r\n        let listeners = this.__listeners.get(type);\r\n        if (!listeners) {\r\n            listeners = [];\r\n            this.__listeners.set(type, listeners);\r\n        }\r\n        //\u68C0\u6D4B\u662F\u5426\u91CD\u590D\r\n        for (const element of listeners) {\r\n            if (element.equals(type, handler, caller)) {\r\n                throw new Error(`\u91CD\u590D\u6DFB\u52A0\u4E8B\u4EF6\u76D1\u542C\uFF1A${type} ${handler} ${caller}`);\r\n            }\r\n        }\r\n        //\u6DFB\u52A0\u4E8B\u4EF6\u76D1\u542C\r\n        const listener = new EventListener(type, handler, caller, priority);\r\n        listeners.push(listener);\r\n        listeners.sort((a, b) => a.priority - b.priority);\r\n        //\u6DFB\u52A0\u5230caller\u5206\u7EC4\r\n        let callerListeners = this.__callers.get(caller);\r\n        if (!callerListeners) {\r\n            callerListeners = [];\r\n            this.__callers.set(caller, callerListeners);\r\n        }\r\n        callerListeners.push(listener);\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u4E8B\u4EF6\u76D1\u542C\r\n     * @param type      \u4E8B\u4EF6\u7C7B\u578B\r\n     * @param handler   \u4E8B\u4EF6\u56DE\u8C03\u51FD\u6570\r\n     * @param caller    \u56DE\u8C03\u51FD\u6570this\u6307\u9488\r\n     * @returns \r\n     */\r\n    off(type: EventType, handler: (e: Event) => void, caller?: any): void {\r\n        let listeners = this.__listeners.get(type);\r\n        if (!listeners) {\r\n            return;\r\n        }\r\n        let index = listeners.findIndex((element) => element.equals(type, handler, caller));\r\n        if (index < 0) {\r\n            return;\r\n        }\r\n        listeners.splice(index, 1);\r\n        //\u4ECEcaller\u5206\u7EC4\u4E2D\u5220\u9664\r\n        let callerListeners = this.__callers.get(caller);\r\n        if (!callerListeners) {\r\n            return;\r\n        }\r\n        index = callerListeners.findIndex((element) => element.equals(type, handler, caller));\r\n        if (index < 0) {\r\n            return;\r\n        }\r\n        callerListeners.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u6307\u5B9A\u5BF9\u8C61\u6240\u6709\u7684\u4E8B\u4EF6\u76D1\u542C\r\n     * @param caller    \r\n     * @returns \r\n     */\r\n    offByCaller(caller: any): void {\r\n        let callerListeners = this.__callers.get(caller);\r\n        if (!callerListeners) {\r\n            return;\r\n        }\r\n        while (callerListeners.length > 0) {\r\n            let listener = callerListeners[0];\r\n            this.off(listener.type!, listener.handler!, listener.caller);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u6240\u6709\u4E8B\u4EF6\u76D1\u542C\r\n     */\r\n    offAllEvent(): void {\r\n        this.__listeners.forEach(list => {\r\n            list.forEach(element => {\r\n                element.destroy();\r\n            });\r\n        });\r\n        this.__listeners.clear();\r\n        this.__callers.clear();\r\n    }\r\n\r\n    /**\r\n     * \u6D3E\u53D1\u4E8B\u4EF6\r\n     * @param type \r\n     * @param data \r\n     * @param err \r\n     * @param progress \r\n     * @param url \r\n     * @returns \r\n     */\r\n    emit(type: EventType, data?: any, err?: Error, progress?: number, url?: ResURL): void {\r\n        if (this.__listeners.has(type)) {\r\n            return;\r\n        }\r\n        const event = Event.create(type, data, err, progress, url);\r\n        this.__needEmit.push(event);\r\n        if (this.eventAync) {\r\n            TickerManager.callNextFrame(this.__emit, this);\r\n        } else {\r\n            this.__emit();\r\n        }\r\n    }\r\n\r\n    private __emit(): void {\r\n        for (let index = 0; index < this.__needEmit.length; index++) {\r\n            const event = this.__needEmit[index];\r\n            //\u6709\u4EBA\u5173\u5FC3\u4E14\u4E8B\u4EF6\u6CA1\u6709\u88AB\u505C\u6B62\r\n            if (this.hasEvent(event.type!) && event.propagationStopped == false) {\r\n                let list: EventListener[] = this.__listeners.get(event.type!)!;\r\n                let listener: EventListener;\r\n                for (let index = 0; index < list.length; index++) {\r\n                    listener = list[index];\r\n                    //\u4E8B\u4EF6\u662F\u5426\u88AB\u505C\u6B62\r\n                    if (event.propagationStopped) {\r\n                        break;\r\n                    }\r\n                    listener.handler!.apply(listener.caller, [event]);\r\n                }\r\n            }\r\n            //\u4E8B\u4EF6\u9000\u8FD8\r\n            event.release();\r\n        }\r\n        this.__needEmit.splice(0, this.__needEmit.length);\r\n    }\r\n\r\n    hasEvent(type: EventType): boolean {\r\n        return this.__listeners.has(type);\r\n    }\r\n\r\n    hasEventHandler(type: EventType, handler: (e: Event) => void, caller: any): boolean {\r\n        if (this.__listeners.has(type) == false) {\r\n            return false;\r\n        }\r\n        let infoList: EventListener[] = this.__listeners.get(type)!;\r\n        let info: EventListener;\r\n        for (let index = 0; index < infoList.length; index++) {\r\n            info = infoList[index];\r\n            if (info.equals(type, handler, caller)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    destroy(): boolean {\r\n        this.__listeners.clear();\r\n        this.__callers.clear();\r\n        return true;\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["PoolImpl", "classType", "max", "min", "element", "item", "Pool", "clazz", "pool", "PoolImpl", "item", "_Event", "type", "data", "err", "progress", "url", "Pool", "result", "Event", "Injector", "customKey", "clazz", "instance", "TickerManagerImpl", "dt", "handler", "index", "value", "caller", "NextFrameHandler", "callBack", "TickerManager", "dt", "value", "caller", "Injector", "TickerManagerImpl", "EventListener", "type", "caller", "handler", "priority", "target", "_EventDispatcher", "type", "handler", "caller", "priority", "listeners", "element", "listener", "EventListener", "a", "b", "callerListeners", "index", "list", "data", "err", "progress", "url", "event", "Event", "TickerManager", "infoList", "info", "EventDispatcher"]
}
