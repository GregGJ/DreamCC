{
  "version": 3,
  "sources": ["../src/behaviorTree/BTNodeStatus.ts", "../src/behaviorTree/BTNodeType.ts", "../src/behaviorTree/BTNode.ts", "../src/behaviorTree/actions/BTActionNode.ts", "../src/behaviorTree/actions/BTAsyncActionNode.ts", "../src/behaviorTree/actions/BTCoroActionNode.ts", "../src/behaviorTree/actions/BTSimpleActionNode.ts", "../src/behaviorTree/actions/BTStatefulActionNode.ts", "../src/behaviorTree/actions/BTSyncActionNode.ts", "../src/behaviorTree/conditions/BTConditionNode.ts", "../src/behaviorTree/conditions/BTSimpleConditionNode.ts", "../src/behaviorTree/controls/BTControlNode.ts", "../src/behaviorTree/controls/BTFallbackNode.ts", "../src/behaviorTree/controls/BTIfThenElseNode.ts", "../src/behaviorTree/controls/BTParallelNode.ts", "../src/behaviorTree/controls/BTReactiveFallback.ts", "../src/behaviorTree/controls/BTSequenceNode.ts", "../src/behaviorTree/controls/BTSequenceStarNode.ts", "../src/behaviorTree/controls/BTWhileDoElseNode.ts", "../src/behaviorTree/decorators/BTDecoratorNode.ts", "../src/behaviorTree/decorators/BTDelayNode.ts", "../src/behaviorTree/decorators/BTForceFailureNode.ts", "../src/behaviorTree/decorators/BTForceSuccessNode.ts", "../src/behaviorTree/decorators/BTInverterNode.ts", "../src/behaviorTree/decorators/BTKeepRunningUntilFailureNode.ts", "../src/behaviorTree/decorators/BTRepeatNode.ts", "../src/behaviorTree/decorators/BTRetryNode.ts", "../src/behaviorTree/decorators/BTTimeOutNode.ts", "../src/behaviorTree/BTUtils.ts", "../src/behaviorTree/BTNodeKeys.ts", "../src/behaviorTree/controls/BTReactiveSequence.ts", "../src/behaviorTree/BTContext.ts", "../src/behaviorTree/BTBlackboard.ts", "../../dream-cc-ecs/src/core/ECSComponent.ts", "../../dream-cc-ecs/src/core/ECSMatcher.ts", "../../dream-cc-ecs/src/core/ECSStorage.ts", "../../dream-cc-ecs/src/core/ECSWorld.ts", "../../dream-cc-ecs/src/core/SparseSet.ts", "../../dream-cc-ecs/src/core/ECSSystem.ts", "../../dream-cc-ecs/src/camps/CampComponent.ts", "../../dream-cc-ecs/src/transforms/TransformComponent.ts", "../../dream-cc-ecs/src/nodes/ParentComponent.ts", "../../dream-cc-ecs/src/nodes/AddToParentQueueSystem.ts", "../../dream-cc-ecs/src/nodes/NodeComponent.ts", "../../dream-cc-ecs/src/nodes/AddToParentSystem.ts", "../../dream-cc-ecs/src/nodes/NodeSystem.ts", "../../dream-cc-ecs/src/nodes/SizeComponent.ts", "../../dream-cc-ecs/src/displays/DisplayComponent.ts", "../../dream-cc-ecs/src/displays/GraphicsComponent.ts", "../../dream-cc-ecs/src/datas/DataComponent.ts", "../../dream-cc-ecs/src/links/LinkComponent.ts", "../../dream-cc-ecs/src/links/LinkSystem.ts", "../../dream-cc-ecs/src/displays/RendererRoot2DComponent.ts", "../../dream-cc-ecs/src/levels/LevelStatus.ts", "../../dream-cc-ecs/src/levels/Level.ts", "../../dream-cc-ecs/src/levels/LevelManager.ts", "../../dream-cc-ecs/src/levels/LevelMode.ts", "../../dream-cc-ecs/src/levels/LevelModeScript.ts", "../src/behaviorTree/ecs/BehaviorTreeComponent.ts", "../src/behaviorTree/ecs/BehaviorTreeSystem.ts", "../src/fsm/FSM.ts"],
  "sourcesContent": ["\r\n\r\n/**\r\n * \u8282\u70B9\u72B6\u6001\r\n */\r\nexport enum BTNodeStatus {\r\n    /**\u521D\u59CB\u72B6\u6001 */\r\n    IDLE = 0,\r\n    /**\u5931\u8D25 */\r\n    FAILURE,\r\n    /**\u6210\u529F */\r\n    SUCCESS,\r\n    /**\u8FD0\u884C\u4E2D */\r\n    RUNNING\r\n}", "\r\n\r\n\r\n/**\r\n * \u8282\u70B9\u7C7B\u578B\r\n */\r\nexport enum BTNodeType{\r\n    ERROR,\r\n    CONTROL,\r\n    DECORATOR,\r\n    ACTION,\r\n    CONDITION\r\n}", "import { BTBlackboard } from \"./BTBlackboard\";\r\nimport { BTNodeStatus } from \"./BTNodeStatus\";\r\nimport { BTNodeType } from \"./BTNodeType\";\r\nimport { IBTNode } from \"./interfaces/IBTNode\";\r\nimport { IBTNodeConfig } from \"./interfaces/IBTNodeConfig\";\r\n\r\n\r\nexport abstract class BTNode implements IBTNode {\r\n\r\n    /**\u540D\u79F0 */\r\n    name: string;\r\n\r\n    /**\u7236\u8282\u70B9*/\r\n    parent: IBTNode | null = null;\r\n\r\n    /**\u9ED1\u677F */\r\n    blackboard: BTBlackboard;\r\n\r\n    /**\u72B6\u6001 */\r\n    protected $status: BTNodeStatus = BTNodeStatus.IDLE;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        this.name = name;\r\n        this.blackboard = blackboard;\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n\r\n    }\r\n\r\n    evaluate(): BTNodeStatus {\r\n        this.status = this.tick() as BTNodeStatus;\r\n        return this.status;\r\n    }\r\n\r\n    abstract tick(): BTNodeStatus | Promise<BTNodeStatus>;\r\n\r\n    abstract halt(): void;\r\n\r\n    destroy(): void {\r\n        this.parent = null;\r\n        this.blackboard = null;\r\n    }\r\n\r\n    /**\u83B7\u53D6\u72B6\u6001*/\r\n    get status(): BTNodeStatus {\r\n        return this.$status;\r\n    }\r\n\r\n    set status(value: BTNodeStatus) {\r\n        this.$status = value;\r\n    }\r\n\r\n    get type(): BTNodeType {\r\n        return BTNodeType.ERROR;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNode } from \"../BTNode\";\r\nimport { BTNodeType } from \"../BTNodeType\";\r\n\r\n/**\r\n * \u52A8\u4F5C\u8282\u70B9\u57FA\u7840\u7C7B\r\n */\r\nexport abstract class BTActionNode extends BTNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    get type():BTNodeType{\r\n        return BTNodeType.ACTION;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTActionNode } from \"./BTActionNode\";\r\n\r\n\r\n/**\r\n* \u5F02\u6B65\u52A8\u4F5C\u8282\u70B9\u57FA\u7840\u7C7B\r\n*/\r\nexport abstract class BTAsyncActionNode extends BTActionNode {\r\n\r\n   private halt_requested: boolean;\r\n\r\n   constructor(name: string, blackboard: BTBlackboard) {\r\n       super(name,blackboard);\r\n       this.halt_requested = false;\r\n   }\r\n       \r\n   evaluate(): BTNodeStatus {\r\n       if (this.status === BTNodeStatus.IDLE) {\r\n           this.status = BTNodeStatus.RUNNING;\r\n           this.halt_requested = false;\r\n           (async () => {\r\n               try {\r\n                   // this.waiting = true;\r\n                   this.status = await this.tick();\r\n                   // this.waiting = false;\r\n               } catch (error) {\r\n                   // this.waiting = false;\r\n                   throw new Error(error as any);\r\n               }\r\n           })();\r\n       }\r\n       return this.status;\r\n   }\r\n\r\n   public isHaltRequested(): boolean {\r\n       return this.halt_requested;\r\n   }\r\n\r\n   halt() {\r\n       this.halt_requested = true;\r\n       // while (this.waiting) {}\r\n       // this.setStatus(NodeStatus.IDLE);\r\n   }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTActionNode } from \"./BTActionNode\";\r\n\r\n\r\n\r\nexport abstract class BTCoroActionNode extends BTActionNode {\r\n\r\n    private yield: boolean = false;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    setStatusRunningAndYield() {\r\n        this.status = BTNodeStatus.RUNNING;\r\n        this.yield = true;\r\n    }\r\n\r\n    evaluate(): BTNodeStatus {\r\n        if (!this.yield) {\r\n            this.status = this.tick() as BTNodeStatus;\r\n        }\r\n        return this.status;\r\n    }\r\n\r\n    halt() {\r\n        this.yield = false;\r\n    }\r\n}\r\n", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNode } from \"../interfaces/IBTNode\";\r\nimport { BTAsyncActionNode } from \"./BTAsyncActionNode\";\r\n\r\n\r\nexport class BTSimpleActionNode extends BTAsyncActionNode {\r\n\r\n   protected tickFunctor: (node: IBTNode) => BTNodeStatus;\r\n\r\n   constructor(name: string, blackboard: BTBlackboard, tickFunctor: (node: IBTNode) => BTNodeStatus) {\r\n       super(name, blackboard);\r\n       this.tickFunctor = tickFunctor;\r\n   }\r\n   \r\n   tick(): BTNodeStatus {\r\n       let prevStatuc = this.status;\r\n       if (prevStatuc === BTNodeStatus.IDLE) {\r\n           this.status = BTNodeStatus.RUNNING;\r\n           prevStatuc = BTNodeStatus.RUNNING;\r\n       }\r\n       let status = this.tickFunctor(this);\r\n       if (status !== prevStatuc) {\r\n           this.status = status;\r\n       }\r\n       return status;\r\n   }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTActionNode } from \"./BTActionNode\";\r\n\r\n/**\r\n * \u72B6\u6001\u7C7B\u52A8\u4F5C\u8282\u70B9\r\n */\r\nexport abstract class BTStatefulActionNode extends BTActionNode {\r\n\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        const initial_status = this.status;\r\n        if (initial_status === BTNodeStatus.IDLE) {\r\n            const new_status = this.onEnter();\r\n            if (new_status === BTNodeStatus.IDLE) {\r\n                throw new Error('AsyncActionNode2::onStart() must not return IDLE');\r\n            }\r\n            if (new_status != BTNodeStatus.RUNNING) {\r\n                this.onExit();\r\n            }\r\n            return new_status;\r\n        }\r\n\r\n        if (initial_status === BTNodeStatus.RUNNING) {\r\n            const new_status = this.onTick();\r\n            if (new_status === BTNodeStatus.IDLE) {\r\n                throw new Error('AsyncActionNode2::onRunning() must not return IDLE');\r\n            }\r\n            if (new_status != BTNodeStatus.RUNNING) {\r\n                this.onExit();\r\n            }\r\n            return new_status;\r\n        }\r\n        return initial_status;\r\n    }\r\n\r\n\r\n\r\n    halt(): void {\r\n        if (this.status === BTNodeStatus.RUNNING) {\r\n            this.onHalted();\r\n        }\r\n        this.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    /**\u8FDB\u5165*/\r\n    abstract onEnter(): BTNodeStatus;\r\n\r\n    /**tick */\r\n    abstract onTick(): BTNodeStatus;\r\n\r\n    /**\u9000\u51FA */\r\n    abstract onExit(): void;\r\n\r\n    /**\u88AB\u6253\u65AD */\r\n    onHalted(): void {\r\n        this.onExit();\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTActionNode } from \"./BTActionNode\";\r\n\r\n\r\n/**\r\n* \u540C\u6B65\u52A8\u4F5C\u8282\u70B9\r\n*/\r\nexport abstract class BTSyncActionNode extends BTActionNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    // throws if the derived class return RUNNING.\r\n    public evaluate(): BTNodeStatus {\r\n        const stat = super.evaluate();\r\n        if (stat === BTNodeStatus.RUNNING) {\r\n            throw new Error('SyncActionNode MUST never return RUNNING');\r\n        }\r\n        return stat;\r\n    }\r\n\r\n    public halt() {\r\n        this.status = BTNodeStatus.IDLE;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNode } from \"../BTNode\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTNodeType } from \"../BTNodeType\";\r\n\r\n/**\r\n* \u6761\u4EF6\u8282\u70B9\r\n*/\r\nexport abstract class BTConditionNode extends BTNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    halt(): void {\r\n        this.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    get type(): BTNodeType {\r\n        return BTNodeType.CONDITION;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNode } from \"../interfaces/IBTNode\";\r\nimport { BTConditionNode } from \"./BTConditionNode\";\r\n\r\n\r\n\r\n\r\n/**\r\n* \u7B80\u5355\u6761\u4EF6\u8282\u70B9\r\n*/\r\nexport class BTSimpleConditionNode extends BTConditionNode {\r\n\r\n    protected tick_functor: (node: IBTNode) => BTNodeStatus;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard, tick_functor: (node: IBTNode) => BTNodeStatus) {\r\n        super(name, blackboard);\r\n        this.tick_functor = tick_functor;\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        return this.tick_functor(this);\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNode } from \"../BTNode\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTNodeType } from \"../BTNodeType\";\r\nimport { IBTControlNode } from \"../interfaces/IBTControlNode\";\r\nimport { IBTNode } from \"../interfaces/IBTNode\";\r\n\r\n\r\n/**\r\n * \u63A7\u5236\u8282\u70B9\r\n */\r\nexport abstract class BTControlNode extends BTNode implements IBTControlNode {\r\n\r\n    protected $children: IBTNode[] = [];\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.$children = [];\r\n    }\r\n\r\n    addChild(child: IBTNode) {\r\n        if (this.$children.indexOf(child) > -1) {\r\n            throw new Error(\"child already exists\");\r\n        }\r\n        this.$children.push(child);\r\n        child.parent = this;\r\n    }\r\n\r\n    getChild(idx: number): IBTNode {\r\n        if (idx < 0 || idx >= this.$children.length) {\r\n            throw new Error(\"index out of range\");\r\n        }\r\n        return this.$children[idx];\r\n    }\r\n\r\n    halt(): void {\r\n        this.haltChildren();\r\n        this.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    haltChild(idx: number): void {\r\n        if (idx < 0 || idx >= this.$children.length) {\r\n            throw new Error(\"index out of range\");\r\n        }\r\n        const child = this.$children[idx];\r\n        if (child.status === BTNodeStatus.RUNNING) {\r\n            child.halt();\r\n        }\r\n        child.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    haltChildren(start: number = 0): void {\r\n        for (let i = start; i < this.$children.length; ++i) {\r\n            this.haltChild(i);\r\n        }\r\n    }\r\n\r\n    destroy(): void {\r\n        this.haltChildren();\r\n        for (let i = 0; i < this.$children.length; ++i) {\r\n            const child = this.$children[i];\r\n            child.destroy();\r\n        }\r\n        super.destroy();\r\n    }\r\n\r\n    get numChildren(): number {\r\n        return this.$children.length;\r\n    }\r\n\r\n    get type(): BTNodeType {\r\n        return BTNodeType.CONTROL;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u5728\u52FE\u9009\u7B2C\u4E00\u4E2A\u5B50\u8282\u70B9\u4E4B\u524D\uFF0C\u8282\u70B9\u72B6\u6001\u53D8\u4E3ARUNNING\u3002\r\n * \u5982\u679C\u4E00\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u5219\u56DE\u9000\u6807\u8BB0\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\u3002\r\n * \u5982\u679C\u6700\u540E\u4E00\u4E2A\u5B50\u8FDB\u7A0B\u4E5F\u8FD4\u56DEFAILURE\uFF0C\u90A3\u4E48\u6240\u6709\u7684\u5B50\u8FDB\u7A0B\u90FD\u505C\u6B62\uFF0C\u56DE\u9000\u8FDB\u7A0B\u8FD4\u56DEFAILURE\u3002\r\n * \u5982\u679C\u5B50\u8FDB\u7A0B\u8FD4\u56DESUCCESS\uFF0C\u5219\u505C\u6B62\u5E76\u8FD4\u56DESUCCESS\u3002\u6240\u6709\u7684\u5B69\u5B50\u90FD\u505C\u4E0B\u6765\u4E86\u3002\r\n */\r\nexport class BTFallbackNode extends BTControlNode {\r\n\r\n    private __current_child_idx: number;\r\n    constructor(name: string,blackboard: BTBlackboard) {\r\n        super(name,blackboard);\r\n        this.__current_child_idx = 0;\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        const child_count = this.numChildren;\r\n        this.status = BTNodeStatus.RUNNING;\r\n        while (this.__current_child_idx < child_count) {\r\n            const child_node = this.$children[this.__current_child_idx];\r\n            const child_status = child_node.evaluate();\r\n\r\n            switch (child_status) {\r\n                case BTNodeStatus.RUNNING:\r\n                    return child_status\r\n                case BTNodeStatus.SUCCESS:\r\n                    this.haltChildren();\r\n                    this.__current_child_idx = 0;\r\n                    return child_status;\r\n                case BTNodeStatus.FAILURE:\r\n                    this.__current_child_idx++;\r\n                    break;\r\n                case BTNodeStatus.IDLE:\r\n                    throw new Error(\"NodeStatus.IDLE is not allowed in FallbackNode\");\r\n                default:\r\n                    throw new Error(\"Unknown NodeStatus\");\r\n            }\r\n        }\r\n        if (this.__current_child_idx == child_count) {\r\n            this.haltChildren();\r\n            this.__current_child_idx = 0;\r\n        }\r\n        return BTNodeStatus.FAILURE;\r\n    }\r\n\r\n    halt(): void {\r\n        this.__current_child_idx = 0;\r\n        super.halt();\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u67092\u62163\u4E2A\u5B50\u8282\u70B9\uFF0Cnode1\u5C31\u662Fif\u5224\u65AD\u7684\u6761\u4EF6\u3002\r\n * \u5982\u679Cnode1\u8FD4\u56DESUCCESS\uFF0C\u90A3\u4E48node2\u6267\u884C\uFF1B\r\n * \u5426\u5219\uFF0Cnode3\u6267\u884C\u3002\r\n * \u5982\u679C\u6CA1\u6709node3\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n * \u8BE5\u7ED3\u70B9not reactive\uFF0C\r\n * \u4F53\u73B0\u5728\u4E00\u65E6node1\u4E0D\u8FD4\u56DERUNNING\u4E86\uFF0C\u5C31\u8FDB\u5165\u4E86node2\u6216node3\u7684\u6267\u884C\uFF0C\u4EE5\u540Etick()\u4E0D\u4F1A\u518D\u6267\u884Cnode1\u4E86\uFF0C\u4E5F\u5373\u4E0D\u4F1A\u518D\u68C0\u67E5if\u6761\u4EF6\u7684\u53D8\u5316\u3002\r\n */\r\nexport class BTIfThenElseNode extends BTControlNode{\r\n\r\n    private __child_idx:number=0;\r\n\r\n    constructor(name:string,blackboard:BTBlackboard){\r\n        super(name,blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        if(this.numChildren!=2&&this.numChildren!=3){\r\n            throw new Error(this.name+\"IfThenElseNode:the number of children must be 2 or 3\")\r\n        }\r\n        this.status=BTNodeStatus.RUNNING;\r\n        if(this.__child_idx==0){\r\n            const condition_status=this.$children[0].evaluate();\r\n            if(condition_status==BTNodeStatus.RUNNING){\r\n                return condition_status;\r\n            }else if(condition_status==BTNodeStatus.SUCCESS){\r\n                this.__child_idx=1;\r\n            }else if(condition_status==BTNodeStatus.FAILURE){\r\n                if(this.numChildren==3){\r\n                    this.__child_idx=2;\r\n                }else{\r\n                    return condition_status;\r\n                }\r\n            }\r\n        }\r\n        if(this.__child_idx>0){\r\n            const child_status=this.$children[this.__child_idx].evaluate();\r\n            if(child_status==BTNodeStatus.RUNNING){\r\n                return BTNodeStatus.RUNNING;\r\n            }else{\r\n                this.haltChildren();\r\n                this.__child_idx=0;\r\n                return child_status;\r\n            }\r\n        }\r\n        throw new Error(this.name+\"Something unexpected happened in IfThenElseNode\")\r\n    }\r\n\r\n    halt():void{\r\n        this.__child_idx = 0;\r\n        super.halt();\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u5F53\u8FD4\u56DESUCCESS\u7684\u5B50\u8282\u70B9\u4E2A\u6570>=THRESHOLD_SUCCESS\u65F6\uFF0C\u8FD4\u56DESUCCESS\u3002\r\n * \u5F53\u8FD4\u56DEFAILURE\u7684\u5B50\u8282\u70B9\u4E2A\u6570>=THRESHOLD_FAILURE\u65F6\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n * \u5F53\u7A0B\u5E8F\u5224\u65AD\u7EDD\u4E0D\u53EF\u80FDSUCCESS\u65F6\uFF0C\u8FD4\u56DEFAILURE\u3002\u5982 failure_children_num > children_count - success_threshold_\u3002\r\n */\r\nexport class BTParallelNode extends BTControlNode {\r\n\r\n    private success_threshold: number = 0;\r\n    private failure_threshold: number = 1;\r\n    private __skip_list: Map<number,number>;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.__skip_list = new Map<number,number>();\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n        if (data.hasOwnProperty('success')) {\r\n            //@ts-ignore\r\n            this.success_threshold = data[\"success\"];\r\n        }\r\n        if (data.hasOwnProperty('failure')) {\r\n            //@ts-ignore\r\n            this.failure_threshold = data[\"failure\"];\r\n        }\r\n        this.success_threshold = Math.max(this.success_threshold, 0);\r\n        this.failure_threshold = Math.max(this.failure_threshold, 1);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        let success_childred_num = 0;\r\n        let failure_childred_num = 0;\r\n\r\n        const children_count = this.$children.length;\r\n\r\n        if (children_count < this.success_threshold) {\r\n            throw new Error('Number of children is less than threshold. Can never succeed.');\r\n        }\r\n\r\n        if (children_count < this.failure_threshold) {\r\n            throw new Error('Number of children is less than threshold. Can never fail.');\r\n        }\r\n\r\n        // Routing the tree according to the sequence node's logic:\r\n        for (let i = 0; i < children_count; i++) {\r\n            const child_node = this.$children[i];\r\n\r\n            const in_skip_list = this.__skip_list.has(i);\r\n\r\n            let child_status: BTNodeStatus;\r\n            if (in_skip_list) {\r\n                child_status = child_node.status;\r\n            } else {\r\n                child_status = child_node.evaluate();\r\n            }\r\n\r\n            switch (child_status) {\r\n                case BTNodeStatus.SUCCESS:\r\n                    {\r\n                        if (!in_skip_list) {\r\n                            this.__skip_list.set(i, i);\r\n                        }\r\n                        success_childred_num++;\r\n\r\n                        if (success_childred_num == this.success_threshold) {\r\n                            this.__skip_list.clear();\r\n                            this.haltChildren();\r\n                            return BTNodeStatus.SUCCESS;\r\n                        }\r\n                    }\r\n                    break;\r\n                case BTNodeStatus.FAILURE:\r\n                    {\r\n                        if (!in_skip_list) {\r\n                            this.__skip_list.set(i, i);\r\n                        }\r\n                        failure_childred_num++;\r\n\r\n                        // It fails if it is not possible to succeed anymore or if\r\n                        // number of failures are equal to failure_threshold_\r\n                        if (\r\n                            failure_childred_num > children_count - this.success_threshold ||\r\n                            failure_childred_num == this.failure_threshold\r\n                        ) {\r\n                            this.__skip_list.clear();\r\n                            this.haltChildren();\r\n                            return BTNodeStatus.FAILURE;\r\n                        }\r\n                    }\r\n                    break;\r\n                case BTNodeStatus.RUNNING:\r\n                    {\r\n                        // do nothing\r\n                    }\r\n                    break;\r\n                default: {\r\n                    throw new Error('A child node must never return IDLE');\r\n                }\r\n            }\r\n        }\r\n        return BTNodeStatus.RUNNING;\r\n    }\r\n\r\n    halt(): void {\r\n        this.__skip_list.clear();\r\n        super.halt();\r\n    }\r\n\r\n    destroy(): void {\r\n        this.__skip_list.clear();\r\n        super.destroy();\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n\r\n/**\r\n * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8FD4\u56DERUNNING\uFF0C\u4E14\u4E0B\u6B21tick()\u65F6\u4E4B\u524D\u7684\u5B50\u8282\u70B9\u4F1A\u518D\u6B21\u6267\u884C\uFF0Creactive\u6240\u5728\u3002\r\n * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\uFF0C\u4E14\u8FD4\u56DESUCCESS\u3002\r\n * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u7ACB\u5373\u6267\u884C\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\uFF08\u4E0D\u4F1A\u7B49\u4E0B\u4E00\u6B21tick()\uFF09\u3002\u5982\u679C\u6240\u6709\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n */\r\nexport class BTReactiveFallback extends BTControlNode {\r\n\r\n    constructor(name: string,blackboard: BTBlackboard) {\r\n        super(name,blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        let failure_count: number = 0;\r\n        for (let index = 0; index < this.numChildren; index++) {\r\n            const child = this.$children[index];\r\n            const child_status = child.evaluate();\r\n            switch (child_status) {\r\n                case BTNodeStatus.RUNNING:\r\n                    this.haltChildren(index + 1);\r\n                    return BTNodeStatus.RUNNING;\r\n                case BTNodeStatus.FAILURE:\r\n                    failure_count++;\r\n                    break;\r\n                case BTNodeStatus.SUCCESS:\r\n                    this.haltChildren();\r\n                    return BTNodeStatus.SUCCESS;\r\n                case BTNodeStatus.IDLE:\r\n                    throw new Error(\"ReactiveFallback: child node is idle\");\r\n                default:\r\n                    throw new Error(\"ReactiveFallback: unknown child node status\");\r\n            }\r\n        }\r\n        if (failure_count == this.numChildren) {\r\n            this.haltChildren();\r\n            return BTNodeStatus.FAILURE;\r\n        }\r\n        return BTNodeStatus.RUNNING;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u6309\u4ECE\u5DE6\u5230\u53F3\u7684\u987A\u5E8F\u4F9D\u6B21\u6267\u884C\u5B50\u8282\u70B9\u3002\r\n * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8FD4\u56DERUNNING\uFF0C\u4E14\u4E0B\u6B21tick()\u65F6\u4E4B\u524D\u7684\u5B50\u8282\u70B9\u4E0D\u4F1A\u518D\u6267\u884C\u3002\r\n * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u7ACB\u5373\u6267\u884C\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\uFF08\u4E0D\u4F1A\u7B49\u4E0B\u4E00\u6B21tick()\uFF09\u3002\r\n * \u5982\u679C\u6240\u6709\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u8FD4\u56DESUCCESS\u3002\r\n */\r\nexport class BTSequenceNode extends BTControlNode {\r\n\r\n    private __current_index: number = 0;\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    halt(): void {\r\n        this.__current_index = 0;\r\n        super.halt();\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n        while (this.__current_index < this.numChildren) {\r\n            const child = this.$children[this.__current_index];\r\n            const child_status = child.evaluate();\r\n            switch (child_status) {\r\n                case BTNodeStatus.RUNNING:\r\n                    return child_status;\r\n                case BTNodeStatus.FAILURE:\r\n                    this.haltChildren();\r\n                    this.__current_index = 0;\r\n                    return child_status;\r\n                case BTNodeStatus.SUCCESS:\r\n                    this.__current_index++;\r\n                    break;\r\n                case BTNodeStatus.IDLE:\r\n                    throw new Error(\"NodeStatus.IDLE is not a valid status\");\r\n                default:\r\n                    throw new Error(\"Unknown NodeStatus\");\r\n            }\r\n        }\r\n        if (this.__current_index === this.numChildren) {\r\n            this.haltChildren();\r\n            this.__current_index = 0;\r\n        }\r\n        return BTNodeStatus.SUCCESS;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u540CSequenceNode\uFF0C\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E\u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u8FD4\u56DEFAILURE\uFF0C\u7EC8\u6B62\u6240\u6709\u8282\u70B9\u7684\u6267\u884C\u3002\r\n * \u4F46\u4E0D\u590D\u4F4Dcurrent_child_idx_\u3002\u6240\u4EE5\u5F53\u518D\u6B21tick()\u65F6\uFF0C\u4ECEFAILURE\u7684\u5B50\u8282\u70B9\u5F00\u59CB\u3002\r\n */\r\nexport class BTSequenceStarNode extends BTControlNode{\r\n\r\n    private __current_index = 0;\r\n\r\n    constructor(name: string,blackboard: BTBlackboard) {\r\n        super(name,blackboard);\r\n    }\r\n    \r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n        while (this.__current_index < this.numChildren) {\r\n            const child = this.$children[this.__current_index];\r\n            const child_status = child.evaluate();\r\n            switch (child_status) {\r\n                case BTNodeStatus.RUNNING:\r\n                    return child_status;\r\n                case BTNodeStatus.FAILURE:\r\n                    this.haltChildren(this.__current_index);\r\n                    return child_status;\r\n                case BTNodeStatus.SUCCESS:\r\n                    this.__current_index++;\r\n                    break;\r\n                case BTNodeStatus.IDLE:\r\n                    throw new Error(\"NodeStatus.IDLE is not a valid status\");\r\n                default:\r\n                    throw new Error(\"Unknown NodeStatus\");\r\n            }\r\n        }\r\n        if (this.__current_index === this.numChildren) {\r\n            this.haltChildren();\r\n            this.__current_index = 0;\r\n        }\r\n        return BTNodeStatus.SUCCESS;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u662FIfThenElseNode\u7684reactive\u7248\u672C\u3002\r\n * reactive\u4F53\u73B0\u5728\u6BCF\u6B21tick()\u90FD\u4F1A\u6267\u884Cnode1\uFF0C\u5373\u68C0\u67E5if\u6761\u4EF6\u7684\u53D8\u5316\u3002\r\n * \u82E5node1\u8FD4\u56DE\u503C\u6709SUCCESS\u3001FAILURE\u7684\u5207\u6362\u53D8\u5316\uFF0C\u5C31\u4F1A\u6253\u65ADnode2\u6216node3\u7684\u6267\u884C\uFF0C\u91CD\u65B0\u9009\u62E9\u5BF9\u5E94\u7684node\u3002\r\n */\r\nexport class BTWhileDoElseNode extends BTControlNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n    \r\n    tick(): BTNodeStatus {\r\n        if (this.numChildren != 2 && this.numChildren != 3) {\r\n            throw new Error(this.name + \"IfThenElseNode:the number of children must be 2 or 3\")\r\n        }\r\n        this.status = BTNodeStatus.RUNNING;\r\n        // \u6BCF\u6B21tick()\u90FD\u4F1A\u5148\u6267\u884C\u7B2C1\u4E2A\u8282\u70B9\uFF0C\u5373\u5224\u65AD\u6761\u4EF6\uFF0Creactive\u4F53\u73B0\u5728\u6B64\uFF0C\u53CA\u65F6\u54CD\u5E94\u5916\u754C\u53D8\u5316\r\n        const condition_status = this.$children[0].evaluate();\r\n        if (condition_status == BTNodeStatus.RUNNING) {\r\n            return condition_status;\r\n        }\r\n        let status = BTNodeStatus.IDLE;\r\n        // \u6839\u636E\u7B2C1\u4E2A\u8282\u70B9\u7684\u8FD4\u56DE\u503C\uFF0C\u6267\u884C\u5BF9\u5E94\u8282\u70B9\uFF0C\u5E76\u7EC8\u6B62\u53E6\u5916\u7684\u8282\u70B9\r\n        if (condition_status == BTNodeStatus.SUCCESS) {\r\n            this.haltChild(2);\r\n            status = this.$children[1].evaluate();\r\n        } else if (condition_status == BTNodeStatus.FAILURE) {\r\n            this.haltChild(1);;\r\n            status = this.$children[2].evaluate();\r\n        }\r\n\r\n        if (status == BTNodeStatus.RUNNING) {\r\n            return BTNodeStatus.RUNNING;\r\n        } else {\r\n            this.haltChildren();\r\n            return status;\r\n        }\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNode } from \"../BTNode\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTNodeType } from \"../BTNodeType\";\r\nimport { IBTNode } from \"../interfaces/IBTNode\";\r\n\r\n\r\n/**\r\n * \u88C5\u9970\u8282\u70B9\r\n */\r\nexport abstract class BTDecoratorNode extends BTNode {\r\n\r\n    protected $child: IBTNode | null = null;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    /**\r\n     * \u8BBE\u7F6E\u5B50\u8282\u70B9\r\n     * @param child \r\n     */\r\n    setChild(child: IBTNode) {\r\n        if (this.$child != null) {\r\n            throw new Error(\"Child already set\");\r\n        }\r\n        this.$child = child;\r\n    }\r\n\r\n    getChild(): IBTNode | null {\r\n        return this.$child;\r\n    }\r\n\r\n    halt(): void {\r\n        this.haltChild();\r\n        this.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    haltChild(): void {\r\n        if (!this.$child) {\r\n            return;\r\n        }\r\n        if (this.$child.status == BTNodeStatus.RUNNING) {\r\n            this.$child.halt();\r\n        }\r\n        this.$child.status = BTNodeStatus.IDLE;\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n        if (this.$child) {\r\n            if (this.$child.status == BTNodeStatus.RUNNING) {\r\n                this.$child.halt();\r\n            }\r\n            this.$child.destroy();\r\n            this.$child = null;\r\n        }\r\n    }\r\n\r\n    get type(): BTNodeType {\r\n        return BTNodeType.DECORATOR;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5EF6\u8FDF\u6307\u5B9A\u65F6\u95F4\u540E\u6267\u884C\u5B50\u8282\u70B9\r\n */\r\nexport class BTDelayNode extends BTDecoratorNode {\r\n\r\n    private delay_started: boolean;\r\n    private delay_complete: boolean;\r\n    private delay_aborted: boolean;\r\n    /**\u5B9A\u65F6\u5668\u53E5\u67C4*/\r\n    public time_handler: number | undefined = undefined;\r\n    /**\u5EF6\u8FDF\u65F6\u95F4 */\r\n    private delayTime: number = 0;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.delay_started = false;\r\n        this.delay_aborted = false;\r\n        this.delay_complete = false;\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n        if (data.hasOwnProperty('delayTime')) {\r\n            // @ts-ignore\r\n            this.delayTime = data['delayTime'] || 0;\r\n        }\r\n        this.delayTime = Math.max(this.delayTime, 0);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        if (!this.delay_started) {\r\n            this.delay_complete = false;\r\n            this.delay_aborted = false;\r\n            this.delay_started = true;\r\n            this.status = BTNodeStatus.RUNNING;\r\n            this.time_handler = setTimeout(this.__timeOut.bind(this), this.delayTime);\r\n        }\r\n\r\n        if (this.delay_aborted) {\r\n            this.delay_aborted = false;\r\n            this.delay_started = false;\r\n            return BTNodeStatus.FAILURE;\r\n        } else if (this.delay_complete) {\r\n            this.delay_started = false;\r\n            this.delay_aborted = false;\r\n            const child_status = this.getChild()!.evaluate();\r\n            return child_status;\r\n        } else {\r\n            return BTNodeStatus.RUNNING;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5EF6\u8FDF\u7ED3\u675F\r\n     */\r\n    private __timeOut(): void {\r\n        this.delay_complete = true;\r\n        this.time_handler = undefined;\r\n    }\r\n\r\n    halt(): void {\r\n        this.delay_started = false;\r\n        if (this.time_handler != undefined) {\r\n            clearTimeout(this.time_handler!);\r\n            this.time_handler = undefined;\r\n            this.delay_aborted = true;\r\n        }\r\n        super.halt();\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\u5426\u5219\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u5373\u5F3A\u5236\u8FD4\u56DE\u5931\u8D25\u72B6\u6001\u3002\r\n */\r\nexport class BTForceFailureNode extends BTDecoratorNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n\r\n        const child_state = this.getChild()!.evaluate();\r\n\r\n        switch (child_state) {\r\n            case BTNodeStatus.FAILURE:\r\n            case BTNodeStatus.SUCCESS: {\r\n                return BTNodeStatus.FAILURE;\r\n            }\r\n            case BTNodeStatus.RUNNING: {\r\n                return BTNodeStatus.RUNNING;\r\n            }\r\n        }\r\n        return this.status;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\u5426\u5219\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u5373\u5F3A\u5236\u8FD4\u56DE\u6210\u529F\u72B6\u6001\u3002\r\n */\r\nexport class BTForceSuccessNode extends BTDecoratorNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n\r\n        const child_state = this.getChild()!.evaluate();\r\n\r\n        switch (child_state) {\r\n            case BTNodeStatus.FAILURE:\r\n            case BTNodeStatus.SUCCESS: {\r\n                return BTNodeStatus.SUCCESS;\r\n            }\r\n            case BTNodeStatus.RUNNING: {\r\n                return BTNodeStatus.RUNNING;\r\n            }\r\n        }\r\n        return this.status;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n\r\n/**\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DESUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DEFAILURE\uFF1B\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF1B\r\n * \u5373\u5BF9\u5B50\u8282\u70B9\u7684\u6267\u884C\u7ED3\u679C\u53D6\u53CD\u3002\r\n */\r\nexport class BTInverterNode extends BTDecoratorNode {\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n\r\n        const child_state = this.getChild()!.evaluate();\r\n\r\n        switch (child_state) {\r\n            case BTNodeStatus.SUCCESS: {\r\n                return BTNodeStatus.FAILURE;\r\n            }\r\n            case BTNodeStatus.FAILURE: {\r\n                return BTNodeStatus.SUCCESS;\r\n            }\r\n            case BTNodeStatus.RUNNING: {\r\n                return BTNodeStatus.RUNNING;\r\n            }\r\n            default: {\r\n                throw new Error('A child node must never return IDLE');\r\n            }\r\n        }\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\u6216SUCCESS\uFF0C\u4E0B\u6B21tick()\u7EE7\u7EED\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u76F4\u5230\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\u3002\r\n */\r\nexport class BTKeepRunningUntilFailureNode extends BTDecoratorNode {\r\n\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n\r\n        const child_state = this.getChild()!.evaluate();\r\n\r\n        switch (child_state) {\r\n            case BTNodeStatus.FAILURE: {\r\n                return BTNodeStatus.FAILURE;\r\n            }\r\n            case BTNodeStatus.SUCCESS:\r\n            case BTNodeStatus.RUNNING: {\r\n                return BTNodeStatus.RUNNING;\r\n            }\r\n        }\r\n        return this.status;\r\n    }\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n\r\n/**\r\n * \u91CD\u590D\u6267\u884C\u5B50\u8282\u70B9NUM_CYCLES \u6B21\uFF0C\u82E5\u6BCF\u6B21\u90FD\u8FD4\u56DE SUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF1B\r\n * \u82E5\u5B50\u8282\u70B9\u67D0\u6B21\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u4E0D\u518D\u91CD\u590D\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u7ACB\u5373\u8FD4\u56DEFAILURE\uFF1B\r\n * \u82E5\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u4E5F\u8FD4\u56DERUNNING\u3002\r\n */\r\nexport class BTRepeatNode extends BTDecoratorNode {\r\n    private num_cycles: number = -1;\r\n    private try_index: number;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.try_index = 0;\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n        if (data.hasOwnProperty('num')) {\r\n            // @ts-ignore\r\n            this.num_cycles = data['num'] || 1;\r\n        }\r\n        this.num_cycles = isNaN(this.num_cycles) ? -1 : this.num_cycles;\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n\r\n        while (this.try_index < this.num_cycles || this.num_cycles == -1) {\r\n            const child_state = this.getChild()!.evaluate();\r\n\r\n            switch (child_state) {\r\n                case BTNodeStatus.SUCCESS:\r\n                    this.try_index++;\r\n                    this.haltChild();\r\n                    break;\r\n                case BTNodeStatus.FAILURE:\r\n                    this.try_index = 0;\r\n                    this.haltChild();\r\n                    return BTNodeStatus.FAILURE;\r\n\r\n                case BTNodeStatus.RUNNING:\r\n                    return BTNodeStatus.RUNNING;\r\n\r\n                default:\r\n                    throw new Error('A child node must never return IDLE');\r\n            }\r\n        }\r\n        this.try_index = 0;\r\n        return BTNodeStatus.SUCCESS;\r\n    }\r\n\r\n    halt() {\r\n        this.try_index = 0;\r\n        super.halt();\r\n    }\r\n}\r\n", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DESUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\uFF1B\r\n * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u518D\u6B21\u5C1D\u8BD5\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u76F4\u5230\u5C1D\u8BD5\u4E86num_attempts\u6B21\uFF1B\r\n */\r\nexport class BTRetryNode extends BTDecoratorNode {\r\n\r\n    private max_attempts_: number = 1;\r\n\r\n    private try_index: number;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.try_index = 0;\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n        if (data.hasOwnProperty('num')) {\r\n            // @ts-ignore\r\n            this.max_attempts_ = data['num'];\r\n        }\r\n    }\r\n\r\n    halt() {\r\n        this.try_index = 0;\r\n        super.halt();\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        this.status = BTNodeStatus.RUNNING;\r\n        while (this.try_index < this.max_attempts_ || this.max_attempts_ == -1) {\r\n            const child_state = this.getChild()!.evaluate();\r\n            switch (child_state) {\r\n                case BTNodeStatus.SUCCESS: {\r\n                    this.try_index = 0;\r\n                    this.haltChild();\r\n                    return BTNodeStatus.SUCCESS;\r\n                }\r\n                case BTNodeStatus.FAILURE:\r\n                    this.try_index++;\r\n                    this.haltChild();\r\n                    break;\r\n                case BTNodeStatus.RUNNING:\r\n                    return BTNodeStatus.RUNNING;\r\n                default:\r\n                    throw new Error('A child node must never return IDLE');\r\n            }\r\n        }\r\n\r\n        this.try_index = 0;\r\n        return BTNodeStatus.FAILURE;\r\n    }\r\n}\r\n", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\nimport { BTDecoratorNode } from \"./BTDecoratorNode\";\r\n\r\n/**\r\n * \u5728\u8BBE\u7F6E\u7684msec \u6BEB\u79D2\u5185\uFF0C\u8FD4\u56DE\u5B50\u8282\u70B9\u6267\u884C\u7684\u72B6\u6001\u3002\r\n * \u82E5\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\u6216SUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\u3002\r\n * \u5982\u679C\u8D85\u65F6\uFF0C\u7EC8\u6B62\u5B50\u8282\u70B9\u6267\u884C\uFF0C\u5E76\u8FD4\u56DEFAILURE\u3002\r\n */\r\nexport class BTTimeOutNode extends BTDecoratorNode {\r\n\r\n    private timerHandler: number | undefined;\r\n    private child_halted: boolean;\r\n    private msec: number = 0;\r\n    private timeout_started: boolean;\r\n\r\n    constructor(name: string, blackboard: BTBlackboard) {\r\n        super(name, blackboard);\r\n        this.child_halted = false;\r\n        this.timeout_started = false;\r\n    }\r\n\r\n    init(data: IBTNodeConfig): void {\r\n        if (data.hasOwnProperty('msec')) {\r\n            // @ts-ignore\r\n            this.msec = data['msec'];\r\n        }\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        if (!this.timeout_started) {\r\n            this.timeout_started = true;\r\n            this.status = BTNodeStatus.RUNNING;\r\n            this.child_halted = false;\r\n\r\n            if (this.msec > 0) {\r\n                this.timerHandler = setTimeout(() => {\r\n                    if (this.getChild()!.status == BTNodeStatus.RUNNING) {\r\n                        this.child_halted = true;\r\n                        this.haltChild();\r\n                    }\r\n                }, this.msec);\r\n            }\r\n        }\r\n\r\n        if (this.child_halted) {\r\n            this.timeout_started = false;\r\n            return BTNodeStatus.FAILURE;\r\n        } else {\r\n            const child_status = this.getChild()!.evaluate();\r\n            if (child_status != BTNodeStatus.RUNNING) {\r\n                this.timeout_started = false;\r\n                if (this.timerHandler) {\r\n                    clearTimeout(this.timerHandler);\r\n                    this.timerHandler = undefined;\r\n                }\r\n            }\r\n            return child_status;\r\n        }\r\n    }\r\n}\r\n", "import { BTNodeStatus } from \"./BTNodeStatus\";\r\nimport { BTNodeType } from \"./BTNodeType\";\r\nimport { BTControlNode } from \"./controls/BTControlNode\";\r\nimport { BTDecoratorNode } from \"./decorators/BTDecoratorNode\";\r\nimport { IBTNode } from \"./interfaces/IBTNode\";\r\n\r\n\r\n\r\n\r\n/**\r\n * \u884C\u4E3A\u6811\r\n */\r\nexport class BTUtils {\r\n\r\n\r\n    /**\r\n     * \u9012\u5F52\u904D\u5386\u884C\u4E3A\u6811\u8282\u70B9\uFF0C\u5E76\u5BF9\u6BCF\u4E2A\u8282\u70B9\u6267\u884C\u6307\u5B9A\u51FD\u6570\u3002\r\n     *\r\n     * @param root \u884C\u4E3A\u6811\u6839\u8282\u70B9\u3002\r\n     * @param visitor \u8BBF\u95EE\u51FD\u6570\uFF0C\u7528\u4E8E\u5904\u7406\u6BCF\u4E2A\u8282\u70B9\u3002\r\n     * @throws \u5F53\u6839\u8282\u70B9\u4E3Anull\u65F6\uFF0C\u629B\u51FA\u5F02\u5E38\u3002\r\n     */\r\n    static applyRecursiveVisitor<T>(root: IBTNode, visitor: (node: IBTNode) => void) {\r\n        if (!root) throw new Error(\"root is null\");\r\n        visitor(root);\r\n        if (root.type == BTNodeType.CONTROL) {\r\n            const controlNode = root as BTControlNode;\r\n            for (let index = 0; index < controlNode.numChildren; index++) {\r\n                const child = controlNode.getChild(index);\r\n                this.applyRecursiveVisitor(child, visitor);\r\n            }\r\n        } else if (root.type == BTNodeType.DECORATOR) {\r\n            const decoratorNode = root as BTDecoratorNode;\r\n            this.applyRecursiveVisitor(decoratorNode.getChild()!, visitor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u9012\u5F52\u6253\u5370\u6811\u5F62\u7ED3\u6784\r\n     *\r\n     * @param root \u6811\u7684\u6839\u8282\u70B9\r\n     * @returns \u8FD4\u56DE\u6811\u7684\u5B57\u7B26\u4E32\u8868\u793A\r\n     */\r\n    static printTreeRecursively<T>(root: IBTNode): string {\r\n        if (!root) return \"\";\r\n        const endl = '\\n';\r\n        let stream = '';\r\n        let recursivePrint = (indent: number, node: IBTNode) => {\r\n            for (let i = 0; i < indent; i++) {\r\n                stream += '   ';\r\n            }\r\n            if (!node) {\r\n                stream += '!null!' + endl;\r\n                return;\r\n            }\r\n            let status = '';\r\n            switch (node.status) {\r\n                case BTNodeStatus.FAILURE:\r\n                    status = 'failure';\r\n                    break;\r\n                case BTNodeStatus.RUNNING:\r\n                    status = 'running';\r\n                    break;\r\n                case BTNodeStatus.SUCCESS:\r\n                    status = 'success';\r\n                    break;\r\n            }\r\n            stream += \"[\" + status + \"]\" + node.name + endl\r\n            indent++;\r\n\r\n            if (node.type == BTNodeType.CONTROL) {\r\n                const controlNode = node as BTControlNode;\r\n                for (let index = 0; index < controlNode.numChildren; index++) {\r\n                    const child = controlNode.getChild(index);\r\n                    recursivePrint(indent, child);\r\n                }\r\n            } else if (node.type == BTNodeType.DECORATOR) {\r\n                const decoratorNode = node as BTDecoratorNode;\r\n                recursivePrint(indent, decoratorNode.getChild()!);\r\n            }\r\n        };\r\n\r\n        stream += '----------------' + endl;\r\n        recursivePrint(0, root);\r\n        stream += '----------------' + endl;\r\n        return stream;\r\n    }\r\n}", "\r\n\r\n/**\r\n * \u8282\u70B9KEY\r\n */\r\nexport enum BTNodeKeys {\r\n   //----------------------\u63A7\u5236\u8282\u70B9-----------------------\r\n   /**\r\n    * \u6309\u4ECE\u5DE6\u5230\u53F3\u7684\u987A\u5E8F\u4F9D\u6B21\u6267\u884C\u5B50\u8282\u70B9\u3002\r\n    * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8FD4\u56DERUNNING\uFF0C\u4E14\u4E0B\u6B21tick()\u65F6\u4E4B\u524D\u7684\u5B50\u8282\u70B9\u4E0D\u4F1A\u518D\u6267\u884C\u3002\r\n    * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u7ACB\u5373\u6267\u884C\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\uFF08\u4E0D\u4F1A\u7B49\u4E0B\u4E00\u6B21tick()\uFF09\u3002\r\n    * \u5982\u679C\u6240\u6709\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u8FD4\u56DESUCCESS\u3002\r\n    */\r\n   SEQUENCE = \"sequence\",\r\n   /**\r\n    * \u5C1D\u8BD5\u4F9D\u6B21\u6267\u884C\u5176\u6240\u6709\u5B50\u8282\u70B9\uFF0C\u5E76\u4E14\u6BCF\u4E2A\u5B50\u8282\u70B9\u53EA\u6709\u5728\u6210\u529F\u6267\u884C\u540E\u624D\u4F1A\u7EE7\u7EED\u5230\u4E0B\u4E00\u4E2A\u3002\r\n    * \u5982\u679C\u4EFB\u4F55\u4E00\u4E2A\u5B50\u8282\u70B9\u5931\u8D25\uFF0C\u6574\u4E2A\u5E8F\u5217\u5931\u8D25\u3002\r\n    */\r\n   ReactiveSequence = \"reactiveSequence\",\r\n   /** \u540CSequenceNode\uFF0C\u4E0D\u540C\u4E4B\u5904\u5728\u4E8E\u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u8FD4\u56DEFAILURE\uFF0C\u7EC8\u6B62\u6240\u6709\u8282\u70B9\u7684\u6267\u884C\u3002\r\n   * \u4F46\u4E0D\u590D\u4F4Dcurrent_child_idx_\u3002\u6240\u4EE5\u5F53\u518D\u6B21tick()\u65F6\uFF0C\u4ECEFAILURE\u7684\u5B50\u8282\u70B9\u5F00\u59CB\u3002 */\r\n   SequenceStar = \"sequenceStar\",\r\n   /**\r\n    * \u5F53\u8FD4\u56DESUCCESS\u7684\u5B50\u8282\u70B9\u4E2A\u6570>=THRESHOLD_SUCCESS\u65F6\uFF0C\u8FD4\u56DESUCCESS\u3002\r\n    * \u5F53\u8FD4\u56DEFAILURE\u7684\u5B50\u8282\u70B9\u4E2A\u6570>=THRESHOLD_FAILURE\u65F6\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n    * \u5F53\u7A0B\u5E8F\u5224\u65AD\u7EDD\u4E0D\u53EF\u80FDSUCCESS\u65F6\uFF0C\u8FD4\u56DEFAILURE\u3002\u5982 failure_children_num > children_count - success_threshold_\u3002\r\n    */\r\n   PARALLEL = \"parallel\",\r\n   /**\r\n   * \u5728\u52FE\u9009\u7B2C\u4E00\u4E2A\u5B50\u8282\u70B9\u4E4B\u524D\uFF0C\u8282\u70B9\u72B6\u6001\u53D8\u4E3ARUNNING\u3002\r\n   * \u5982\u679C\u4E00\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u5219\u56DE\u9000\u6807\u8BB0\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\u3002\r\n   * \u5982\u679C\u6700\u540E\u4E00\u4E2A\u5B50\u8FDB\u7A0B\u4E5F\u8FD4\u56DEFAILURE\uFF0C\u90A3\u4E48\u6240\u6709\u7684\u5B50\u8FDB\u7A0B\u90FD\u505C\u6B62\uFF0C\u56DE\u9000\u8FDB\u7A0B\u8FD4\u56DEFAILURE\u3002\r\n   * \u5982\u679C\u5B50\u8FDB\u7A0B\u8FD4\u56DESUCCESS\uFF0C\u5219\u505C\u6B62\u5E76\u8FD4\u56DESUCCESS\u3002\u6240\u6709\u7684\u5B69\u5B50\u90FD\u505C\u4E0B\u6765\u4E86\u3002\r\n   */\r\n   FALLBACK = \"fallback\",\r\n   /**\r\n   * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8FD4\u56DERUNNING\uFF0C\u4E14\u4E0B\u6B21tick()\u65F6\u4E4B\u524D\u7684\u5B50\u8282\u70B9\u4F1A\u518D\u6B21\u6267\u884C\uFF0Creactive\u6240\u5728\u3002\r\n   * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\uFF0C\u4E14\u8FD4\u56DESUCCESS\u3002\r\n   * \u5982\u679C\u67D0\u4E2A\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u7ACB\u5373\u6267\u884C\u4E0B\u4E00\u4E2A\u5B50\u8282\u70B9\uFF08\u4E0D\u4F1A\u7B49\u4E0B\u4E00\u6B21tick()\uFF09\u3002\u5982\u679C\u6240\u6709\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n   */\r\n   ReactiveFallback = \"reactiveFallback\",\r\n   /**\r\n   * \u67092\u62163\u4E2A\u5B50\u8282\u70B9\uFF0Cnode1\u5C31\u662Fif\u5224\u65AD\u7684\u6761\u4EF6\u3002\r\n   * \u5982\u679Cnode1\u8FD4\u56DESUCCESS\uFF0C\u90A3\u4E48node2\u6267\u884C\uFF1B\r\n   * \u5426\u5219\uFF0Cnode3\u6267\u884C\u3002\r\n   * \u5982\u679C\u6CA1\u6709node3\uFF0C\u8FD4\u56DEFAILURE\u3002\r\n   * \u8BE5\u7ED3\u70B9not reactive\uFF0C\r\n   * \u4F53\u73B0\u5728\u4E00\u65E6node1\u4E0D\u8FD4\u56DERUNNING\u4E86\uFF0C\u5C31\u8FDB\u5165\u4E86node2\u6216node3\u7684\u6267\u884C\uFF0C\u4EE5\u540Etick()\u4E0D\u4F1A\u518D\u6267\u884Cnode1\u4E86\uFF0C\u4E5F\u5373\u4E0D\u4F1A\u518D\u68C0\u67E5if\u6761\u4EF6\u7684\u53D8\u5316\u3002\r\n   */\r\n   IfThenElseNode = \"ifThenElse\",\r\n   /**\r\n   * \u662FIfThenElseNode\u7684reactive\u7248\u672C\u3002\r\n   * reactive\u4F53\u73B0\u5728\u6BCF\u6B21tick()\u90FD\u4F1A\u6267\u884Cnode1\uFF0C\u5373\u68C0\u67E5if\u6761\u4EF6\u7684\u53D8\u5316\u3002\r\n   * \u82E5node1\u8FD4\u56DE\u503C\u6709SUCCESS\u3001FAILURE\u7684\u5207\u6362\u53D8\u5316\uFF0C\u5C31\u4F1A\u6253\u65ADnode2\u6216node3\u7684\u6267\u884C\uFF0C\u91CD\u65B0\u9009\u62E9\u5BF9\u5E94\u7684node\u3002\r\n   */\r\n   WhileDoElseNode = \"whileDoElse\",\r\n   //----------------------\u88C5\u9970\u8282\u70B9-----------------------\r\n\r\n   /**\r\n    * \u5EF6\u8FDF\u6307\u5B9A\u65F6\u95F4\u540E\u6267\u884C\u5B50\u8282\u70B9\r\n    */\r\n   Delay = \"delay\",\r\n   /**\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\u5426\u5219\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DEFAILURE\uFF0C\u5373\u5F3A\u5236\u8FD4\u56DE\u5931\u8D25\u72B6\u6001\u3002\r\n   */\r\n   ForceFailure = \"forceFailure\",\r\n   /**\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\u5426\u5219\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u5373\u5F3A\u5236\u8FD4\u56DE\u6210\u529F\u72B6\u6001\u3002\r\n   */\r\n   ForceSuccess = \"forceSuccess\",\r\n   /**\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DESUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DEFAILURE\uFF1B\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF1B\r\n   * \u5373\u5BF9\u5B50\u8282\u70B9\u7684\u6267\u884C\u7ED3\u679C\u53D6\u53CD\u3002\r\n   */\r\n   Inverter = \"inverter\",\r\n   /**\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\u6216SUCCESS\uFF0C\u4E0B\u6B21tick()\u7EE7\u7EED\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u76F4\u5230\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\u3002\r\n   */\r\n   KeepRunningUntilFailure = \"keepRunningUntilFailure\",\r\n   /**\r\n   * \u91CD\u590D\u6267\u884C\u5B50\u8282\u70B9NUM_CYCLES \u6B21\uFF0C\u82E5\u6BCF\u6B21\u90FD\u8FD4\u56DE SUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF1B\r\n   * \u82E5\u5B50\u8282\u70B9\u67D0\u6B21\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u4E0D\u518D\u91CD\u590D\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u7ACB\u5373\u8FD4\u56DEFAILURE\uFF1B\r\n   * \u82E5\u5B50\u8282\u70B9\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u4E5F\u8FD4\u56DERUNNING\u3002\r\n   */\r\n   Repeat = \"repeat\",\r\n   /**\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DERUNNING\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DERUNNING\uFF1B\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DESUCCESS\uFF0C\u8BE5\u8282\u70B9\u8FD4\u56DESUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\uFF1B\r\n   * \u5982\u679C\u5B50\u8282\u70B9\u6267\u884C\u540E\u8FD4\u56DEFAILURE\uFF0C\u8BE5\u8282\u70B9\u518D\u6B21\u5C1D\u8BD5\u6267\u884C\u5B50\u8282\u70B9\uFF0C\u76F4\u5230\u5C1D\u8BD5\u4E86num_attempts\u6B21\uFF1B\r\n   */\r\n   Retry = \"retry\",\r\n   /**\r\n   * \u5728\u8BBE\u7F6E\u7684msec \u6BEB\u79D2\u5185\uFF0C\u8FD4\u56DE\u5B50\u8282\u70B9\u6267\u884C\u7684\u72B6\u6001\u3002\r\n   * \u82E5\u5B50\u8282\u70B9\u8FD4\u56DEFAILURE\u6216SUCCESS\uFF0C\u4E0D\u518D\u6267\u884C\u3002\r\n   * \u5982\u679C\u8D85\u65F6\uFF0C\u7EC8\u6B62\u5B50\u8282\u70B9\u6267\u884C\uFF0C\u5E76\u8FD4\u56DEFAILURE\u3002\r\n   */\r\n   TimeOut = \"timeout\",\r\n}", "import { BTBlackboard } from \"../BTBlackboard\";\r\nimport { BTNodeStatus } from \"../BTNodeStatus\";\r\nimport { BTControlNode } from \"./BTControlNode\";\r\n\r\n/**\r\n * \u5C1D\u8BD5\u4F9D\u6B21\u6267\u884C\u5176\u6240\u6709\u5B50\u8282\u70B9\uFF0C\u5E76\u4E14\u6BCF\u4E2A\u5B50\u8282\u70B9\u53EA\u6709\u5728\u6210\u529F\u6267\u884C\u540E\u624D\u4F1A\u7EE7\u7EED\u5230\u4E0B\u4E00\u4E2A\u3002\r\n * \u5982\u679C\u4EFB\u4F55\u4E00\u4E2A\u5B50\u8282\u70B9\u5931\u8D25\uFF0C\u6574\u4E2A\u5E8F\u5217\u5931\u8D25\u3002\r\n */\r\nexport class BTReactiveSequence extends BTControlNode {\r\n\r\n    constructor(name: string,blackboard: BTBlackboard) {\r\n        super(name,blackboard);\r\n    }\r\n\r\n    tick(): BTNodeStatus {\r\n        let success_count = 0;\r\n        let running_count = 0;\r\n\r\n        for (let index = 0; index < this.numChildren; index++) {\r\n            const child_node = this.$children[index];\r\n            const child_status = child_node.evaluate();\r\n            switch (child_status) {\r\n                case BTNodeStatus.RUNNING:\r\n                    running_count++;\r\n                    this.haltChildren(index + 1);\r\n                    return BTNodeStatus.RUNNING;\r\n                case BTNodeStatus.FAILURE:\r\n                    this.haltChildren();\r\n                    return BTNodeStatus.FAILURE;\r\n                case BTNodeStatus.SUCCESS:\r\n                    success_count++;\r\n                    break;\r\n                case BTNodeStatus.IDLE:\r\n                    throw new Error(\"ReactiveSequence: child node is idle\");\r\n                default:\r\n                    throw new Error(\"ReactiveSequence: child node status is invalid\");\r\n            }\r\n        }\r\n        if (success_count == this.numChildren) {\r\n            this.haltChildren();\r\n            return BTNodeStatus.SUCCESS;\r\n        }\r\n        return BTNodeStatus.RUNNING;\r\n    }\r\n}", "import { BTNodeKeys } from \"./BTNodeKeys\";\r\nimport { BTNodeType } from \"./BTNodeType\";\r\nimport { BTControlNode } from \"./controls/BTControlNode\";\r\nimport { BTFallbackNode } from \"./controls/BTFallbackNode\";\r\nimport { BTIfThenElseNode } from \"./controls/BTIfThenElseNode\";\r\nimport { BTParallelNode } from \"./controls/BTParallelNode\";\r\nimport { BTReactiveFallback } from \"./controls/BTReactiveFallback\";\r\nimport { BTReactiveSequence } from \"./controls/BTReactiveSequence\";\r\nimport { BTSequenceNode } from \"./controls/BTSequenceNode\";\r\nimport { BTSequenceStarNode } from \"./controls/BTSequenceStarNode\";\r\nimport { BTWhileDoElseNode } from \"./controls/BTWhileDoElseNode\";\r\nimport { BTDecoratorNode } from \"./decorators/BTDecoratorNode\";\r\nimport { BTDelayNode } from \"./decorators/BTDelayNode\";\r\nimport { BTForceFailureNode } from \"./decorators/BTForceFailureNode\";\r\nimport { BTForceSuccessNode } from \"./decorators/BTForceSuccessNode\";\r\nimport { BTInverterNode } from \"./decorators/BTInverterNode\";\r\nimport { BTKeepRunningUntilFailureNode } from \"./decorators/BTKeepRunningUntilFailureNode\";\r\nimport { BTRepeatNode } from \"./decorators/BTRepeatNode\";\r\nimport { BTRetryNode } from \"./decorators/BTRetryNode\";\r\nimport { BTTimeOutNode } from \"./decorators/BTTimeOutNode\";\r\nimport { IBTNode } from \"./interfaces/IBTNode\";\r\nimport { IBTNodeConfig } from \"./interfaces/IBTNodeConfig\";\r\n\r\n\r\n\r\nexport class BTContext {\r\n\r\n    private class_map = new Map<string, new (name: string, blackboard: any) => IBTNode>();\r\n\r\n    constructor() {\r\n        this.$init();\r\n    }\r\n\r\n\r\n    protected $init(): void {\r\n        //controls\r\n        this.register(BTNodeKeys.SEQUENCE, BTSequenceNode);\r\n        this.register(BTNodeKeys.ReactiveSequence, BTReactiveSequence);\r\n        this.register(BTNodeKeys.SequenceStar, BTSequenceStarNode);\r\n        this.register(BTNodeKeys.IfThenElseNode, BTIfThenElseNode);\r\n        this.register(BTNodeKeys.WhileDoElseNode, BTWhileDoElseNode);\r\n\r\n        this.register(BTNodeKeys.PARALLEL, BTParallelNode);\r\n        this.register(BTNodeKeys.FALLBACK, BTFallbackNode);\r\n        this.register(BTNodeKeys.ReactiveFallback, BTReactiveFallback);\r\n\r\n        this.register(BTNodeKeys.Delay, BTDelayNode);\r\n        this.register(BTNodeKeys.ForceFailure, BTForceFailureNode);\r\n        this.register(BTNodeKeys.ForceSuccess, BTForceSuccessNode);\r\n        this.register(BTNodeKeys.KeepRunningUntilFailure, BTKeepRunningUntilFailureNode);\r\n        this.register(BTNodeKeys.Inverter, BTInverterNode);\r\n        this.register(BTNodeKeys.Repeat, BTRepeatNode);\r\n        this.register(BTNodeKeys.Retry, BTRetryNode);\r\n        this.register(BTNodeKeys.TimeOut, BTTimeOutNode);\r\n    }\r\n\r\n    /**\r\n     * \u6CE8\u518C\u8282\u70B9\u7C7B\r\n     * @param name \r\n     * @param clazz \r\n     */\r\n    register(name: string, clazz: new (name: string, blackboard: any) => IBTNode): void {\r\n        this.class_map.set(name.toLocaleLowerCase(), clazz);\r\n    }\r\n\r\n    /**\r\n     * \u6CE8\u9500\u8282\u70B9\u7C7B\r\n     * @param name \r\n     */\r\n    unregister(name: string): void {\r\n        this.class_map.delete(name.toLocaleLowerCase());\r\n    }\r\n\r\n    /**\r\n     * \u521B\u5EFA\u8282\u70B9\r\n     * @param data \r\n     * @returns \r\n     */\r\n    createNode<T>(data: IBTNodeConfig, blackboard: any): IBTNode {\r\n        const clazz = this.class_map.get(data.type.toLocaleLowerCase());\r\n        if (!clazz) {\r\n            throw new Error(`${data.name, data.type}\u8282\u70B9\u4E0D\u5B58\u5728`);\r\n        }\r\n        let result = new clazz(data.name, blackboard);\r\n        result.init(data);\r\n        const isControl = result.type == BTNodeType.CONTROL;\r\n        const isDecorator = result.type == BTNodeType.DECORATOR;\r\n        if (data.children) {\r\n            for (let index = 0; index < data.children.length; index++) {\r\n                const child_data = data.children[index];\r\n                if (isControl) {\r\n                    const control = result as BTControlNode;\r\n                    control.addChild(this.createNode(child_data, blackboard));\r\n                }\r\n                if (isDecorator) {\r\n                    const decorator = result as BTDecoratorNode;\r\n                    if (index > 0) {\r\n                        throw new Error(\"\u88C5\u9970\u8282\u70B9\u53EA\u80FD\u6709\u4E00\u4E2A\u5B50\u8282\u70B9=>\" + data);\r\n                    }\r\n                    decorator.setChild(this.createNode(child_data, blackboard));\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * \u6E05\u7406\r\n     */\r\n    clear(): void {\r\n        this.class_map.clear();\r\n    }\r\n\r\n    destroy(): void {\r\n        this.clear();\r\n    }\r\n}", "import { EventDispatcher } from \"dream-cc-core\";\r\n\r\n\r\n\r\n/**\r\n * \u884C\u4E3A\u6811\u9ED1\u677F\r\n */\r\nexport class BTBlackboard extends EventDispatcher {\r\n\r\n    private __datas: Map<any, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.__datas = new Map<any, any>();\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u6570\u636E\r\n     * @param key \r\n     * @returns \r\n     */\r\n    get<T>(key: any): T {\r\n        return this.__datas.get(key) as T;\r\n    }\r\n\r\n    /**\r\n     * \u5224\u65AD\u662F\u5426\u5B58\u5728\u6570\u636E\r\n     * @param key \r\n     */\r\n    has(key: any): boolean {\r\n        return this.__datas.has(key);\r\n    }\r\n\r\n    /**\r\n     * \u8BBE\u7F6E\u6570\u636E\r\n     * @param key \r\n     * @param value \r\n     */\r\n    set(key: any, value: any): void {\r\n        this.__datas.set(key, value);\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u6570\u636E\r\n     */\r\n    delete(key: any): void {\r\n        this.__datas.delete(key);\r\n    }\r\n\r\n    /**\r\n     * \u6E05\u7406\u6570\u636E\r\n     */\r\n    clear(): void {\r\n        this.__datas.clear();\r\n    }\r\n\r\n    /**\r\n     * \u9500\u6BC1\r\n     * @returns \r\n     */\r\n    destroy(): boolean {\r\n        this.clear();\r\n        this.__datas = null;\r\n        return true;\r\n    }\r\n}", "import { TickerManager } from \"dream-cc-core\";\r\nimport { ECSEntity } from \"./ECSEntity\";\r\nimport { ECSWorld } from \"./ECSWorld\";\r\nimport { IECSComponent } from \"./IECSComponent\";\r\n\r\n\r\n\r\n/**\r\n * \u7EC4\u4EF6\u62BD\u8C61\u7C7B\r\n */\r\nexport abstract class ECSComponent implements IECSComponent {\r\n\r\n    /**\u6240\u5C5E\u4E16\u754C */\r\n    world: ECSWorld;\r\n\r\n    /**\u6240\u5C5Eentity*/\r\n    entity: ECSEntity;\r\n\r\n    /**\u810F\u6570\u636E\u6807\u8BB0\u56DE\u8C03*/\r\n    dirtySignal: (() => void);\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * \u542F\u7528\u7EC4\u4EF6\r\n     */\r\n    enable(): void {\r\n\r\n    }\r\n\r\n    /**\u6807\u8BB0\u8BE5\u7EC4\u4EF6\u6570\u636E\u4E3A\u810F*/\r\n    markDirtied(): void {\r\n        TickerManager.callNextFrame(this.__nextFrame, this);\r\n    }\r\n\r\n\r\n    private __nextFrame(): void {\r\n        this.dirtySignal && this.dirtySignal();\r\n    }\r\n\r\n    /**\u91CD\u7F6E*/\r\n    reset(): void {\r\n        TickerManager.clearNextFrame(this.__nextFrame, this);\r\n        this.dirtySignal = null;\r\n        this.world = null;\r\n        this.entity = undefined;\r\n    }\r\n\r\n    destroy(): boolean {\r\n        this.reset();\r\n        return true;\r\n    }\r\n}", "import { ECSEntity } from \"./ECSEntity\";\r\nimport { IECSComponent } from \"./IECSComponent\";\r\n\r\n/**\r\n * \u5339\u914D\u5668\r\n */\r\nexport class ECSMatcher {\r\n    /**\r\n     * \u5168\u90E8\u5305\u542B\u6216\u4EFB\u610F\u5305\u542B\r\n     */\r\n    matcher: MatcherAllOf | MatcherAnyOf | undefined = undefined;\r\n\r\n    /**\r\n     * \u53EF\u9009\u4EFB\u610F\u5305\u542B\r\n     */\r\n    matcherAnyOf: MatcherAnyOf | undefined = undefined;\r\n\r\n    /**\r\n     * \u4E0D\u80FD\u5305\u542B\u7684\r\n     */\r\n    matcherNoneOf: MatcherNoneOf | undefined = undefined;\r\n\r\n    /**\r\n     * \u7F16\u7EC4\u6240\u5339\u914D\u7684\u5143\u7D20(\u5185\u90E8\u63A5\u53E3)\r\n     */\r\n    private __entitys: Set<ECSEntity> = new Set<ECSEntity>();\r\n\r\n    /**\r\n     * \u5173\u8054\u7EC4\u4EF6\r\n     */\r\n    _dependencies = new Set<new () => IECSComponent>();\r\n\r\n    constructor(allOrAny: MatcherAllOf | MatcherAnyOf, matcherAnyOf?: MatcherAllOf | MatcherAnyOf, none?: MatcherNoneOf) {\r\n        this.matcher = allOrAny;\r\n        this.matcherAnyOf = matcherAnyOf;\r\n        this.matcherNoneOf = none;\r\n        for (let index = 0; index < allOrAny.types.length; index++) {\r\n            const type = allOrAny.types[index];\r\n            this._dependencies.add(type);\r\n        }\r\n        if (matcherAnyOf) {\r\n            for (let index = 0; index < matcherAnyOf.types.length; index++) {\r\n                const type = matcherAnyOf.types[index];\r\n                this._dependencies.add(type);\r\n            }\r\n        }\r\n        if (none) {\r\n            for (let index = 0; index < none.types.length; index++) {\r\n                const type = none.types[index];\r\n                this._dependencies.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    get entitys(): Set<ECSEntity> {\r\n        return this.__entitys;\r\n    }\r\n\r\n    has(entity: ECSEntity): boolean {\r\n        return this.__entitys.has(entity);\r\n    }\r\n\r\n    add(entity: ECSEntity): void {\r\n        this.__entitys.add(entity);\r\n    }\r\n\r\n    remove(entity: ECSEntity): void {\r\n        this.__entitys.delete(entity);\r\n    }\r\n\r\n    clear(): void {\r\n        this.__entitys.clear();\r\n    }\r\n\r\n    destroy(): void {\r\n        this.matcher = undefined;\r\n        this.matcherNoneOf = undefined;\r\n        this.__entitys = null;\r\n        this._dependencies.clear();\r\n        this._dependencies = null;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * \u5339\u914D\u5668\r\n */\r\nexport class Matcher {\r\n\r\n    types: Array<new () => IECSComponent>;\r\n\r\n    constructor(types: Array<new () => IECSComponent>) {\r\n        this.types = types;\r\n    }\r\n}\r\n\r\n/**\r\n * \u5FC5\u987B\u6240\u6709\u6210\u7ACB\r\n */\r\nexport class MatcherAllOf extends Matcher {\r\n\r\n}\r\n\r\n/**\r\n * \u4EFB\u610F\u4E00\u4E2A\u6210\u7ACB\r\n */\r\nexport class MatcherAnyOf extends Matcher {\r\n\r\n}\r\n\r\n/**\r\n * \u4E0D\u80FD\u5305\u542B\r\n */\r\nexport class MatcherNoneOf extends Matcher {\r\n\r\n}", "import { Dictionary, IPoolable, Pool } from \"dream-cc-core\";\r\nimport { ECSEntity } from \"./ECSEntity\";\r\nimport { ECSWorld } from \"./ECSWorld\";\r\nimport { SparseSet } from \"./SparseSet\";\r\n\r\nexport class ECSStorage<T extends IPoolable> {\r\n\r\n    private __uidMapping: Dictionary<ECSEntity, number>;\r\n    private __values: Map<new () => any, Array<T | null>>;\r\n    private __entitySets: Array<Set<new () => T>>;\r\n    private __poolRecord: Set<new () => T>;\r\n    private __sparseSet: SparseSet;\r\n    private __freelist: Array<number>;\r\n    private __entityIndex: number = 0;\r\n\r\n    constructor(maxCount: number) {\r\n        this.__uidMapping = new Dictionary<ECSEntity, number>();\r\n        this.__sparseSet = new SparseSet(maxCount);\r\n        this.__poolRecord = new Set<new () => T>();\r\n        this.__values = new Map<new () => any, Array<T | null>>();\r\n        this.__entitySets = new Array<Set<new () => T>>(maxCount);\r\n        this.__freelist = [];\r\n    }\r\n\r\n    /**\r\n     * \u6DFB\u52A0\r\n     * @param id \r\n     */\r\n    add(id: ECSEntity): void {\r\n        if (this.__uidMapping.has(id)) {\r\n            throw new Error(\"\u91CD\u590D\u6DFB\u52A0:\" + id)\r\n        }\r\n        let entity: number;\r\n        if (this.__freelist.length > 0) {\r\n            entity = this.__freelist.shift();\r\n        } else {\r\n            entity = this.__entityIndex;\r\n            this.__entityIndex++;\r\n        }\r\n        // console.log(\"\u6DFB\u52A0entity:\", id, entity);\r\n        this.__uidMapping.set(id, entity);\r\n        this.__sparseSet.add(entity);\r\n        const idx = this.__sparseSet.getPackedIdx(entity);\r\n        if (this.__entitySets[idx] == null) {\r\n            this.__entitySets[idx] = new Set<new () => T>();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u662F\u5426\u5305\u542B\r\n     * @param id \r\n     * @returns \r\n     */\r\n    has(id: ECSEntity): boolean {\r\n        return this.__uidMapping.has(id);\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\r\n     * @param id \r\n     * @returns \r\n     */\r\n    remove(id: ECSEntity): void {\r\n        if (!this.__uidMapping.has(id)) {\r\n            throw new Error(id + \"\u4E0D\u5B58\u5728!\");\r\n        }\r\n        let entity = this.__uidMapping.get(id);\r\n        // console.log(\"\u5220\u9664entity:\", id, entity);\r\n        let lastEntity = this.__sparseSet.lastEntity;\r\n        const deleteIdx = this.__sparseSet.getPackedIdx(entity);\r\n        const lastIdx = this.__sparseSet.getPackedIdx(lastEntity);\r\n        //\u5220\u9664\u5173\u8054\u503C\r\n        let values = Array.from(this.getEntitySet(id));\r\n        //\u6392\u5E8F\r\n        if (ECSWorld.COMPONENT_PRIORITY) {\r\n            values.sort((a, b) => {\r\n                const a_p = ECSWorld.COMPONENT_PRIORITY(a);\r\n                const b_p = ECSWorld.COMPONENT_PRIORITY(b);\r\n                return a_p - b_p;\r\n            });\r\n        }\r\n        for (let i = 0; i < values.length; i++) {\r\n            const com_type = values[i];\r\n            this.removeValue(id, com_type);\r\n        }\r\n        //\u5982\u679C\u5220\u9664\u7684\u5185\u5BB9\u4E0D\u5728\u672B\u5C3E\uFF0C\u5219\u5C06\u672B\u5C3E\u5185\u5BB9\u79FB\u52A8\u5230\u5220\u9664\u4F4D\u7F6E\r\n        if (deleteIdx != lastIdx) {\r\n            let last_set = this.__entitySets[lastIdx];\r\n            if (last_set) {\r\n                for (const type of last_set) {\r\n                    const list = this.__values.get(type);\r\n                    if (list) {\r\n                        list[deleteIdx] = list[lastIdx];\r\n                        list[lastIdx] = null;\r\n                        this.__entitySets[deleteIdx].add(type);\r\n                    }\r\n                }\r\n                last_set.clear();\r\n            }\r\n        }\r\n        this.__uidMapping.delete(id);\r\n        this.__sparseSet.remove(entity);\r\n        this.__freelist.push(entity);\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\r\n     * @param id \r\n     * @param type \r\n     * @returns \r\n     */\r\n    getValue(id: ECSEntity, type: new () => T): T | null {\r\n        let entity = this.__uidMapping.get(id);\r\n        let pIdx = this.__sparseSet.getPackedIdx(entity);\r\n        if (pIdx == this.__sparseSet.invalid) {\r\n            return null;\r\n        }\r\n        let list = this.__values.get(type);\r\n        if (list == null || list.length == 0 || pIdx >= list.length) {\r\n            return null;\r\n        }\r\n        return list[pIdx] as T;\r\n    }\r\n\r\n    /**\r\n     * \u6DFB\u52A0\r\n     * @param id \r\n     * @param type \r\n     * @returns \r\n     */\r\n    addValue(id: ECSEntity, type: new () => T): T {\r\n        if (!this.__uidMapping.has(id)) {\r\n            throw new Error(id + \"\u5BF9\u8C61\u4E0D\u5B58\u5728\uFF01\");\r\n        }\r\n        let entity = this.__uidMapping.get(id);\r\n        // console.log(\"\u6DFB\u52A0\u7EC4\u4EF6\uFF1A\", id, entity, egret.getQualifiedClassName(type));\r\n        if (!this.__sparseSet.contains(entity)) throw new Error(\"\u4E0D\u5B58\u5728:\" + id);\r\n        const pIdx = this.__sparseSet.getPackedIdx(entity);\r\n        let list = this.__values.get(type);\r\n        if (list == null) {\r\n            list = new Array<T>(this.__sparseSet.maxCount);\r\n            this.__values.set(type, list);\r\n        }\r\n        if (list[pIdx] != null) {\r\n            throw new Error(id + \"=>\u91CD\u590D\u6DFB\u52A0:\" + type);\r\n        }\r\n        this.__poolRecord.add(type);//\u8BB0\u5F55\u5206\u914D\u7C7B\u578B\r\n        let result = list[pIdx] = Pool.acquire(type);\r\n        //\u589E\u52A0\u7EC4\u4EF6\u6807\u8BB0\r\n        let entitySet = this.__entitySets[pIdx];\r\n        entitySet.add(type);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * \u662F\u5426\u5305\u542BValue\r\n     * @param id \r\n     * @param type \r\n     */\r\n    hasValue(id: ECSEntity, type: new () => T): boolean {\r\n        if (!this.__uidMapping.has(id)) {\r\n            return false;\r\n        }\r\n        let entity = this.__uidMapping.get(id);\r\n        let pIdx = this.__sparseSet.getPackedIdx(entity);\r\n        let list = this.__values.get(type);\r\n        if (list == null) {\r\n            return false;\r\n        }\r\n        if (list[pIdx] == null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\r\n     * @param id \r\n     * @param type \r\n     * @returns \r\n     */\r\n    removeValue(id: ECSEntity, type: new () => T): T {\r\n        if (!this.__uidMapping.has(id)) {\r\n            throw new Error(id + \"\u4E0D\u5B58\u5728:\");\r\n        }\r\n        let entity = this.__uidMapping.get(id);\r\n        // console.log(\"\u5220\u9664\u7EC4\u4EF6\uFF1A\",id,entity,egret.getQualifiedClassName(type));\r\n        let pIdx = this.__sparseSet.getPackedIdx(entity);\r\n        let list = this.__values.get(type);\r\n        if (list == null || list.length == 0) {\r\n            throw new Error(id + \"=>\u4E0A\u627E\u4E0D\u5230\u8981\u5220\u9664\u7684\u5173\u8054\u5BF9\u8C61:\" + type);\r\n        }\r\n        let result = list[pIdx] as T;\r\n        list[pIdx] = null;\r\n        Pool.release(type, result);\r\n        //\u5220\u9664\u7EC4\u4EF6\u6807\u8BB0\r\n        let entitySet = this.__entitySets[pIdx];\r\n        entitySet.delete(type);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * \u6839\u636E\u7C7B\u578B\u83B7\u53D6\u5217\u8868\r\n     * @param type \r\n     * @returns \r\n     */\r\n    getValues(type: new () => T): Array<T> {\r\n        return Pool.getUsing(type);\r\n    }\r\n\r\n    getEntitySet(id: ECSEntity): Set<new () => T> | null {\r\n        if (!this.__uidMapping.has(id)) {\r\n            return null;\r\n        }\r\n        let entity = this.__uidMapping.get(id);\r\n        let pIdx = this.__sparseSet.getPackedIdx(entity);\r\n        return this.__entitySets[pIdx];\r\n    }\r\n\r\n    /**\r\n     * \u6E05\u7406\r\n     */\r\n    clear(): void {\r\n        this.__entityIndex = 0;\r\n        let ids = this.__uidMapping.getKeys();\r\n        while (ids.length > 0) {\r\n            this.remove(ids.shift() as ECSEntity);\r\n        }\r\n        this.__values.clear();\r\n        this.__freelist.splice(0, this.__freelist.length);\r\n    }\r\n\r\n    /**\u9500\u6BC1 */\r\n    destroy(): void {\r\n        this.__entitySets.splice(0, this.__entitySets.length);\r\n        this.__uidMapping.clear();\r\n        this.__uidMapping = null;\r\n        this.__sparseSet.destroy();\r\n        this.__sparseSet = null;\r\n        for (const element of this.__poolRecord) {\r\n            Pool.destroy(element);\r\n        }\r\n        this.__poolRecord.clear();\r\n        this.__poolRecord = null;\r\n\r\n        this.__values.clear();\r\n        this.__values = null;\r\n    }\r\n\r\n    /**\u65E0\u6548\u503C */\r\n    get invalid(): number {\r\n        return this.__sparseSet.invalid;\r\n    }\r\n\r\n    getIDList(result?: Array<ECSEntity>): Array<ECSEntity> {\r\n        result = result || [];\r\n        this.__uidMapping.getKeys(result);\r\n        return result;\r\n    }\r\n\r\n    get values(): Map<new () => any, Array<T | null>> {\r\n        return this.__values;\r\n    }\r\n}", "import { Dictionary } from \"dream-cc-core\";\r\nimport { ECSEntity } from \"./ECSEntity\";\r\nimport { ECSMatcher, Matcher, MatcherAllOf, MatcherAnyOf } from \"./ECSMatcher\";\r\nimport { ECSStorage } from \"./ECSStorage\";\r\nimport { ECSSystem } from \"./ECSSystem\";\r\nimport { IECSComponent } from \"./IECSComponent\";\r\n\r\n/**\r\n * \u4E16\u754C\r\n */\r\nexport class ECSWorld {\r\n\r\n    /**\u7EC4\u4EF6\u4F18\u5148\u7EA7\uFF08\u7528\u4E8E\u63A7\u5236entity\u5220\u9664\u65F6component\u9500\u6BC1\u7684\u8C03\u7528\u4F18\u5148\u7EA7\uFF09 */\r\n    static COMPONENT_PRIORITY: (com_type: new () => any) => number;\r\n\r\n    static HELP_SYSTEM_LIST: Array<new () => ECSSystem> = [];\r\n\r\n    static HELP_ENTITY_LIST: Array<ECSEntity> = [];\r\n\r\n    private __maxCount: number;\r\n\r\n    /**\u7B49\u5F85\u5220\u9664\u7684entity*/\r\n    private __waitFree: Array<ECSEntity> = [];\r\n\r\n    private __storage: ECSStorage<IECSComponent>;\r\n    private __systems: Dictionary<new () => ECSSystem, ECSSystem>;\r\n\r\n    /**\u7EC4\u4EF6\u5173\u8054\u7684\u7CFB\u7EDF */\r\n    private __componentSystems: Map<new () => IECSComponent, Array<ECSSystem>>;\r\n\r\n    /**\u7CFB\u7EDF\u6392\u5E8F */\r\n    private __system_priority: (sys: ECSSystem) => number;\r\n\r\n    /**\u6807\u8BB0\u7CFB\u7EDF\u9700\u8981\u6392\u5E8F */\r\n    private __need_sort_systems: boolean = false;\r\n    /**\r\n     * \u5F53\u524D\u5220\u9664\u6B63\u5728\u5220\u9664\u7684entity\r\n     */\r\n    private __currentRemoveEntity: ECSEntity | null = null;\r\n    /**\r\n     * \u521D\u59CB\u5316\r\n     * @param maxCount \r\n     */\r\n    constructor(maxCount: number) {\r\n        this.__maxCount = maxCount;\r\n        this.__storage = new ECSStorage<IECSComponent>(this.__maxCount);\r\n        this.__systems = new Dictionary<new () => ECSSystem, ECSSystem>();\r\n        this.__componentSystems = new Map<new () => IECSComponent, Array<ECSSystem>>();\r\n    }\r\n\r\n    /**\u7CFB\u7EDF\u6392\u5E8F\uFF08\u7528\u4E8E\u63A7\u5236system.tick\u7684\u8C03\u7528\u987A\u5E8F\uFF09 */\r\n    set system_priority(fn: (sys_type: ECSSystem) => number) {\r\n        this.__system_priority = fn;\r\n        if (this.__system_priority) {\r\n            this.__need_sort_systems = true;\r\n        }\r\n    }\r\n\r\n    get system_priority(): (sys: ECSSystem) => number {\r\n        return this.__system_priority;\r\n    }\r\n\r\n    /**\r\n     * \u5FC3\u8DF3\r\n     * @param dt \r\n     */\r\n    tick(dt: number): void {\r\n        //\u7CFB\u7EDF\r\n        const systems = this.__systems.elements;\r\n        //\u6392\u5E8F\r\n        if (this.__need_sort_systems && this.__system_priority) {\r\n            systems.sort((a, b) => {\r\n                return this.__system_priority(a) - this.__system_priority(b);\r\n            });\r\n            this.__need_sort_systems = false;\r\n        }\r\n        //\u5220\u9664\r\n        for (let index = 0; index < this.__waitFree.length; index++) {\r\n            const id = this.__waitFree[index];\r\n            this.__currentRemoveEntity = id;\r\n            this.__removeEntity(id);\r\n        }\r\n        this.__currentRemoveEntity = null;\r\n        this.__waitFree.splice(0, this.__waitFree.length);\r\n        for (let index = 0; index < systems.length; index++) {\r\n            const sys = systems[index];\r\n            sys.tick(dt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u521B\u5EFA\r\n     */\r\n    createEntity(entity: ECSEntity): void {\r\n        //\u5982\u679C\u8981\u521B\u5EFA\u7684entity\u5728\u7B49\u5F85\u5220\u9664\u5217\u8868\u4E2D\u65F6\r\n        let findex = this.__waitFree.indexOf(entity);\r\n        if (findex >= 0) {\r\n            //\u5220\u9664entity;\r\n            this.__waitFree.splice(findex, 1);\r\n            this.__removeEntity(entity);\r\n        }\r\n        //\u521B\u5EFAentity\r\n        this.__storage && this.__storage.add(entity);\r\n    }\r\n\r\n    /**\r\n     * \u67E5\u8BE2\u662F\u5426\u5305\u542Bentity\r\n     * @param entity \r\n     * @returns \r\n     */\r\n    hasEntity(entity: ECSEntity): boolean {\r\n        //\u5982\u679C\u5728\u7B49\u5F85\u5220\u9664\u5217\u8868\u4E2D\r\n        if (this.__waitFree.indexOf(entity) >= 0) {\r\n            return false;\r\n        }\r\n        return this.__storage.has(entity);\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664entity\r\n     * @param entity \r\n     * @returns \r\n     */\r\n    removeEntity(entity: ECSEntity): void {\r\n        if (!this.__storage.has(entity)) {\r\n            throw new Error(entity + \" entity\u4E0D\u5B58\u5728\");\r\n        }\r\n        const index = this.__waitFree.indexOf(entity);\r\n        if (index >= 0) {\r\n            return;\r\n        }\r\n        this.__waitFree.push(entity);\r\n    }\r\n\r\n    /**\r\n    * \u7ACB\u523B\u5220\u9664entity\r\n    * @param entity \r\n    */\r\n    private __removeEntity(entity: ECSEntity): void {\r\n        if (!this.__storage.has(entity)) {\r\n            throw new Error(entity + \" entity\u4E0D\u5B58\u5728\");\r\n        }\r\n        let com_set = this.__storage.getEntitySet(entity);\r\n        let com_list = Array.from(com_set);\r\n        //\u5220\u9664\r\n        this.__storage.remove(entity);\r\n        //\u4ECE\u76F8\u5173\u7CFB\u7EDF\u5339\u914D\u8BB0\u5F55\u4E2D\u5220\u9664\r\n        if (com_list.length > 0) {\r\n            for (let index = 0; index < com_list.length; index++) {\r\n                const com_type = com_list[index];\r\n                let sys_list = this.__componentSystems.get(com_type);\r\n                if (sys_list) {\r\n                    for (let index = 0; index < sys_list.length; index++) {\r\n                        const sys = sys_list[index];\r\n                        if (sys.hasEntity(entity)) {\r\n                            sys.removeEntity(entity);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \u6DFB\u52A0\u7EC4\u4EF6\r\n     * @param entity\r\n     * @param type\r\n     * @returns\r\n     */\r\n    addComponent<T extends IECSComponent>(entity: ECSEntity, type: new () => T): T {\r\n        if (entity == this.__currentRemoveEntity) {\r\n            throw new Error(\"\u5220\u9664\u65F6\u6DFB\u52A0\u7EC4\u4EF6\");\r\n        }\r\n        let result = this.__storage.addValue(entity, type);\r\n        result.dirtySignal = () => {\r\n            this.__componentDirty(entity, type);\r\n        }\r\n        //\u8BB0\u5F55\u6240\u5C5E\r\n        result.entity = entity;\r\n        result.world = this;\r\n        result.enable();\r\n        this.__matcher(result.entity, false, true);\r\n        return result as T;\r\n    }\r\n\r\n    /**\r\n     * \u67E5\u8BE2entity\u662F\u5426\u5305\u542B\u7EC4\u4EF6 \r\n     * @param entity \r\n     * @param type \r\n     * @param check_instance    \u662F\u5426\u68C0\u67E5\u7EE7\u627F\u5173\u7CFB\r\n     * @returns \r\n     */\r\n    hasComponent<T extends IECSComponent>(entity: ECSEntity, type: new () => T): boolean {\r\n        let instance_type = this.__getComponentType(entity, type);\r\n        let result = this.__storage.hasValue(entity, instance_type);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u7EC4\u4EF6\r\n     * @param entity \r\n     * @param type \r\n     * @returns \r\n     */\r\n    removeComponent<T extends IECSComponent>(entity: ECSEntity, type: new () => T): T {\r\n        let instance_type = this.__getComponentType(entity, type);\r\n        let result = this.__storage.removeValue(entity, instance_type);\r\n        this.__matcher(entity, false, true);\r\n        return result as T;\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664entity\u4E0A\u7684\u6240\u6709\u7EC4\u4EF6\r\n     * @param entity \r\n     */\r\n    removeComponents(entity: ECSEntity): void {\r\n        let entity_coms = this.__storage.getEntitySet(entity);\r\n        if (!entity_coms) return;\r\n        let elements = Array.from(entity_coms);\r\n        for (let index = 0; index < elements.length; index++) {\r\n            const com_type = elements[index];\r\n            this.removeComponent(entity, com_type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u7EC4\u4EF6\u5728entity\u4E0A\u7684\u5B9E\u4F8B\u7C7B\u578B\r\n     * @param entity \r\n     * @param type \r\n     * @returns \r\n     */\r\n    private __getComponentType(entity: ECSEntity, type: new () => IECSComponent): new () => IECSComponent {\r\n        if (this.__storage.hasValue(entity, type)) {\r\n            return type;\r\n        }\r\n        let entity_coms = this.__storage.getEntitySet(entity);\r\n        if (!entity_coms) return type;\r\n        for (const com_type of entity_coms) {\r\n            const com = this.__storage.getValue(entity, com_type);\r\n            if (com instanceof type) {\r\n                return com_type;\r\n            }\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u7EC4\u4EF6\r\n     * @param entity \r\n     * @param type \r\n     * @returns \r\n     */\r\n    removeComponentIf<T extends IECSComponent>(entity: ECSEntity, type: new () => T): T | null {\r\n        let instance_type = this.__getComponentType(entity, type) || type;\r\n        if (this.hasComponent(entity, instance_type)) {\r\n            let result = this.__storage.removeValue(entity, instance_type);\r\n            this.__matcher(entity, false, true);\r\n            return result as T;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * \u901A\u8FC7\u7EC4\u4EF6\u5B9E\u4F8B\u8FDB\u884C\u5220\u9664\r\n     * @param entity \r\n     * @param com \r\n     * @returns \r\n     */\r\n    removeComponentBy<T extends IECSComponent>(entity: ECSEntity, com: IECSComponent): T {\r\n        let type = com[\"constructor\"] as new () => T;\r\n        let instance_type = this.__getComponentType(entity, type) || type;\r\n        let result = this.__storage.removeValue(entity, instance_type);\r\n        this.__matcher(entity, false, true);\r\n        return result as T;\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u7EC4\u4EF6\r\n     * @param entity \r\n     * @param type \r\n     * @returns \r\n     */\r\n    getComponent<T extends IECSComponent>(entity: ECSEntity, type: new () => T): T | null {\r\n        let instance_type = this.__getComponentType(entity, type) || type;\r\n        let result = this.__storage.getValue(entity, instance_type);\r\n        return result as T;\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6entity\u4E0A\u67D0\u4E2A\u7C7B\u578B\u7EC4\u4EF6\u7684\u5217\u8868\r\n     * @param entity \r\n     * @param type \r\n     * @returns \r\n     */\r\n    getComponentList<T extends IECSComponent>(entity: ECSEntity, type: new () => T): Array<T> {\r\n        let result: Array<T> = [];\r\n        //\u5224\u65AD\u5F53\u524Dentity\u4E0B\u6240\u6709\u7EC4\u4EF6\u662F\u5426\u6709\u7EC4\u4EF6\u662F\u7EE7\u627F\u4E0E\u6307\u5B9A\u7C7B\u578B\u7684\u5B50\u7C7B\u3002\r\n        let entitySet = this.__storage.getEntitySet(entity);\r\n        if (entitySet == null) return result;\r\n        for (const com_type of entitySet) {\r\n            const com = this.__storage.getValue(entity, com_type);\r\n            if (com instanceof type) {\r\n                result.push(com);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * \u901A\u8FC7\u7C7B\u578B\u83B7\u53D6\u7EC4\u4EF6\u5217\u8868\r\n     * @param type \r\n     * @param check_instance \u662F\u5426\u5F00\u542Finstanceof\u68C0\u6D4B\uFF0C\u9ED8\u8BA4\u5173\u95ED\r\n     * @returns \r\n     */\r\n    getComponents<T extends IECSComponent>(type: new () => T, check_instance: boolean = false): Array<T> {\r\n        if (!check_instance) {\r\n            return this.__storage.getValues(type) as Array<T>;\r\n        }\r\n        let result: Array<T> = [];\r\n        let types: Array<new () => IECSComponent> = [];\r\n        let list = this.__storage.values.keys();\r\n        for (const com_type of list) {\r\n            const com_list = this.__storage.values.get(com_type);\r\n            //\u5224\u65AD\u5F53\u524Dentity\u4E0B\u6240\u6709\u7EC4\u4EF6\u662F\u5426\u6709\u7EC4\u4EF6\u662F\u7EE7\u627F\u4E0E\u6307\u5B9A\u7C7B\u578B\u7684\u5B50\u7C7B\u3002\r\n            if (com_list.length > 0) {\r\n                for (let i = 0; i < com_list.length; i++) {\r\n                    const element = com_list[i];\r\n                    if (element instanceof type) {\r\n                        types.push(com_type);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let index = 0; index < types.length; index++) {\r\n            const element = types[index];\r\n            result = result.concat(this.__storage.getValues(element) as Array<T>);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u7EC4\u4EF6\uFF0C\u5982\u679C\u6CA1\u6709\u5219\u6DFB\u52A0\r\n     * @param entity \r\n     * @param type \r\n     * @returns \r\n     */\r\n    getAddComponent<T extends IECSComponent>(entity: ECSEntity, type: new () => T): T {\r\n        if (this.__storage.hasValue(entity, type)) {\r\n            return this.getComponent(entity, type);\r\n        }\r\n        return this.addComponent(entity, type);\r\n    }\r\n\r\n    /**\r\n     * \u6DFB\u52A0\u591A\u4E2A\u7CFB\u7EDF\r\n     * @param sys_list \r\n     */\r\n    addSystems(sys: Array<new () => ECSSystem>): void {\r\n        for (let i = 0; i < sys.length; i++) {\r\n            this.addSystem(sys[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u6DFB\u52A0\u7CFB\u7EDF \r\n     */\r\n    addSystem(sysClass: new () => ECSSystem): void {\r\n        if (this.__systems.has(sysClass)) {\r\n            return;\r\n        }\r\n        const sys = new sysClass();\r\n        sys.setWorld(this);\r\n        this.__systems.set(sysClass, sys);\r\n        //\u6DFB\u52A0\u4F9D\u8D56\r\n        let list = sys._matcher._dependencies;\r\n        for (const com_type of list) {\r\n            let systems: Array<ECSSystem>;\r\n            if (!this.__componentSystems.has(com_type)) {\r\n                systems = [];\r\n                this.__componentSystems.set(com_type, systems);\r\n            } else {\r\n                systems = this.__componentSystems.get(com_type);\r\n            }\r\n            if (systems.indexOf(sys) < 0) {\r\n                systems.push(sys);\r\n            }\r\n        }\r\n        //\u6309\u7167\u7F16\u7EC4\u89C4\u5219\u5339\u914D\r\n        this.__matcherAll(sys);\r\n        this.__need_sort_systems = true;\r\n    }\r\n\r\n    /**\r\n     * \u662F\u5426\u5305\u542B\u8BE5\u7CFB\u7EDF\r\n     * @param key \r\n     * @returns \r\n     */\r\n    hasSystem(key: new () => ECSSystem): boolean {\r\n        return this.__systems.has(key);\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u7CFB\u7EDF\r\n     * @param key \r\n     * @returns \r\n     */\r\n    getSystem(key: new () => ECSSystem): ECSSystem | undefined {\r\n        return this.__systems.get(key);\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u7CFB\u7EDF\r\n     * @param value \r\n     */\r\n    removeSystem(value: ECSSystem): void {\r\n        const sysClass = value.constructor as new () => ECSSystem;\r\n        if (!this.__systems.has(sysClass)) {\r\n            throw new Error(\"\u627E\u4E0D\u5230\u8981\u5220\u9664\u7684\u7CFB\u7EDF\");\r\n        }\r\n        let sys = this.__systems.delete(sysClass);\r\n        //\u6DFB\u52A0\u4F9D\u8D56\r\n        let list = sys._matcher._dependencies;\r\n        for (const com_type of list) {\r\n            const systems = this.__componentSystems.get(com_type);\r\n            const index = systems.indexOf(sys);\r\n            if (index >= 0) {\r\n                systems.splice(index, 1);\r\n            }\r\n        }\r\n        value.setWorld(null);\r\n        value.destory();\r\n        this.__need_sort_systems = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * \u6E05\u7406\u6240\u6709\u5143\u7D20\r\n     */\r\n    clearAll(): void {\r\n        this.__waitFree.splice(0, this.__waitFree.length);\r\n        this.__storage.clear();\r\n        const systems = this.__systems.elements;\r\n        for (let index = 0; index < systems.length; index++) {\r\n            const sys = systems[index];\r\n            sys.destory();\r\n        }\r\n        this.__systems.clear();\r\n        this.__componentSystems.clear();\r\n    }\r\n\r\n    destroy(): void {\r\n        this.clearAll();\r\n        this.__waitFree.splice(0, this.__waitFree.length);\r\n        this.__waitFree = null;\r\n        this.__storage.destroy();\r\n        this.__storage = null;\r\n        this.__systems = null;\r\n    }\r\n\r\n    /**\u6807\u8BB0\u7EC4\u4EF6\u810F\u4E86 */\r\n    private __componentDirty<T extends IECSComponent>(entity: ECSEntity, type: new () => T): void {\r\n        let systems = this.__componentSystems.get(type);\r\n        this.__matcher(entity, true, false, systems);\r\n    }\r\n\r\n    /**\u5C06\u6240\u6709entity\u8DDF\u7CFB\u7EDF\u8FDB\u884C\u5339\u914D */\r\n    private __matcherAll(sys: ECSSystem): void {\r\n        ECSWorld.HELP_ENTITY_LIST.splice(0, ECSWorld.HELP_ENTITY_LIST.length);\r\n        let list = this.__storage.getIDList(ECSWorld.HELP_ENTITY_LIST);\r\n        for (let index = 0; index < list.length; index++) {\r\n            const id = list[index];\r\n            if (this.__matcherEntity(sys._matcher, id)) {\r\n                sys.addEntity(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    private __matcher(id: ECSEntity, useDirty: boolean, all: boolean = false, p_systems?: Array<ECSSystem>): void {\r\n        if (!this.__systems) return;\r\n        const systems = p_systems || this.__systems.elements;\r\n        for (let index = 0; index < systems.length; index++) {\r\n            const sys = systems[index];\r\n            if (sys.useDirty == useDirty || all) {\r\n                if (this.__matcherEntity(sys._matcher, id)) {\r\n                    if (!sys.hasEntity(id)) {\r\n                        sys.addEntity(id);\r\n                    }\r\n                } else {\r\n                    if (sys.hasEntity(id)) {\r\n                        sys.removeEntity(id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private __matcherEntity(matcher: ECSMatcher, entity: ECSEntity): boolean {\r\n        let mainMatcher: boolean = this.__matcherComponents(matcher.matcher!, entity);\r\n        let anyMatcher: boolean = matcher.matcherAnyOf == undefined ? true : this.__matcherComponents(matcher.matcherAnyOf, entity);\r\n        let noneMatcher = matcher.matcherNoneOf == undefined ? true : this.__matcherComponents(matcher.matcherNoneOf, entity);\r\n        return mainMatcher && anyMatcher && noneMatcher;\r\n    }\r\n\r\n    private __matcherComponents(matcher: Matcher, entity: ECSEntity): boolean {\r\n        if (matcher instanceof MatcherAllOf) {\r\n            for (let index = 0; index < matcher.types.length; index++) {\r\n                const comType = matcher.types[index];\r\n                if (!this.hasComponent(entity, comType)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        } else if (matcher instanceof MatcherAnyOf) {\r\n            for (let index = 0; index < matcher.types.length; index++) {\r\n                const comType = matcher.types[index];\r\n                if (this.hasComponent(entity, comType)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        //\u6392\u9664\r\n        for (let index = 0; index < matcher.types.length; index++) {\r\n            const comType = matcher.types[index];\r\n            if (this.hasComponent(entity, comType)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}", "\r\n\r\n/**\r\n * \u7A00\u758F\u96C6\u5408\r\n */\r\nexport class SparseSet {\r\n\r\n    /**\u65E0\u6548\u503C */\r\n    invalid: number = 0;\r\n    private __maxCount: number = 0;\r\n    private __packed: Uint32Array;\r\n    private __index: number = 0;\r\n    private __sparse: Uint32Array;\r\n\r\n    constructor(maxCount: number) {\r\n        this.__maxCount = this.invalid = maxCount;\r\n        this.__packed = new Uint32Array(this.__maxCount);\r\n        this.__packed.fill(this.invalid);\r\n        this.__sparse = new Uint32Array(this.__maxCount);\r\n        this.__sparse.fill(this.invalid);\r\n    }\r\n\r\n    /**\r\n     * \u6DFB\u52A0\r\n     * @param id \r\n     */\r\n    add(id: number): void {\r\n        if (id >= this.invalid) {\r\n            throw new Error(\"\u8D85\u51FA\u6700\u5927\u7D22\u5F15:\" + id + \"/\" + this.invalid)\r\n        }\r\n        this.__packed[this.__index] = id;\r\n        this.__sparse[id] = this.__index;\r\n        this.__index++;\r\n    }\r\n\r\n    /**\r\n     * \u662F\u5426\u5305\u542B\r\n     * @param id \r\n     * @returns \r\n     */\r\n    contains(id: number): boolean {\r\n        if (id >= this.__sparse.length) {\r\n            return false;\r\n        }\r\n        if (this.__sparse[id] == this.invalid) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\r\n     * @param id \r\n     */\r\n    remove(id: number): void {\r\n        if (id >= this.__maxCount) {\r\n            throw new Error(\"\u8D85\u51FA\u8303\u56F4\");\r\n        }\r\n        let delete_packIdx = this.__sparse[id];\r\n        let lastIdx = this.__index - 1;\r\n        if (this.length == 1 || delete_packIdx == lastIdx) {\r\n            this.__packed[lastIdx] = this.invalid;\r\n            this.__sparse[id] = this.invalid;\r\n        } else {\r\n            let swap_id = this.__packed[lastIdx];\r\n            this.__packed[delete_packIdx] = swap_id;\r\n            this.__sparse[id] = this.invalid;\r\n            this.__sparse[swap_id] = delete_packIdx;\r\n            this.__packed[lastIdx] = this.invalid;\r\n        }\r\n        this.__index--;\r\n    }\r\n\r\n    /**\r\n     * \u6E05\u9664\u6240\u6709\r\n     */\r\n    clear(): void {\r\n        this.__packed.fill(this.invalid);\r\n        this.__sparse.fill(this.invalid);\r\n        this.__index = 0;\r\n    }\r\n\r\n    destroy(): void {\r\n        this.__packed = null;\r\n        this.__sparse = null;\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6packed\u7684\u7D22\u5F15\u503C\r\n     * @param id \r\n     * @returns \r\n     */\r\n    getPackedIdx(id: number): number {\r\n        if (id >= this.__sparse.length) {\r\n            return this.invalid;\r\n        }\r\n        if (this.__sparse[id] == this.invalid) {\r\n            return this.invalid;\r\n        }\r\n        //\u627E\u5230\u5728packed\u4E2D\u7684\u7D22\u5F15\u4F4D\u7F6E\r\n        const pIdx = this.__sparse[id];\r\n        return pIdx;\r\n    }\r\n\r\n    /**\r\n     * \u6700\u540E\u4E00\u4E2Aentity\r\n     */\r\n    get lastEntity(): number {\r\n        return this.__packed[this.__index - 1];\r\n    }\r\n\r\n    get packed(): Uint32Array {\r\n        return this.__packed;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.__index;\r\n    }\r\n\r\n    get maxCount(): number {\r\n        return this.__maxCount;\r\n    }\r\n}", "import { ECSEntity } from \"./ECSEntity\";\r\nimport { ECSMatcher, MatcherAllOf, MatcherAnyOf, MatcherNoneOf } from \"./ECSMatcher\";\r\nimport { ECSWorld } from \"./ECSWorld\";\r\n\r\n/**\r\n * \u7CFB\u7EDF\r\n */\r\nexport abstract class ECSSystem {\r\n\r\n    private static HELP_ENTITY_LIST: Array<ECSEntity> = [];\r\n\r\n    /**\u662F\u5426\u4F7F\u7528\u810F\u6570\u636E*/\r\n    useDirty: boolean = false;\r\n\r\n    /**\u5339\u914D\u5668 */\r\n    _matcher: ECSMatcher;\r\n\r\n    /**\u6240\u5C5E\u4E16\u754C */\r\n    private __world: ECSWorld | null = null;\r\n\r\n    /**\r\n     * \u7CFB\u7EDF\r\n     * @param allOrAny  \u5339\u914D\u6240\u6709\u6216\u4EFB\u610F\u4E00\u4E2A \r\n     * @param none      \u4E0D\u80FD\u5305\u542B\r\n     * @param useDirty  \u662F\u5426\u4F7F\u7528\u810F\u6570\u636E\u673A\u5236\r\n     */\r\n    constructor(allOrAny: MatcherAllOf | MatcherAnyOf, matcherAnyOf?: MatcherAnyOf, none?: MatcherNoneOf, useDirty: boolean = false) {\r\n        this._matcher = new ECSMatcher(allOrAny, matcherAnyOf, none);\r\n        this.useDirty = useDirty;\r\n    }\r\n\r\n    /**\u8BBE\u7F6E\u6240\u5C5E\u4E16\u754C */\r\n    setWorld(v: ECSWorld): void {\r\n        this.__world = v;\r\n    }\r\n\r\n    /**\u5FC3\u8DF3 */\r\n    tick(dt: number): void {\r\n        if (this._matcher.entitys.size == 0) return;\r\n        this.$tick(this._matcher.entitys, dt);\r\n        if (this.useDirty) {\r\n            this._matcher.clear();\r\n        }\r\n    }\r\n\r\n    hasEntity(entity: ECSEntity): boolean {\r\n        return this._matcher.has(entity);\r\n    }\r\n\r\n    removeEntity(entity: ECSEntity): void {\r\n        this._matcher.remove(entity);\r\n    }\r\n\r\n    addEntity(entity: ECSEntity): void {\r\n        this._matcher.add(entity);\r\n    }\r\n\r\n    /**\u6240\u5C5E\u4E16\u754C */\r\n    get world(): ECSWorld {\r\n        return this.__world!;\r\n    }\r\n\r\n    protected $tick(entitys: Set<ECSEntity>, dt: number): void {\r\n\r\n    }\r\n\r\n    /**\u9500\u6BC1 */\r\n    destory(): void {\r\n        this.__world = null;\r\n        this._matcher = null;\r\n    }\r\n}", "import { ECSComponent } from \"../core/ECSComponent\";\r\n\r\n\r\n/**\r\n * \u9635\u8425\u57FA\u7840\u7C7B\r\n */\r\nexport class CampComponent extends ECSComponent {\r\n    /**\r\n     * \u9635\u8425\r\n     */\r\n    camp: number = 0;\r\n    constructor() {\r\n        super();\r\n    }\r\n}", "import { Quat, Vec3 } from \"cc\";\r\nimport { ECSComponent } from \"../core/ECSComponent\";\r\n\r\n\r\n/**\r\n * \u53D8\u6362\u7EC4\u4EF6\r\n */\r\nexport class TransformComponent extends ECSComponent {\r\n\r\n    /**\r\n     * \u662F\u5426\u7FFB\u8F6CY\u8F74\r\n     */\r\n    static YAxisFlip: boolean = true;\r\n\r\n    private __position: Vec3;\r\n    private __rotation: Quat;\r\n    private __angle: Vec3;\r\n    private __scale: Vec3;\r\n    private __direction: Vec3;\r\n\r\n    constructor() {\r\n        super();\r\n        this.__position = new Vec3();\r\n        this.__rotation = new Quat();\r\n        this.__angle = new Vec3();\r\n        this.__scale = new Vec3(1, 1, 1);\r\n        //\u9ED8\u8BA4\u671D\u5411z\u8F74\r\n        this.__direction = new Vec3(1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * \u8BBE\u7F6E\u671D\u5411\r\n     * @param x \r\n     * @param y \r\n     * @param z \r\n     */\r\n    setDirection(x?: number, y?: number, z?: number): void {\r\n        let changed: boolean = false;\r\n        if (x != undefined && this.__direction.x != x) {\r\n            this.__direction.x = x;\r\n            changed = true;\r\n        }\r\n        if (y != undefined && this.__direction.y != y) {\r\n            this.__direction.y = y;\r\n            changed = true;\r\n        }\r\n        if (z != undefined && this.__direction.z != z) {\r\n            this.__direction.z = z;\r\n            changed = true;\r\n        }\r\n        if (changed) {\r\n            this.markDirtied();\r\n        }\r\n    }\r\n\r\n    get direction(): Vec3 {\r\n        return this.__direction;\r\n    }\r\n\r\n    setPosition(x?: number, y?: number, z?: number): void {\r\n        let changed: boolean = false;\r\n        if (x != undefined && this.__position.x != x) {\r\n            this.__position.x = x;\r\n            changed = true;\r\n        }\r\n        if (y != undefined && this.__position.y != y) {\r\n            this.__position.y = y;\r\n            changed = true;\r\n        }\r\n        if (z != undefined && this.__position.z != z) {\r\n            this.__position.z = z;\r\n            changed = true;\r\n        }\r\n        if (changed) {\r\n            this.markDirtied();\r\n        }\r\n    }\r\n\r\n    get x(): number {\r\n        return this.__position.x;\r\n    }\r\n\r\n    set x(v: number) {\r\n        if (this.__position.x == v) return;\r\n        this.__position.x = v;\r\n        this.markDirtied();\r\n    }\r\n\r\n    get y(): number {\r\n        return this.__position.y;\r\n    }\r\n\r\n    set y(v: number) {\r\n        if (this.__position.y == v) return;\r\n        this.__position.y = v;\r\n        this.markDirtied();\r\n    }\r\n\r\n    get z(): number {\r\n        return this.__position.z;\r\n    }\r\n\r\n    set z(v: number) {\r\n        if (this.__position.z == v) return;\r\n        this.__position.z = v;\r\n        this.markDirtied();\r\n    }\r\n\r\n    get position(): Vec3 {\r\n        return this.__position;\r\n    }\r\n\r\n    set position(v: Vec3) {\r\n        if (this.__position.equals(v)) return;\r\n        this.__position.set(v);\r\n        this.markDirtied();\r\n    }\r\n\r\n\r\n    /**\r\n     * \u8BBE\u7F6E\u65CB\u8F6C\u89D2\u5EA6(0-360)\r\n     * @param x \r\n     * @param y \r\n     * @param z \r\n     */\r\n    setAngle(x: number, y?: number, z?: number): void {\r\n        let changed: boolean = false;\r\n        if (x != undefined && this.__angle.x != x) {\r\n            this.__angle.x = x;\r\n            changed = true;\r\n        }\r\n        if (y != undefined && this.__angle.y != y) {\r\n            this.__angle.y = y;\r\n            changed = true;\r\n        }\r\n        if (z != undefined && this.__angle.z != z) {\r\n            this.__angle.z = z;\r\n            changed = true;\r\n        }\r\n        if (changed) {\r\n            Quat.fromEuler(this.__rotation, this.__angle.x, this.__angle.y, this.__angle.z);\r\n            this.markDirtied();\r\n        }\r\n    }\r\n\r\n    get rotation(): Quat {\r\n        return this.__rotation;\r\n    }\r\n\r\n    set rotation(v: Quat) {\r\n        if (this.__rotation.equals(v)) return;\r\n        this.__rotation.set(v);\r\n        this.markDirtied();\r\n    }\r\n\r\n    /**\r\n     * \u8BBE\u7F6E\u7F29\u653E\u6BD4\u4F8B\r\n     * @param x \r\n     * @param y \r\n     * @param z \r\n     */\r\n    setScale(x?: number, y?: number, z?: number): void {\r\n        let changed = false;\r\n        if (x != undefined && this.__angle.x != x) {\r\n            this.__scale.x = x;\r\n            changed = true;\r\n        }\r\n        if (y != undefined && this.__angle.y != y) {\r\n            this.__scale.y = y;\r\n            changed = true;\r\n        }\r\n        if (z != undefined && this.__angle.z != z) {\r\n            this.__scale.z = z;\r\n            changed = true;\r\n        }\r\n        if (changed) {\r\n            this.markDirtied()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u7F29\u653E\u6BD4\u4F8B\r\n     */\r\n    set scale(v: Vec3) {\r\n        if (this.__scale.equals(v)) return;\r\n        this.__scale.set(v);\r\n        this.markDirtied();\r\n    }\r\n\r\n    get scale(): Vec3 {\r\n        return this.__scale;\r\n    }\r\n\r\n    reset(): void {\r\n        super.reset();\r\n        this.__direction.set(0, 0, 0);\r\n        this.__position.set(0, 0, 0);\r\n        this.__angle.set(0, 0, 0);\r\n        this.__rotation.set(0, 0, 0, 1);\r\n        this.__scale.set(1, 1, 1);\r\n    }\r\n}", "import { Node } from \"cc\";\r\nimport { ECSComponent } from \"../core/ECSComponent\";\r\nimport { ECSEntity } from \"../core/ECSEntity\";\r\n\r\n/**\r\n * \u8BBE\u7F6E\u7236\u8282\u70B9\u7EC4\u4EF6\r\n */\r\nexport class ParentComponent extends ECSComponent {\r\n\r\n    private __parent: ECSEntity | Node | null = null;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    set parent(v: ECSEntity | Node | null) {\r\n        if (this.__parent === v) return;\r\n        this.__parent = v;\r\n        this.markDirtied();\r\n    }\r\n\r\n    get parent(): ECSEntity | Node | null {\r\n        return this.__parent;\r\n    }\r\n\r\n    reset(): void {\r\n        super.reset();\r\n        this.parent = null;\r\n    }\r\n}", "\r\n\r\nimport { ParentComponent } from \"./ParentComponent\";\r\nimport { Node } from \"cc\";\r\nimport { NodeComponent } from \"./NodeComponent\";\r\nimport { ECSSystem } from \"../core/ECSSystem\";\r\nimport { ECSEntity } from \"../core/ECSEntity\";\r\nimport { MatcherAllOf } from \"../core/ECSMatcher\";\r\n\r\n\r\n\r\nexport class AddToParentQueueSystem extends ECSSystem {\r\n\r\n    private nodes: Set<ECSEntity>;\r\n\r\n    private frame_count: number = Number.MAX_VALUE;\r\n\r\n    constructor() {\r\n        super(\r\n            new MatcherAllOf([\r\n                ParentComponent,\r\n            ]),\r\n            undefined,\r\n            undefined,\r\n            true\r\n        );\r\n        this.nodes = new Set();\r\n    }\r\n\r\n    tick(dt: number): void {\r\n        super.tick(dt);\r\n        if (this.nodes.size > 0) {\r\n            let count = Math.min(this.frame_count, this.nodes.size);\r\n            let itr = this.nodes.values();\r\n            let index: number = 0;\r\n            while (index < count) {\r\n                const entity = itr.next().value as ECSEntity;\r\n                this.nodes.delete(entity);\r\n                if (this.world.hasEntity(entity)) {\r\n                    const parent_com = this.world.getComponent(entity, ParentComponent)!;\r\n                    const node_com = this.world.getComponent(entity, NodeComponent)!;\r\n                    if (parent_com.parent == null) {\r\n                        continue;\r\n                    }\r\n                    if (parent_com.parent instanceof Node) {\r\n                        parent_com.parent.addChild(node_com);\r\n                    } else {\r\n                        let parent_node = this.world.getComponent(parent_com.parent, NodeComponent)!;\r\n                        parent_node.addChild(node_com);\r\n                    }\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected $tick(entitys: Set<ECSEntity>, dt: number): void {\r\n        for (const entity of entitys) {\r\n            this.nodes.add(entity);\r\n        }\r\n    }\r\n}", "import { Node } from \"cc\";\r\nimport { ECSEntity } from \"../core/ECSEntity\";\r\nimport { ECSWorld } from \"../core/ECSWorld\";\r\nimport { IECSComponent } from \"../core/IECSComponent\";\r\nimport { TickerManager } from \"dream-cc-core\";\r\n\r\n\r\n\r\n\r\nexport class NodeComponent extends Node implements IECSComponent {\r\n\r\n    world: ECSWorld | null = null;\r\n    entity: ECSEntity | null = null;\r\n    dirtySignal: (() => void) | null = null;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    enable(): void {\r\n        this.name = this.entity.toString();\r\n    }\r\n\r\n    markDirtied(): void {\r\n        TickerManager.callNextFrame(this.nextFrame, this);\r\n    }\r\n\r\n    private nextFrame(): void {\r\n        this.dirtySignal && this.dirtySignal();\r\n    }\r\n\r\n    reset(): void {\r\n        TickerManager.clearNextFrame(this.nextFrame, this);\r\n        this.dirtySignal = null;\r\n        this.world = null;\r\n        this.entity = -1;\r\n        this.active = true;\r\n        this.setPosition(0, 0, 0);\r\n        this.setScale(1, 1, 1);\r\n        this.setRotationFromEuler(0, 0, 0);\r\n        //\u4ECE\u7236\u8282\u70B9\u4E2D\u5220\u9664\r\n        if (this.parent) {\r\n            this.removeFromParent();\r\n        }\r\n        //\u6E05\u7406\u81EA\u8EAB\u5185\u5BB9\r\n        this.removeAllChildren();\r\n    }\r\n}", "import { Node } from \"cc\";\r\nimport { NodeComponent } from \"./NodeComponent\";\r\nimport { ParentComponent } from \"./ParentComponent\";\r\nimport { MatcherAllOf } from \"../core/ECSMatcher\";\r\nimport { ECSSystem } from \"../core/ECSSystem\";\r\nimport { ECSEntity } from \"../core/ECSEntity\";\r\n\r\n\r\n\r\n/**\r\n * \u6DFB\u52A0\u5230\u7236\u8282\u70B9\u7CFB\u7EDF\r\n */\r\nexport class AddToParentSystem extends ECSSystem {\r\n    \r\n    constructor() {\r\n        super(\r\n            new MatcherAllOf([\r\n                ParentComponent,\r\n            ]),\r\n            undefined,\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    protected $tick(entitys: Set<ECSEntity>, dt: number): void {\r\n        for (const entity of entitys) {\r\n            const parent_com = this.world.getComponent(entity, ParentComponent)!;\r\n            const node_com = this.world.getComponent(entity, NodeComponent)!;\r\n            if (parent_com.parent == null) {\r\n                continue;\r\n            }\r\n            if (parent_com.parent instanceof Node) {\r\n                parent_com.parent.addChild(node_com);\r\n            } else {\r\n                let parent_node_com = this.world.getComponent(parent_com.parent, NodeComponent)!;\r\n                parent_node_com.addChild(node_com);\r\n            }\r\n        }\r\n    }\r\n}", "import { ECSEntity } from \"../core/ECSEntity\";\r\nimport { MatcherAllOf } from \"../core/ECSMatcher\";\r\nimport { ECSSystem } from \"../core/ECSSystem\";\r\nimport { NodeComponent } from \"./NodeComponent\";\r\nimport { TransformComponent } from \"../transforms/TransformComponent\";\r\n\r\n\r\nexport class NodeSystem extends ECSSystem {\r\n\r\n    constructor() {\r\n        super(\r\n            new MatcherAllOf([\r\n                NodeComponent,\r\n                TransformComponent\r\n            ]),\r\n            undefined,\r\n            undefined,\r\n            true//\u4F7F\u7528\u810F\u6570\u636E\r\n        );\r\n    }\r\n\r\n    protected $tick(entitys: Set<ECSEntity>, dt: number): void {\r\n        for (const entity of entitys) {\r\n            const node_com = this.world.getComponent(entity, NodeComponent)!;\r\n            const trans_com = this.world.getComponent(entity, TransformComponent)!;\r\n            //\u65CB\u8F6C\r\n            node_com.setRotation(trans_com.rotation);\r\n            //\u5E73\u79FB\r\n            if (TransformComponent.YAxisFlip) {\r\n                node_com.setPosition(trans_com.position.x, trans_com.position.y * -1, trans_com.position.z);\r\n            } else {\r\n                node_com.setPosition(trans_com.position);\r\n            }\r\n            //\u7F29\u653E\r\n            node_com.setScale(trans_com.scale);\r\n        }\r\n    }\r\n}", "import { Vec3 } from \"cc\";\r\nimport { ECSComponent } from \"../core/ECSComponent\";\r\n\r\n\r\n/**\r\n * \u5927\u5C0F\u8BB0\u5F55\u7EC4\u4EF6(\u53EA\u7528\u4E8E\u8BB0\u5F55\u5927\u5C0F)\r\n */\r\nexport class SizeComponent extends ECSComponent {\r\n\r\n    private __size: Vec3 = new Vec3(1, 1, 1);\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\r\n    setSize(w: number, h: number): void {\r\n        this.__size.x = w;\r\n        this.__size.y = h;\r\n        this.markDirtied();\r\n    }\r\n    \r\n    set width(v: number) {\r\n        if (this.__size.x === v) return;\r\n        this.__size.x = v;\r\n        this.markDirtied();\r\n    }\r\n\r\n    get width(): number {\r\n        return this.__size.x;\r\n    }\r\n\r\n    set height(v: number) {\r\n        if (this.__size.y === v) return;\r\n        this.__size.y = v;\r\n    }\r\n\r\n    get height(): number {\r\n        return this.__size.y;\r\n    }\r\n\r\n    reset(): void {\r\n        super.reset();\r\n        this.__size.set(1, 1, 1);\r\n    }\r\n}", "import { ECSComponent } from \"../core/ECSComponent\";\r\nimport { NodeComponent } from \"../nodes/NodeComponent\";\r\nimport { Node } from \"cc\";\r\n\r\n\r\n\r\n\r\n/**\r\n * \u663E\u793A\u7EC4\u4EF6\r\n */\r\nexport class DisplayComponent extends ECSComponent {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    enable(): void {\r\n        //\u5982\u679C\u6CA1\u6709\u8282\u70B9\u7EC4\u4EF6\r\n        if (!this.world!.hasComponent(this.entity!, NodeComponent)) {\r\n            this.world?.addComponent(this.entity!, NodeComponent);\r\n        }\r\n    }\r\n    \r\n    reset(): void {\r\n        super.reset();\r\n    }\r\n\r\n    /**\r\n     * \u8282\u70B9\r\n     */\r\n    get node(): Node | null {\r\n        if (this.world && this.entity) {\r\n            let node_com = this.world?.getComponent(this.entity!, NodeComponent)!;\r\n            return node_com;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    set name(v: string) {\r\n        this.node && (this.node.name = v);\r\n    }\r\n\r\n    get name(): string {\r\n        return this.node?.name || \"\";\r\n    }\r\n}", "import { Graphics } from \"cc\";\r\nimport { DisplayComponent } from \"./DisplayComponent\";\r\n\r\n\r\n/**\r\n * \u7ED8\u753B\u7EC4\u4EF6\r\n */\r\nexport class GraphicsComponent extends DisplayComponent {\r\n\r\n    private __graphics: Graphics;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    enable(): void {\r\n        super.enable();\r\n        this.__graphics = this.node.addComponent(Graphics);\r\n    }\r\n\r\n    get graphics(): Graphics {\r\n        return this.__graphics;\r\n    }\r\n\r\n    reset(): void {\r\n        super.reset();\r\n        if (this.__graphics) {\r\n            this.__graphics.destroy();\r\n            this.__graphics = null;\r\n        }\r\n    }\r\n}", "import { ECSComponent } from \"../core/ECSComponent\";\r\n\r\n\r\n\r\nexport class DataComponent extends ECSComponent {\r\n\r\n    private __data: any;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    reset(): void {\r\n        super.reset();\r\n        this.__data = null;\r\n    }\r\n\r\n    set data(v: any) {\r\n        if (this.__data == v) return;\r\n        this.__data = v;\r\n        this.markDirtied();\r\n    }\r\n\r\n    get data(): any {\r\n        return this.__data;\r\n    }\r\n}", "import { ECSComponent } from \"../core/ECSComponent\";\nimport { ECSEntity } from \"../core/ECSEntity\";\n\n/**\n * \u94FE\u63A5\u7EC4\u4EF6\n */\nexport class LinkComponent extends ECSComponent {\n  /**\u94FE\u63A5\u76EE\u6807 */\n  target?: ECSEntity;\n  constructor() {\n    super();\n  }\n}\n", "\nimport { ECSEntity } from \"../core/ECSEntity\";\nimport { MatcherAllOf } from \"../core/ECSMatcher\";\nimport { ECSSystem } from \"../core/ECSSystem\";\nimport { TransformComponent } from \"../transforms/TransformComponent\";\nimport { LinkComponent } from \"./LinkComponent\";\n\nexport class LinkSystem extends ECSSystem {\n  constructor() {\n    super(new MatcherAllOf([LinkComponent, TransformComponent]));\n  }\n\n  protected $tick(entitys: Set<ECSEntity>, dt: number): void {\n    for (let entity of entitys) {\n      const link_com = this.world.getComponent(entity, LinkComponent);\n      const trans = this.world.getComponent(entity, TransformComponent);\n      if (link_com.target) {\n        const target_trans = this.world.getComponent(\n          link_com.target,\n          TransformComponent,\n        );\n        trans.setPosition(target_trans.x, target_trans.y, target_trans.z);\n      }\n    }\n  }\n}\n", "import { RenderRoot2D } from \"cc\";\r\nimport { DisplayComponent } from \"./DisplayComponent\";\r\n\r\n\r\n\r\n\r\n/**\r\n * 3D\u4E16\u754C\u4E2D\u76842D\u6E32\u67D3\u7EC4\u4EF6\r\n */\r\nexport class RendererRoot2DComponent extends DisplayComponent {\r\n\r\n    private __root2D: RenderRoot2D;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    enable(): void {\r\n        super.enable();\r\n        this.__root2D = this.node.addComponent(RenderRoot2D);\r\n    }\r\n\r\n    reset(): void {\r\n        super.reset();\r\n        if (this.__root2D) {\r\n            this.__root2D.destroy();\r\n            this.__root2D = null;\r\n        }\r\n    }\r\n}", "import { IDestroyable } from \"dream-cc-core\";\r\n\r\n\r\n\r\n/**\r\n * \u5173\u5361\u72B6\u6001\u6570\u636E\u5B58\u653E\r\n */\r\nexport class LevelStatus implements IDestroyable {\r\n\r\n    private __status: Map<any, any>;\r\n\r\n    constructor() {\r\n        this.__status = new Map<any, any>();\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u6570\u636E\r\n     * @param key \r\n     * @returns \r\n     */\r\n    get<T>(key: any): T {\r\n        return this.__status.get(key) as T;\r\n    }\r\n\r\n    /**\r\n     * \u662F\u5426\u5305\u542B\u6570\u636E\r\n     * @param key \r\n     * @returns \r\n     */\r\n    has(key:any):boolean{\r\n        return this.__status.has(key);\r\n    }\r\n    \r\n    /**\r\n     * \u8BBE\u7F6E\u6570\u636E\r\n     * @param key \r\n     * @param value \r\n     */\r\n    set(key: any, value: any): void {\r\n        this.__status.set(key, value);\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u6570\u636E\r\n     */\r\n    delete(key: any): void {\r\n        this.__status.delete(key);\r\n    }\r\n\r\n    clear(): void {\r\n        this.__status.clear();\r\n    }\r\n\r\n    destroy(): boolean {\r\n        this.clear();\r\n        this.__status = null;\r\n        return true;\r\n    }\r\n}", "import { Node } from \"cc\";\r\nimport { LevelMode } from \"./LevelMode\";\r\nimport { LevelStatus } from \"./LevelStatus\";\r\nimport { Event, EventDispatcher } from \"dream-cc-core\";\r\nimport { ECSWorld } from \"../core/ECSWorld\";\r\n\r\n\r\n/**\r\n * \u5173\u5361\r\n */\r\nexport class Level extends EventDispatcher {\r\n    /**\r\n     * \u5173\u5361\u4E16\u754CKEY\r\n     */\r\n    key: string;\r\n    private __status: LevelStatus;\r\n    private __world_root: Node;\r\n    private __world: ECSWorld;\r\n    private __mode: LevelMode;\r\n    private __entered: boolean = false;\r\n    constructor() {\r\n        super();\r\n        this.__status = new LevelStatus();\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316\r\n     * @param root \r\n     * @param entity_max_count  \u6700\u5927\u5B9E\u4F53\u6570\u91CF\r\n     */\r\n    init(root: Node, entity_max_count: number = 1024): void {\r\n        let old = this.__world;\r\n        if (old) {\r\n            old.clearAll();\r\n            old.destroy();\r\n        }\r\n        this.__world = new ECSWorld(entity_max_count);\r\n        this.__world_root = root;\r\n    }\r\n\r\n    /**\r\n     * \u8FDB\u5165\u5173\u5361\r\n     * @param mode          \u73A9\u6CD5\u6A21\u5F0F\r\n     * @param mode_data     \u73A9\u6CD5\u6570\u636E\r\n     */\r\n    enter(mode: LevelMode, ...mode_data: any[]): void {\r\n        let old = this.__mode;\r\n        if (old) {\r\n            old.destroy();\r\n            this.world.clearAll();\r\n        }\r\n        this.__mode = mode;\r\n        this.__mode.level = this;\r\n        this.__mode.on(Event.COMPLETE, this.__enterComplete, this);\r\n        this.__mode.init(...mode_data);\r\n    }\r\n\r\n    private __enterComplete(e: Event): void {\r\n        this.__mode.off(Event.COMPLETE, this.__enterComplete, this);\r\n        this.__entered = true;\r\n    }\r\n\r\n    /**\r\n     * \u5173\u5361\u5FC3\u8DF3\u7EDF\u4E00\u63A5\u53E3\r\n     * @param dt \r\n     */\r\n    tick(dt: number): void {\r\n        if (this.__entered) {\r\n            this.__world.tick(dt);\r\n            this.__mode.tick(dt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u9000\u51FA\u5173\u5361\r\n     */\r\n    exit(): void {\r\n        this.__entered = false;\r\n        //\u6E05\u7406\u4E16\u754C\u4E2D\u7684\u6240\u6709\u5185\u5BB9\r\n        this.__world.clearAll();\r\n        //\u9500\u6BC1\u6A21\u5F0F\r\n        this.__mode.destroy();\r\n        this.__mode = null;\r\n        this.status.clear();\r\n    }\r\n\r\n    /**\r\n     * \u6839\u8282\u70B9\r\n     */\r\n    get root(): Node {\r\n        return this.__world_root;\r\n    }\r\n\r\n    /**\r\n     * \u4E16\u754C\r\n     */\r\n    get world(): ECSWorld {\r\n        return this.__world;\r\n    }\r\n\r\n    /**\r\n     * \u6A21\u5F0F\r\n     */\r\n    get mode(): LevelMode {\r\n        return this.__mode;\r\n    }\r\n\r\n    /**\r\n     * \u72B6\u6001(\u7528\u4E8E\u8BB0\u5F55\u4E00\u4E0B\u5BF9\u4E8E\u5173\u5361\u4E2D\u7684\u4E00\u4E9B\"\u5168\u5C40\"\u72B6\u6001\u4FE1\u606F)\")\r\n     */\r\n    get status(): LevelStatus {\r\n        return this.__status;\r\n    }\r\n}", "import { Node } from \"cc\";\r\nimport { Level } from \"./Level\";\r\nimport { LevelMode } from \"./LevelMode\";\r\nimport { TickerManager } from \"dream-cc-core\";\r\n\r\n\r\n\r\n\r\nexport class LevelManager {\r\n\r\n    private __levels: Map<string, Level>;\r\n\r\n    constructor() {\r\n        this.__levels = new Map<string, Level>();\r\n        TickerManager.addTicker(this);\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316\u5173\u5361\r\n     * @param key \r\n     * @param root \r\n     * @param max_count \r\n     */\r\n    initLevel(key: string, root: Node, max_count: number = 1024): Level {\r\n        if (this.__levels.has(key)) {\r\n            throw new Error(`\u5173\u5361[${key}]\u5DF2\u5B58\u5728`);\r\n        }\r\n        let level = new Level();\r\n        level.key = key;\r\n        level.init(root, max_count);\r\n        this.__levels.set(key, level);\r\n        return level;\r\n    }\r\n\r\n    /**\r\n     * \u5173\u5361\u662F\u5426\u5B58\u5728\r\n     * @param key \r\n     * @returns \r\n     */\r\n    hasLevel(key: string): boolean {\r\n        return this.__levels.has(key);\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u5173\u5361\u5B9E\u4F8B\r\n     * @param key \r\n     * @returns \r\n     */\r\n    getLevel(key: string): Level {\r\n        return this.__levels.get(key);\r\n    }\r\n\r\n    /**\r\n     * \u8FDB\u5165\u5173\u5361\r\n     * @param key \r\n     * @param mode \r\n     * @param data \r\n     */\r\n    enter(key: string, mode: LevelMode, ...data: any[]): void {\r\n        if (!this.__levels.has(key)) {\r\n            throw new Error(`\u5173\u5361[${key}]\u4E0D\u5B58\u5728`);\r\n        }\r\n        let level = this.__levels.get(key);\r\n        level.enter(mode, ...data);\r\n    }\r\n\r\n    /**\r\n     * \u5FC3\u8DF3\r\n     * @param dt \r\n     */\r\n    tick(dt: number): void {\r\n        let elements = this.__levels.values();\r\n        for (const element of elements) {\r\n            element.tick(dt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u9000\u51FA\u5173\u5361\r\n     * @param key \r\n     */\r\n    exit(key: string): void {\r\n        if (!this.__levels.has(key)) {\r\n            throw new Error(`\u5173\u5361[${key}]\u4E0D\u5B58\u5728`);\r\n        }\r\n        let level = this.__levels.get(key);\r\n        level.exit();\r\n    }\r\n\r\n    /**\r\n     * \u9500\u6BC1\u5173\u5361\r\n     * @param key \r\n     */\r\n    destroy(key: string): void {\r\n        if (!this.__levels.has(key)) {\r\n            throw new Error(`\u5173\u5361[${key}]\u4E0D\u5B58\u5728`);\r\n        }\r\n        let level = this.__levels.get(key);\r\n        level.destroy();\r\n        this.__levels.delete(key);\r\n    }\r\n\r\n    private static __instance: LevelManager;\r\n    /**\r\n     * \u5355\u4F8B\r\n     */\r\n    static get single(): LevelManager {\r\n        if (this.__instance == null) {\r\n            this.__instance = new LevelManager();\r\n        }\r\n        return this.__instance;\r\n    }\r\n}", "import { Node } from \"cc\";\r\nimport { Level } from \"./Level\";\r\nimport { LevelModeScript } from \"./LevelModeScript\";\r\nimport { Event, EventDispatcher, Res, ResRequest, ResURL } from \"dream-cc-core\";\r\nimport { ECSWorld } from \"../core/ECSWorld\";\r\n\r\n\r\n/**\r\n * \u5173\u5361\u6A21\u5F0F\u57FA\u7C7B\r\n */\r\nexport abstract class LevelMode extends EventDispatcher {\r\n\r\n    level: Level;\r\n\r\n    /**\r\n     * \u9700\u8981\u6CE8\u518C\u7684\u914D\u7F6E\u8868\u5B58\u53D6\u5668\r\n     */\r\n    configs: Array<string>;\r\n\r\n    reqeust: ResRequest | null = null;\r\n\r\n    /**\u811A\u672C */\r\n    private __scripts: Map<new () => LevelModeScript, LevelModeScript>;\r\n\r\n    /**\u6570\u636E */\r\n    protected $data: any;\r\n    /**\u521D\u59CB\u5316\u6570\u636E*/\r\n    protected $initData: any;\r\n    /**\u521D\u59CB\u5316\u5B8C\u6210 */\r\n    protected $inited: boolean = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.__scripts = new Map<new () => LevelModeScript, LevelModeScript>();\r\n    }\r\n\r\n    /**\r\n     * \u6570\u636E\r\n     */\r\n    get data(): any {\r\n        return this.$data;\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316\u6570\u636E\r\n     */\r\n    get initData(): any {\r\n        return this.$initData;\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316\r\n     */\r\n    init(...arg: any[]): void {\r\n        this.$initData = arg;\r\n        //\u914D\u7F6E\u8868\r\n        let urls: Array<ResURL> = [];\r\n        if (this.configs && this.configs.length > 0) {\r\n            for (let index = 0; index < this.configs.length; index++) {\r\n                const element = this.configs[index];\r\n                const url = Res.sheet2URL(element);\r\n                urls.push(url);\r\n            }\r\n        }\r\n        if (urls.length <= 0) {\r\n            this.$init();\r\n        } else {\r\n            //\u52A0\u8F7D\r\n            this.reqeust = Res.create(\r\n                urls,\r\n                \"LevelMode\",\r\n                (progress: number) => {\r\n                    this.emit(Event.PROGRESS, \"LevelMode\", undefined, progress * 0.7);\r\n                },\r\n                (err?: Error) => {\r\n                    if (err) {\r\n                        this.reqeust.dispose();\r\n                        this.reqeust = null;\r\n                        this.emit(Event.ERROR, \"LevelMode\", err);\r\n                        return;\r\n                    }\r\n                    this.$init();\r\n                }\r\n            );\r\n            this.reqeust.load();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316,\u5982\u679C\u4E0D\u8C03\u7528super.$init\u7684\u8BDD\uFF0C\u8BF7\u5728\u5B8C\u6210\u521D\u59CB\u5316\u540E\u8C03\u7528$initComplete()\u65B9\u6CD5\u3002\r\n     */\r\n    protected $init(): void {\r\n        this.$initComplete();\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316\u5B8C\u6210\r\n     */\r\n    protected $initComplete(): void {\r\n        for (const element of this.__scripts.values()) {\r\n            element.init();\r\n        }\r\n        this.$inited = true;\r\n        this.emit(Event.COMPLETE);\r\n    }\r\n\r\n    /**\r\n     * \u5FC3\u8DF3\r\n     * @param dt \r\n     */\r\n    tick(dt: number): void {\r\n        if (this.$inited) {\r\n            this.__scripts.forEach((value, key) => {\r\n                value.tick(dt);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u6DFB\u52A0\u811A\u672C\r\n     * @param type \r\n     */\r\n    addScript<T extends LevelModeScript>(type: new () => T): T | null {\r\n        if (type == null) {\r\n            return null;\r\n        }\r\n        if (this.__scripts.has(type)) {\r\n            throw new Error(\"\u91CD\u590D\u6DFB\u52A0\u811A\u672C:\" + type);\r\n        }\r\n        let value = new type();\r\n        value.mode = this;\r\n        this.__scripts.set(type, value);\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u811A\u672C\r\n     * @param type \r\n     * @returns \r\n     */\r\n    removeScript<T extends LevelModeScript>(type: new () => T): T | null {\r\n        if (!this.__scripts.has(type)) {\r\n            throw new Error(\"\u811A\u672C\u4E0D\u5B58\u5728!\");\r\n        }\r\n        let result = this.__scripts.get(type);\r\n        result.mode = null;\r\n        this.__scripts.delete(type);\r\n        return result as T;\r\n    }\r\n\r\n    /**\r\n     * \u79FB\u9664\u6240\u6709\u811A\u672C\r\n     */\r\n    removeAllScript(): void {\r\n        this.__scripts.forEach((value) => {\r\n            value.destroy();\r\n        });\r\n        this.__scripts.clear();\r\n    }\r\n\r\n    /**\r\n     * \u83B7\u53D6\u811A\u672C\r\n     * @param type \r\n     * @returns \r\n     */\r\n    getScript<T extends LevelModeScript>(type: new () => T): T | null {\r\n        if (!this.__scripts.has(type)) {\r\n            return null;\r\n        }\r\n        return this.__scripts.get(type) as T;\r\n    }\r\n\r\n    destroy(): boolean {\r\n        if (super.destroy()) {\r\n\r\n            if (this.configs) {\r\n                this.configs.splice(0, this.configs.length);\r\n                this.configs = null;\r\n            }\r\n\r\n            if (this.__scripts) {\r\n                this.__scripts.forEach((value) => {\r\n                    value.destroy();\r\n                });\r\n                this.__scripts = null;\r\n            }\r\n            if (this.reqeust) {\r\n                this.reqeust.dispose();\r\n                this.reqeust = null;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * \u4E16\u754C\r\n     */\r\n    get world(): ECSWorld {\r\n        return this.level.world;\r\n    }\r\n\r\n    /**\r\n     * \u6839\u8282\u70B9\r\n     */\r\n    get root(): Node {\r\n        return this.level.root;\r\n    }\r\n}", "import { ECSWorld } from \"../core/ECSWorld\";\r\nimport { LevelMode } from \"./LevelMode\";\r\n\r\n/**\r\n * \u5173\u5361\u6A21\u5F0F\u811A\u672C(\u7528\u4E8E\u62C6\u5206\u548C\u91CD\u7528\u903B\u8F91)\r\n */\r\nexport abstract class LevelModeScript {\r\n    /**\r\n     * \u6A21\u5F0F\r\n     */\r\n    mode: LevelMode;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316\r\n     */\r\n    abstract init(): void;\r\n    /**\r\n     * \u9500\u6BC1\r\n     */\r\n    abstract destroy(): void;\r\n\r\n    tick(dt: number): void {\r\n\r\n    }\r\n\r\n    /**\r\n     * \u4E16\u754C\r\n     */\r\n    get world(): ECSWorld {\r\n        return this.mode.world;\r\n    }\r\n}", "import { ECSComponent } from \"dream-cc-ecs\";\r\nimport { BTContext } from \"../BTContext\";\r\nimport { IBTNode } from \"../interfaces/IBTNode\";\r\nimport { IBTNodeConfig } from \"../interfaces/IBTNodeConfig\";\r\n\r\n\r\n/**\r\n * \u884C\u4E3A\u6811\u7EC4\u4EF6\r\n */\r\nexport class BehaviorTreeComponent extends ECSComponent {\r\n    /**\r\n     * \u5E27\u95F4\u9694\r\n     */\r\n    frameInterval: number = 50;\r\n\r\n    lastTime: number = 0;\r\n\r\n    debug: boolean = false;\r\n    /**\r\n     * \u884C\u4E3A\u6811\u7684\u4E0A\u4E0B\u6587\r\n     */\r\n    context: BTContext;\r\n    /**\u884C\u4E3A\u6811\u6839\u8282\u70B9 */\r\n    root: IBTNode;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * \u521D\u59CB\u5316\r\n     * @param context \r\n     */\r\n    init(context: BTContext, data?: IBTNodeConfig, blackboard?: any) {\r\n        this.context = context;\r\n        if (data) {\r\n            this.setData(data, blackboard);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u8BBE\u7F6E\r\n     * @param data \r\n     * @param blackboard \r\n     */\r\n    setData(data: IBTNodeConfig, blackboard: any): void {\r\n        let old = this.root;\r\n        let bb = blackboard ? blackboard : old.blackboard;\r\n        this.root = this.context.createNode(data, bb);\r\n        //\u6E05\u7406\u8001\u7684\r\n        if (old) {\r\n            old.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u9ED1\u677F\r\n     */\r\n    get blackboard(): any {\r\n        if (!this.root) {\r\n            return null;\r\n        }\r\n        return this.root.blackboard;\r\n    }\r\n\r\n    reset(): void {\r\n        if (this.root) {\r\n            this.root.destroy();\r\n            this.root = null;\r\n        }\r\n    }\r\n\r\n    destroy(): boolean {\r\n        let result = super.destroy();\r\n        if (this.root) {\r\n            this.root.destroy();\r\n            this.root = null;\r\n        }\r\n        this.context = null;\r\n        return result;\r\n    }\r\n}", "import { ECSEntity, ECSSystem, MatcherAllOf } from \"dream-cc-ecs\";\r\nimport { BehaviorTreeComponent } from \"./BehaviorTreeComponent\";\r\nimport { Timer } from \"dream-cc-core\";\r\nimport { BTUtils } from \"../BTUtils\";\r\n\r\n\r\n/**\r\n * \u884C\u4E3A\u6811\u7CFB\u7EDF\r\n */\r\nexport class BehaviorTreeSystem extends ECSSystem {\r\n\r\n    constructor() {\r\n        super(new MatcherAllOf([\r\n            BehaviorTreeComponent\r\n        ]));\r\n    }\r\n\r\n    protected $tick(entitys: Set<ECSEntity>, dt: number): void {\r\n        let currentTime = Timer.currentTime;\r\n        for (let entity of entitys) {\r\n            let tree = this.world.getComponent(entity, BehaviorTreeComponent);\r\n            if (!tree) return;\r\n            if (currentTime - tree.lastTime < tree.frameInterval) {\r\n                return;\r\n            }\r\n            tree.lastTime = currentTime;\r\n            if (tree && tree.root) {\r\n                tree.root.evaluate();\r\n                if (tree.debug) {\r\n                    let log = BTUtils.printTreeRecursively(tree.root);\r\n                    console.log(log);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "import { Event, EventDispatcher, Logger } from \"dream-cc-core\";\r\nimport { IState } from \"./IState\";\r\n\r\n\r\n/**\r\n * \u72B6\u6001\u673A\r\n */\r\nexport class FSM extends EventDispatcher {\r\n\r\n\r\n    /**\u6240\u5C5E*/\r\n    owner: any;\r\n    debug: boolean;\r\n\r\n    private __current: IState;\r\n    private __state: number;\r\n    private __states: Map<number, IState>;\r\n    private __name: string\r\n    constructor(owner: any, name: string) {\r\n        super();\r\n        this.owner = owner;\r\n        this.__name = name;\r\n        this.__states = new Map<number, IState>();\r\n    }\r\n\r\n    tick(dt: number): void {\r\n        if (this.__current) {\r\n            this.__current.tick(dt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u6DFB\u52A0\r\n     * @param key \r\n     * @param v \r\n     */\r\n    addState(key: number, v: IState): void {\r\n        this.__states.set(key, v);\r\n        v.init(this);\r\n    }\r\n\r\n    /**\r\n     * \u5207\u6362\u72B6\u6001\r\n     * @param value \r\n     * @param data \r\n     * @returns \r\n     */\r\n    switchState(value: number, data?: any): void {\r\n        if (this.__state == value) {\r\n            return;\r\n        }\r\n        let oldKey = this.__state;\r\n        let old: IState = this.__current;\r\n        if (old) {\r\n            if (this.debug) {\r\n                Logger.log(this.__name + \" \u6240\u5C5E:\" + this.owner.name + \" \u9000\u51FA\u72B6\u6001==>\" + this.__current.name, \"FSM\");\r\n            }\r\n            old.exit();\r\n        }\r\n        this.__current = null;\r\n        if (!this.__states.has(value)) {\r\n            throw new Error(\"\u72B6\u6001\u673A:\" + this.__name + \" \u6240\u5C5E:\" + this.owner.name + \"\u672A\u627E\u5230\u72B6\u6001==>\" + value);\r\n        }\r\n        this.__state = value;\r\n        this.__current = this.__states.get(value);\r\n        if (this.debug) {\r\n            Logger.log(this.__name + \" \u6240\u5C5E:\" + this.owner.name + \" \u8FDB\u5165\u72B6\u6001==>\" + this.__current.name, \"FSM\");\r\n        }\r\n        this.__current.enter(data);\r\n        this.emit(Event.STATE_CHANGED, oldKey);\r\n    }\r\n\r\n    get state(): number {\r\n        return this.__state;\r\n    }\r\n\r\n    get current(): IState {\r\n        return this.__current;\r\n    }\r\n\r\n    destroy(): boolean {\r\n        if (super.destroy()) {\r\n            if (this.__current) {\r\n                this.__current.exit();\r\n            }\r\n            this.__states.forEach(element => {\r\n                element.destroy();\r\n            });\r\n            this.__states.clear();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["BTNodeStatus", "BTNodeType", "BTNodeKeys", "Dictionary", "Node", "TickerManager", "Vec3", "EventDispatcher", "Event", "_ECSWorld", "index", "Dictionary", "Event", "EventDispatcher"]
}
